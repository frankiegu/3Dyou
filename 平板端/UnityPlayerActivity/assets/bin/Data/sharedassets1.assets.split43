;
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = worldNormal_1;
  mediump vec4 normal_38;
  normal_38 = tmpvar_37;
  mediump vec3 x2_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_40);
  x2_39.y = dot (unity_SHBg, tmpvar_40);
  x2_39.z = dot (unity_SHBb, tmpvar_40);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_28;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (x2_39 + (unity_SHC.xyz * (
    (normal_38.x * normal_38.x)
   - 
    (normal_38.y * normal_38.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
mediump float t16_2;
highp vec4 t3;
bool tb3;
mediump vec3 t16_4;
highp float t5;
highp float t6;
bool tb6;
highp vec2 t10;
highp vec2 t13;
highp float t15;
highp uint tu15;
highp float t16;
bool tb16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6 = dot(t0.xyz, t0.xyz);
    t6 = inversesqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t6 = dot(t1.xzw, t1.xzw);
    t6 = sqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t16 = in_TEXCOORD1.z + _CameraXZAngle;
    t16 = t16 * _TreeInfo[int(tu15) + 0].y + 0.5;
    t16 = floor(t16);
    t16 = t16 / _TreeInfo[int(tu15) + 0].x;
    tb3 = t16>=(-t16);
    t16 = fract(abs(t16));
    t16 = (tb3) ? t16 : (-t16);
    t15 = t16 * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu15 = uint(t15);
    tb16 = _ImageTexCoords[int(tu15) + 0].w<0.0;
    t3.xy = (-_ImageTexCoords[int(tu15) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu15) + 0].xy;
    t13.xy = _ImageTexCoords[int(tu15) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu15) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb16)) ? t3.xy : t13.xy;
    vs_TEXCOORD3.z = 0.0;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t3.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t3.w = t15 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t0.xy = t3.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_2 = t1.y * t1.y;
    t16_2 = t1.x * t1.x + (-t16_2);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_4.x = dot(unity_SHBr, t16_0);
    t16_4.y = dot(unity_SHBg, t16_0);
    t16_4.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_2) + t16_4.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_37;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = worldNormal_1;
  mediump vec4 normal_39;
  normal_39 = tmpvar_38;
  mediump vec3 x2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_39.xyzz * normal_39.yzzx);
  x2_40.x = dot (unity_SHBr, tmpvar_41);
  x2_40.y = dot (unity_SHBg, tmpvar_41);
  x2_40.z = dot (unity_SHBb, tmpvar_41);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (x2_40 + (unity_SHC.xyz * (
    (normal_39.x * normal_39.x)
   - 
    (normal_39.y * normal_39.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
mediump vec3 t16_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.www + t3.xyz;
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t3.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t18 = t0.y * _ProjectionParams.x;
    t1.w = t18 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_4 = t2.y * t2.y;
    t16_4 = t2.x * t2.x + (-t16_4);
    t16_0 = t2.yzzx * t2.xyzz;
    t16_5.x = dot(unity_SHBr, t16_0);
    t16_5.y = dot(unity_SHBg, t16_0);
    t16_5.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_4) + t16_5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_37;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = worldNormal_1;
  mediump vec4 normal_39;
  normal_39 = tmpvar_38;
  mediump vec3 x2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_39.xyzz * normal_39.yzzx);
  x2_40.x = dot (unity_SHBr, tmpvar_41);
  x2_40.y = dot (unity_SHBg, tmpvar_41);
  x2_40.z = dot (unity_SHBb, tmpvar_41);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (x2_40 + (unity_SHC.xyz * (
    (normal_39.x * normal_39.x)
   - 
    (normal_39.y * normal_39.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
mediump vec3 t16_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.www + t3.xyz;
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t3.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t18 = t0.y * _ProjectionParams.x;
    t1.w = t18 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_4 = t2.y * t2.y;
    t16_4 = t2.x * t2.x + (-t16_4);
    t16_0 = t2.yzzx * t2.xyzz;
    t16_5.x = dot(unity_SHBr, t16_0);
    t16_5.y = dot(unity_SHBg, t16_0);
    t16_5.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_4) + t16_5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_34;
  tmpvar_34 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_2 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_43;
  tmpvar_43.x = worldTangent_2.x;
  tmpvar_43.y = tmpvar_42.x;
  tmpvar_43.z = worldNormal_3.x;
  tmpvar_43.w = tmpvar_34.x;
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.y;
  tmpvar_44.y = tmpvar_42.y;
  tmpvar_44.z = worldNormal_3.y;
  tmpvar_44.w = tmpvar_34.y;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_2.z;
  tmpvar_45.y = tmpvar_42.z;
  tmpvar_45.z = worldNormal_3.z;
  tmpvar_45.w = tmpvar_34.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = worldNormal_3;
  mediump vec4 normal_47;
  normal_47 = tmpvar_46;
  mediump vec3 x2_48;
  mediump vec4 tmpvar_49;
  tmpvar_49 = (normal_47.xyzz * normal_47.yzzx);
  x2_48.x = dot (unity_SHBr, tmpvar_49);
  x2_48.y = dot (unity_SHBg, tmpvar_49);
  x2_48.z = dot (unity_SHBb, tmpvar_49);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_29;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_48 + (unity_SHC.xyz * (
    (normal_47.x * normal_47.x)
   - 
    (normal_47.y * normal_47.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
highp float t7;
highp vec2 t8;
bool tb8;
highp vec2 t14;
highp float t21;
highp uint tu21;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t14.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_TEXCOORD0.x + -0.5;
    t21 = in_COLOR0.w * 255.0;
    tu21 = uint(t21);
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    t14.x = t14.x * in_TEXCOORD1.x;
    t1.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    t1.w = t14.x * in_TEXCOORD1.y + t1.y;
    t7 = (-t7) * 0.25 + t1.w;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t14.x = log2(t7);
    t14.x = t14.x * _ST_WindGlobal.w;
    t14.x = exp2(t14.x);
    tb8 = t7!=0.0;
    t7 = (tb8) ? t14.x : t7;
    t0.x = t7 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t8.x = dot(t0.xyz, t0.xyz);
    t8.x = inversesqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t8.x = dot(t1.xzw, t1.xzw);
    t8.x = sqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t0.xyz = (bool(tb8)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t3;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t3;
    t1.x = dot(t2.xyw, t2.xyw);
    t1.x = inversesqrt(t1.x);
    t2 = t1.xxxx * t2;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_4.xyz = t2.wxy * t3.xyz;
    t10_4.xyz = t2.ywx * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu21) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu21) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t21 = t1.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    tu21 = uint(t21);
    tb1 = _ImageTexCoords[int(tu21) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu21) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu21) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu21) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu21) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t21 = t0.y * _ProjectionParams.x;
    t1.w = t21 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_5 = t2.y * t2.y;
    t16_5 = t2.x * t2.x + (-t16_5);
    t16_0 = t2.ywzx * t2;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_34;
  tmpvar_34 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_2 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_43;
  tmpvar_43.x = worldTangent_2.x;
  tmpvar_43.y = tmpvar_42.x;
  tmpvar_43.z = worldNormal_3.x;
  tmpvar_43.w = tmpvar_34.x;
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.y;
  tmpvar_44.y = tmpvar_42.y;
  tmpvar_44.z = worldNormal_3.y;
  tmpvar_44.w = tmpvar_34.y;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_2.z;
  tmpvar_45.y = tmpvar_42.z;
  tmpvar_45.z = worldNormal_3.z;
  tmpvar_45.w = tmpvar_34.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = worldNormal_3;
  mediump vec4 normal_47;
  normal_47 = tmpvar_46;
  mediump vec3 x2_48;
  mediump vec4 tmpvar_49;
  tmpvar_49 = (normal_47.xyzz * normal_47.yzzx);
  x2_48.x = dot (unity_SHBr, tmpvar_49);
  x2_48.y = dot (unity_SHBg, tmpvar_49);
  x2_48.z = dot (unity_SHBb, tmpvar_49);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_29;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_48 + (unity_SHC.xyz * (
    (normal_47.x * normal_47.x)
   - 
    (normal_47.y * normal_47.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
highp float t7;
highp vec2 t8;
bool tb8;
highp vec2 t14;
highp float t21;
highp uint tu21;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t14.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_TEXCOORD0.x + -0.5;
    t21 = in_COLOR0.w * 255.0;
    tu21 = uint(t21);
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    t14.x = t14.x * in_TEXCOORD1.x;
    t1.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    t1.w = t14.x * in_TEXCOORD1.y + t1.y;
    t7 = (-t7) * 0.25 + t1.w;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t14.x = log2(t7);
    t14.x = t14.x * _ST_WindGlobal.w;
    t14.x = exp2(t14.x);
    tb8 = t7!=0.0;
    t7 = (tb8) ? t14.x : t7;
    t0.x = t7 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t8.x = dot(t0.xyz, t0.xyz);
    t8.x = inversesqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t8.x = dot(t1.xzw, t1.xzw);
    t8.x = sqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t0.xyz = (bool(tb8)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t3;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t3;
    t1.x = dot(t2.xyw, t2.xyw);
    t1.x = inversesqrt(t1.x);
    t2 = t1.xxxx * t2;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_4.xyz = t2.wxy * t3.xyz;
    t10_4.xyz = t2.ywx * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu21) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu21) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t21 = t1.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    tu21 = uint(t21);
    tb1 = _ImageTexCoords[int(tu21) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu21) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu21) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu21) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu21) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t21 = t0.y * _ProjectionParams.x;
    t1.w = t21 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_5 = t2.y * t2.y;
    t16_5 = t2.x * t2.x + (-t16_5);
    t16_0 = t2.ywzx * t2;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_2 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.x;
  tmpvar_44.y = tmpvar_43.x;
  tmpvar_44.z = worldNormal_3.x;
  tmpvar_44.w = tmpvar_35.x;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_2.y;
  tmpvar_45.y = tmpvar_43.y;
  tmpvar_45.z = worldNormal_3.y;
  tmpvar_45.w = tmpvar_35.y;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_2.z;
  tmpvar_46.y = tmpvar_43.z;
  tmpvar_46.z = worldNormal_3.z;
  tmpvar_46.w = tmpvar_35.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = worldNormal_3;
  mediump vec4 normal_48;
  normal_48 = tmpvar_47;
  mediump vec3 x2_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_50);
  x2_49.y = dot (unity_SHBg, tmpvar_50);
  x2_49.z = dot (unity_SHBb, tmpvar_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_30;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_49 + (unity_SHC.xyz * (
    (normal_48.x * normal_48.x)
   - 
    (normal_48.y * normal_48.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
bool tb9;
highp float t10;
highp vec2 t18;
highp vec2 t19;
highp uint tu19;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t19.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t27 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t10 = in_TEXCOORD0.x + -0.5;
    t19.x = in_COLOR0.w * 255.0;
    tu19 = uint(t19.x);
    t10 = t10 * _TreeSize[int(tu19) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t2.xyz = vec3(t10) * _BillboardTangent.xyzx.xyz;
    t10 = in_TEXCOORD0.y * _TreeSize[int(tu19) + 0].y + _TreeSize[int(tu19) + 0].z;
    t2.w = t10 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t10 = log2(t1.x);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    tb28 = t1.x!=0.0;
    t1.x = (tb28) ? t10 : t1.x;
    t27 = t27 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t27) + t2.xz;
    t3.y = t2.w;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = inversesqrt(t27);
    t1.xyw = vec3(t27) * t3.xyz;
    t27 = dot(t2.xzw, t2.xzw);
    t27 = sqrt(t27);
    t1.xyw = vec3(t27) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb27 = 0.0<t16_4;
    t1.xyw = (bool(tb27)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t3 = t3 + t4;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t3 = t3 + t4;
    t27 = dot(t3.xyw, t3.xyw);
    t27 = inversesqrt(t27);
    t3 = vec4(t27) * t3;
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    t27 = dot(t5.xyz, t5.xyz);
    t27 = inversesqrt(t27);
    t5.xyz = vec3(t27) * t5.xyz;
    t10_6.xyz = t3.wxy * t5.xyz;
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.x;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD2.w = t2.z;
    vs_TEXCOORD1.z = t3.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD2.z = t3.w;
    vs_TEXCOORD3 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu19) + 0].x;
    tb9 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb9) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].x + _TreeInfo[int(tu19) + 0].z;
    tu0 = uint(t0.x);
    tb9 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t18.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t18.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t27 = t0.y * _ProjectionParams.x;
    t1.w = t27 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_7 = t3.y * t3.y;
    t16_7 = t3.x * t3.x + (-t16_7);
    t16_0 = t3.ywzx * t3;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_2 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.x;
  tmpvar_44.y = tmpvar_43.x;
  tmpvar_44.z = worldNormal_3.x;
  tmpvar_44.w = tmpvar_35.x;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_2.y;
  tmpvar_45.y = tmpvar_43.y;
  tmpvar_45.z = worldNormal_3.y;
  tmpvar_45.w = tmpvar_35.y;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_2.z;
  tmpvar_46.y = tmpvar_43.z;
  tmpvar_46.z = worldNormal_3.z;
  tmpvar_46.w = tmpvar_35.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = worldNormal_3;
  mediump vec4 normal_48;
  normal_48 = tmpvar_47;
  mediump vec3 x2_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_50);
  x2_49.y = dot (unity_SHBg, tmpvar_50);
  x2_49.z = dot (unity_SHBb, tmpvar_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_30;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_49 + (unity_SHC.xyz * (
    (normal_48.x * normal_48.x)
   - 
    (normal_48.y * normal_48.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
bool tb9;
highp float t10;
highp vec2 t18;
highp vec2 t19;
highp uint tu19;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t19.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t27 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t10 = in_TEXCOORD0.x + -0.5;
    t19.x = in_COLOR0.w * 255.0;
    tu19 = uint(t19.x);
    t10 = t10 * _TreeSize[int(tu19) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t2.xyz = vec3(t10) * _BillboardTangent.xyzx.xyz;
    t10 = in_TEXCOORD0.y * _TreeSize[int(tu19) + 0].y + _TreeSize[int(tu19) + 0].z;
    t2.w = t10 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t10 = log2(t1.x);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    tb28 = t1.x!=0.0;
    t1.x = (tb28) ? t10 : t1.x;
    t27 = t27 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t27) + t2.xz;
    t3.y = t2.w;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = inversesqrt(t27);
    t1.xyw = vec3(t27) * t3.xyz;
    t27 = dot(t2.xzw, t2.xzw);
    t27 = sqrt(t27);
    t1.xyw = vec3(t27) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb27 = 0.0<t16_4;
    t1.xyw = (bool(tb27)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t3 = t3 + t4;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t3 = t3 + t4;
    t27 = dot(t3.xyw, t3.xyw);
    t27 = inversesqrt(t27);
    t3 = vec4(t27) * t3;
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    t27 = dot(t5.xyz, t5.xyz);
    t27 = inversesqrt(t27);
    t5.xyz = vec3(t27) * t5.xyz;
    t10_6.xyz = t3.wxy * t5.xyz;
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.x;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD2.w = t2.z;
    vs_TEXCOORD1.z = t3.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD2.z = t3.w;
    vs_TEXCOORD3 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu19) + 0].x;
    tb9 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb9) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].x + _TreeInfo[int(tu19) + 0].z;
    tu0 = uint(t0.x);
    tb9 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t18.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t18.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t27 = t0.y * _ProjectionParams.x;
    t1.w = t27 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_7 = t3.y * t3.y;
    t16_7 = t3.x * t3.x + (-t16_7);
    t16_0 = t3.ywzx * t3;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_39;
  hPos_39 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_40;
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (hPos_39 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = hPos_39.zw;
  highp vec3 tmpvar_44;
  tmpvar_44 = o_41.xyw;
  screenPos_40 = tmpvar_44;
  screenPos_40.xy = (screenPos_40.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(((v_45.xyz * tmpvar_16.z) + (v_46.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_47;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_1;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_40;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (x2_50 + (unity_SHC.xyz * (
    (normal_49.x * normal_49.x)
   - 
    (normal_49.y * normal_49.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t15.x = dot(t8.xyz, t8.xyz);
    t15.x = inversesqrt(t15.x);
    t0.xy = t15.xx * t8.xz;
    t0.zw = (-t0.yy);
    t8.x = dot(t0.xz, t0.xw);
    t15.xy = t0.yx * vec2(-1.0, 1.0);
    t8.x = inversesqrt(t8.x);
    t8.xy = t8.xx * t15.xy;
    t3.xz = t8.xy * vec2(t9);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t22 = dot(t4.xyz, t4.xyz);
    t22 = inversesqrt(t22);
    t2.xyw = vec3(t22) * t4.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = sqrt(t22);
    t2.xyw = vec3(t22) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t8.y * _World2Object[0].x;
    t3.y = t8.y * _World2Object[1].x;
    t3.z = t8.y * _World2Object[2].x;
    t4.x = (-t8.x) * _World2Object[0].z;
    t4.y = (-t8.x) * _World2Object[1].z;
    t4.z = (-t8.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = max(abs(t8.y), abs(t8.x));
    t1.x = float(1.0) / t1.x;
    t22 = min(abs(t8.y), abs(t8.x));
    t1.x = t1.x * t22;
    t22 = t1.x * t1.x;
    t24 = t22 * 0.0208350997 + -0.0851330012;
    t24 = t22 * t24 + 0.180141002;
    t24 = t22 * t24 + -0.330299497;
    t22 = t22 * t24 + 0.999866009;
    t24 = t22 * t1.x;
    t24 = t24 * -2.0 + 1.57079637;
    tb4 = abs(t8.y)<abs(t8.x);
    t24 = tb4 ? t24 : float(0.0);
    t1.x = t1.x * t22 + t24;
    tb22 = t8.y<(-t8.y);
    t22 = tb22 ? -3.14159274 : float(0.0);
    t1.x = t22 + t1.x;
    t22 = min(t8.y, (-t8.x));
    t8.x = max(t8.y, (-t8.x));
    tb8 = t8.x>=(-t8.x);
    tb15 = t22<(-t22);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb15) * 0xffffffffu);
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    tb8 = t1.x<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1.x = t8.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1.x);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    vs_TEXCOORD3.z = 0.0;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t22 = t1.y * _ProjectionParams.x;
    t2.w = t22 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_5 = t3.y * t3.y;
    t16_5 = t3.x * t3.x + (-t16_5);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_39;
  hPos_39 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_40;
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (hPos_39 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = hPos_39.zw;
  highp vec3 tmpvar_44;
  tmpvar_44 = o_41.xyw;
  screenPos_40 = tmpvar_44;
  screenPos_40.xy = (screenPos_40.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(((v_45.xyz * tmpvar_16.z) + (v_46.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_47;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_1;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_40;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (x2_50 + (unity_SHC.xyz * (
    (normal_49.x * normal_49.x)
   - 
    (normal_49.y * normal_49.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t15.x = dot(t8.xyz, t8.xyz);
    t15.x = inversesqrt(t15.x);
    t0.xy = t15.xx * t8.xz;
    t0.zw = (-t0.yy);
    t8.x = dot(t0.xz, t0.xw);
    t15.xy = t0.yx * vec2(-1.0, 1.0);
    t8.x = inversesqrt(t8.x);
    t8.xy = t8.xx * t15.xy;
    t3.xz = t8.xy * vec2(t9);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t22 = dot(t4.xyz, t4.xyz);
    t22 = inversesqrt(t22);
    t2.xyw = vec3(t22) * t4.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = sqrt(t22);
    t2.xyw = vec3(t22) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t8.y * _World2Object[0].x;
    t3.y = t8.y * _World2Object[1].x;
    t3.z = t8.y * _World2Object[2].x;
    t4.x = (-t8.x) * _World2Object[0].z;
    t4.y = (-t8.x) * _World2Object[1].z;
    t4.z = (-t8.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = max(abs(t8.y), abs(t8.x));
    t1.x = float(1.0) / t1.x;
    t22 = min(abs(t8.y), abs(t8.x));
    t1.x = t1.x * t22;
    t22 = t1.x * t1.x;
    t24 = t22 * 0.0208350997 + -0.0851330012;
    t24 = t22 * t24 + 0.180141002;
    t24 = t22 * t24 + -0.330299497;
    t22 = t22 * t24 + 0.999866009;
    t24 = t22 * t1.x;
    t24 = t24 * -2.0 + 1.57079637;
    tb4 = abs(t8.y)<abs(t8.x);
    t24 = tb4 ? t24 : float(0.0);
    t1.x = t1.x * t22 + t24;
    tb22 = t8.y<(-t8.y);
    t22 = tb22 ? -3.14159274 : float(0.0);
    t1.x = t22 + t1.x;
    t22 = min(t8.y, (-t8.x));
    t8.x = max(t8.y, (-t8.x));
    tb8 = t8.x>=(-t8.x);
    tb15 = t22<(-t22);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb15) * 0xffffffffu);
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    tb8 = t1.x<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1.x = t8.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1.x);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    vs_TEXCOORD3.z = 0.0;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t22 = t1.y * _ProjectionParams.x;
    t2.w = t22 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_5 = t3.y * t3.y;
    t16_5 = t3.x * t3.x + (-t16_5);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_48;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_1;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t26 = dot(t4.xyz, t4.xyz);
    t26 = inversesqrt(t26);
    t0.xy = vec2(t26) * t4.xz;
    t0.zw = (-t0.yy);
    t26 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t26 = inversesqrt(t26);
    t4.xy = vec2(t26) * t4.xy;
    t3.xz = vec2(t10) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = sqrt(t27);
    t2.xyw = t2.xyw * vec3(t27);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = t9.y + t9.x;
    t1.x = t9.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t9.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t9.x;
    t9.x = t1.x * t1.x;
    t17.x = t9.x * 0.0208350997 + -0.0851330012;
    t17.x = t9.x * t17.x + 0.180141002;
    t17.x = t9.x * t17.x + -0.330299497;
    t9.x = t9.x * t17.x + 0.999866009;
    t17.x = t9.x * t1.x;
    t17.x = t17.x * -2.0 + 1.57079637;
    tb25 = abs(t4.y)<abs(t4.x);
    t17.x = tb25 ? t17.x : float(0.0);
    t1.x = t1.x * t9.x + t17.x;
    tb9 = t4.y<(-t4.y);
    t9.x = tb9 ? -3.14159274 : float(0.0);
    t1.x = t9.x + t1.x;
    t9.x = min(t4.y, (-t4.x));
    t17.x = max(t4.y, (-t4.x));
    tb17 = t17.x>=(-t17.x);
    tb9 = t9.x<(-t9.x);
    ti9 = int(uint(tb17) * 0xffffffffu & uint(tb9) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t25 = t1.y * _ProjectionParams.x;
    t2.w = t25 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_6 = t3.y * t3.y;
    t16_6 = t3.x * t3.x + (-t16_6);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_48;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_1;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t26 = dot(t4.xyz, t4.xyz);
    t26 = inversesqrt(t26);
    t0.xy = vec2(t26) * t4.xz;
    t0.zw = (-t0.yy);
    t26 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t26 = inversesqrt(t26);
    t4.xy = vec2(t26) * t4.xy;
    t3.xz = vec2(t10) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = sqrt(t27);
    t2.xyw = t2.xyw * vec3(t27);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = t9.y + t9.x;
    t1.x = t9.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t9.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t9.x;
    t9.x = t1.x * t1.x;
    t17.x = t9.x * 0.0208350997 + -0.0851330012;
    t17.x = t9.x * t17.x + 0.180141002;
    t17.x = t9.x * t17.x + -0.330299497;
    t9.x = t9.x * t17.x + 0.999866009;
    t17.x = t9.x * t1.x;
    t17.x = t17.x * -2.0 + 1.57079637;
    tb25 = abs(t4.y)<abs(t4.x);
    t17.x = tb25 ? t17.x : float(0.0);
    t1.x = t1.x * t9.x + t17.x;
    tb9 = t4.y<(-t4.y);
    t9.x = tb9 ? -3.14159274 : float(0.0);
    t1.x = t9.x + t1.x;
    t9.x = min(t4.y, (-t4.x));
    t17.x = max(t4.y, (-t4.x));
    tb17 = t17.x>=(-t17.x);
    tb9 = t9.x<(-t9.x);
    ti9 = int(uint(tb17) * 0xffffffffu & uint(tb9) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t25 = t1.y * _ProjectionParams.x;
    t2.w = t25 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_6 = t3.y * t3.y;
    t16_6 = t3.x * t3.x + (-t16_6);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_46;
  tmpvar_46 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_49;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = _Object2World[0].xyz;
  tmpvar_50[1] = _Object2World[1].xyz;
  tmpvar_50[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((tmpvar_50 * tmpvar_17));
  worldTangent_2 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_54;
  tmpvar_54.x = worldTangent_2.x;
  tmpvar_54.y = tmpvar_53.x;
  tmpvar_54.z = worldNormal_3.x;
  tmpvar_54.w = tmpvar_46.x;
  highp vec4 tmpvar_55;
  tmpvar_55.x = worldTangent_2.y;
  tmpvar_55.y = tmpvar_53.y;
  tmpvar_55.z = worldNormal_3.y;
  tmpvar_55.w = tmpvar_46.y;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_2.z;
  tmpvar_56.y = tmpvar_53.z;
  tmpvar_56.z = worldNormal_3.z;
  tmpvar_56.w = tmpvar_46.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_54;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_56;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_41;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb11;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t17.x = dot(t9.xyz, t9.xyz);
    t17.x = inversesqrt(t17.x);
    t0.xy = t17.xx * t9.xz;
    t0.zw = (-t0.yy);
    t9.x = dot(t0.xz, t0.xw);
    t17.xy = t0.yx * vec2(-1.0, 1.0);
    t9.x = inversesqrt(t9.x);
    t9.xy = t9.xx * t17.xy;
    t3.xz = t9.xy * vec2(t10);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t2.xyw = vec3(t25) * t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = sqrt(t25);
    t2.xyw = vec3(t25) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t0.x = t9.y * _World2Object[0].x;
    t0.y = t9.y * _World2Object[1].x;
    t0.zw = t9.yy * _World2Object[2].xx;
    t3.x = (-t9.x) * _World2Object[0].z;
    t3.y = (-t9.x) * _World2Object[1].z;
    t3.zw = (-t9.xx) * _World2Object[2].zz;
    t0 = t0 + t3;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t3.xyz = t9.yyy * _Object2World[2].yzx;
    t3.xyz = _Object2World[0].yzx * t9.xxx + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_5.xyz = t0.wxy * t3.xyz;
    t10_5.xyz = t0.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t4.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t4.y;
    vs_TEXCOORD2.w = t4.z;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = max(abs(t9.y), abs(t9.x));
    t1.x = float(1.0) / t1.x;
    t25 = min(abs(t9.y), abs(t9.x));
    t1.x = t1.x * t25;
    t25 = t1.x * t1.x;
    t3.x = t25 * 0.0208350997 + -0.0851330012;
    t3.x = t25 * t3.x + 0.180141002;
    t3.x = t25 * t3.x + -0.330299497;
    t25 = t25 * t3.x + 0.999866009;
    t3.x = t25 * t1.x;
    t3.x = t3.x * -2.0 + 1.57079637;
    tb11 = abs(t9.y)<abs(t9.x);
    t3.x = tb11 ? t3.x : float(0.0);
    t1.x = t1.x * t25 + t3.x;
    tb25 = t9.y<(-t9.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t1.x = t25 + t1.x;
    t25 = min(t9.y, (-t9.x));
    t9.x = max(t9.y, (-t9.x));
    tb9 = t9.x>=(-t9.x);
    tb17 = t25<(-t25);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t25 = t1.y * _ProjectionParams.x;
    t2.w = t25 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_6 = t0.y * t0.y;
    t16_6 = t0.x * t0.x + (-t16_6);
    t16_0 = t0.ywzx * t0;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_46;
  tmpvar_46 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_49;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = _Object2World[0].xyz;
  tmpvar_50[1] = _Object2World[1].xyz;
  tmpvar_50[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((tmpvar_50 * tmpvar_17));
  worldTangent_2 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_54;
  tmpvar_54.x = worldTangent_2.x;
  tmpvar_54.y = tmpvar_53.x;
  tmpvar_54.z = worldNormal_3.x;
  tmpvar_54.w = tmpvar_46.x;
  highp vec4 tmpvar_55;
  tmpvar_55.x = worldTangent_2.y;
  tmpvar_55.y = tmpvar_53.y;
  tmpvar_55.z = worldNormal_3.y;
  tmpvar_55.w = tmpvar_46.y;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_2.z;
  tmpvar_56.y = tmpvar_53.z;
  tmpvar_56.z = worldNormal_3.z;
  tmpvar_56.w = tmpvar_46.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_54;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_56;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_41;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb11;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t17.x = dot(t9.xyz, t9.xyz);
    t17.x = inversesqrt(t17.x);
    t0.xy = t17.xx * t9.xz;
    t0.zw = (-t0.yy);
    t9.x = dot(t0.xz, t0.xw);
    t17.xy = t0.yx * vec2(-1.0, 1.0);
    t9.x = inversesqrt(t9.x);
    t9.xy = t9.xx * t17.xy;
    t3.xz = t9.xy * vec2(t10);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t2.xyw = vec3(t25) * t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = sqrt(t25);
    t2.xyw = vec3(t25) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t0.x = t9.y * _World2Object[0].x;
    t0.y = t9.y * _World2Object[1].x;
    t0.zw = t9.yy * _World2Object[2].xx;
    t3.x = (-t9.x) * _World2Object[0].z;
    t3.y = (-t9.x) * _World2Object[1].z;
    t3.zw = (-t9.xx) * _World2Object[2].zz;
    t0 = t0 + t3;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t3.xyz = t9.yyy * _Object2World[2].yzx;
    t3.xyz = _Object2World[0].yzx * t9.xxx + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_5.xyz = t0.wxy * t3.xyz;
    t10_5.xyz = t0.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t4.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t4.y;
    vs_TEXCOORD2.w = t4.z;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = max(abs(t9.y), abs(t9.x));
    t1.x = float(1.0) / t1.x;
    t25 = min(abs(t9.y), abs(t9.x));
    t1.x = t1.x * t25;
    t25 = t1.x * t1.x;
    t3.x = t25 * 0.0208350997 + -0.0851330012;
    t3.x = t25 * t3.x + 0.180141002;
    t3.x = t25 * t3.x + -0.330299497;
    t25 = t25 * t3.x + 0.999866009;
    t3.x = t25 * t1.x;
    t3.x = t3.x * -2.0 + 1.57079637;
    tb11 = abs(t9.y)<abs(t9.x);
    t3.x = tb11 ? t3.x : float(0.0);
    t1.x = t1.x * t25 + t3.x;
    tb25 = t9.y<(-t9.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t1.x = t25 + t1.x;
    t25 = min(t9.y, (-t9.x));
    t9.x = max(t9.y, (-t9.x));
    tb9 = t9.x>=(-t9.x);
    tb17 = t25<(-t25);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t25 = t1.y * _ProjectionParams.x;
    t2.w = t25 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_6 = t0.y * t0.y;
    t16_6 = t0.x * t0.x + (-t16_6);
    t16_0 = t0.ywzx * t0;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_47;
  tmpvar_47 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_55;
  tmpvar_55.x = worldTangent_2.x;
  tmpvar_55.y = tmpvar_54.x;
  tmpvar_55.z = worldNormal_3.x;
  tmpvar_55.w = tmpvar_47.x;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_2.y;
  tmpvar_56.y = tmpvar_54.y;
  tmpvar_56.z = worldNormal_3.y;
  tmpvar_56.w = tmpvar_47.y;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_2.z;
  tmpvar_57.y = tmpvar_54.z;
  tmpvar_57.z = worldNormal_3.z;
  tmpvar_57.w = tmpvar_47.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = worldNormal_3;
  mediump vec4 normal_59;
  normal_59 = tmpvar_58;
  mediump vec3 x2_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_61);
  x2_60.y = dot (unity_SHBg, tmpvar_61);
  x2_60.z = dot (unity_SHBb, tmpvar_61);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_42;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_60 + (unity_SHC.xyz * (
    (normal_59.x * normal_59.x)
   - 
    (normal_59.y * normal_59.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t10.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t10.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t20.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    t11 = float(1.0) / _ST_WindGlobal.z;
    t20.x = in_COLOR0.w * 255.0;
    tu20 = uint(t20.x);
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    t3.y = t29 * in_TEXCOORD1.y;
    t11 = (-t11) * 0.25 + t3.y;
    t11 = max(t11, 0.0);
    t11 = t11 * _ST_WindGlobal.z;
    t29 = log2(t11);
    t29 = t29 * _ST_WindGlobal.w;
    t29 = exp2(t29);
    tb30 = t11!=0.0;
    t11 = (tb30) ? t29 : t11;
    t2.x = t11 * t2.x;
    t11 = in_TEXCOORD0.x + -0.5;
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    t11 = t11 * in_TEXCOORD1.x;
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t29 = dot(t4.xyz, t4.xyz);
    t29 = inversesqrt(t29);
    t0.xy = vec2(t29) * t4.xz;
    t0.zw = (-t0.yy);
    t29 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t29 = inversesqrt(t29);
    t4.xy = vec2(t29) * t4.xy;
    t3.xz = vec2(t11) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t30 = dot(t3.xyz, t3.xyz);
    t30 = sqrt(t30);
    t2.xyw = t2.xyw * vec3(t30);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t3.x;
    t0.x = t4.y * _World2Object[0].x;
    t0.y = t4.y * _World2Object[1].x;
    t0.zw = t4.yy * _World2Object[2].xx;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    t0 = t0 + t5;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1.x = dot(t5.xyz, t5.xyz);
    t1.x = inversesqrt(t1.x);
    t5.xyz = t1.xxx * t5.xyz;
    t10_6.xyz = t0.wxy * t5.xyz;
    t10_6.xyz = t0.ywx * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.w = t3.y;
    vs_TEXCOORD2.w = t3.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = t10.y + t10.x;
    t1.x = t10.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19.x = t10.x * 0.0208350997 + -0.0851330012;
    t19.x = t10.x * t19.x + 0.180141002;
    t19.x = t10.x * t19.x + -0.330299497;
    t10.x = t10.x * t19.x + 0.999866009;
    t19.x = t10.x * t1.x;
    t19.x = t19.x * -2.0 + 1.57079637;
    tb28 = abs(t4.y)<abs(t4.x);
    t19.x = tb28 ? t19.x : float(0.0);
    t1.x = t1.x * t10.x + t19.x;
    tb10 = t4.y<(-t4.y);
    t10.x = tb10 ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t4.y, (-t4.x));
    t19.x = max(t4.y, (-t4.x));
    tb19 = t19.x>=(-t19.x);
    tb10 = t10.x<(-t10.x);
    ti10 = int(uint(tb19) * 0xffffffffu & uint(tb10) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    tb10 = t1.x<0.0;
    t10.x = tb10 ? 6.28318548 : float(0.0);
    t1.x = t10.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    tb10 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb10) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    tu1 = uint(t1.x);
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t3.xy;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t28 = t1.y * _ProjectionParams.x;
    t2.w = t28 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_7 = t0.y * t0.y;
    t16_7 = t0.x * t0.x + (-t16_7);
    t16_0 = t0.ywzx * t0;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_47;
  tmpvar_47 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_2 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_55;
  tmpvar_55.x = worldTangent_2.x;
  tmpvar_55.y = tmpvar_54.x;
  tmpvar_55.z = worldNormal_3.x;
  tmpvar_55.w = tmpvar_47.x;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_2.y;
  tmpvar_56.y = tmpvar_54.y;
  tmpvar_56.z = worldNormal_3.y;
  tmpvar_56.w = tmpvar_47.y;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_2.z;
  tmpvar_57.y = tmpvar_54.z;
  tmpvar_57.z = worldNormal_3.z;
  tmpvar_57.w = tmpvar_47.z;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = worldNormal_3;
  mediump vec4 normal_59;
  normal_59 = tmpvar_58;
  mediump vec3 x2_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_61);
  x2_60.y = dot (unity_SHBg, tmpvar_61);
  x2_60.z = dot (unity_SHBb, tmpvar_61);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_42;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_TEXCOORD8 = (x2_60 + (unity_SHC.xyz * (
    (normal_59.x * normal_59.x)
   - 
    (normal_59.y * normal_59.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t10.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t10.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t20.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    t11 = float(1.0) / _ST_WindGlobal.z;
    t20.x = in_COLOR0.w * 255.0;
    tu20 = uint(t20.x);
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    t3.y = t29 * in_TEXCOORD1.y;
    t11 = (-t11) * 0.25 + t3.y;
    t11 = max(t11, 0.0);
    t11 = t11 * _ST_WindGlobal.z;
    t29 = log2(t11);
    t29 = t29 * _ST_WindGlobal.w;
    t29 = exp2(t29);
    tb30 = t11!=0.0;
    t11 = (tb30) ? t29 : t11;
    t2.x = t11 * t2.x;
    t11 = in_TEXCOORD0.x + -0.5;
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    t11 = t11 * in_TEXCOORD1.x;
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t29 = dot(t4.xyz, t4.xyz);
    t29 = inversesqrt(t29);
    t0.xy = vec2(t29) * t4.xz;
    t0.zw = (-t0.yy);
    t29 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t29 = inversesqrt(t29);
    t4.xy = vec2(t29) * t4.xy;
    t3.xz = vec2(t11) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t30 = dot(t3.xyz, t3.xyz);
    t30 = sqrt(t30);
    t2.xyw = t2.xyw * vec3(t30);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t3.x;
    t0.x = t4.y * _World2Object[0].x;
    t0.y = t4.y * _World2Object[1].x;
    t0.zw = t4.yy * _World2Object[2].xx;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    t0 = t0 + t5;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1.x = dot(t5.xyz, t5.xyz);
    t1.x = inversesqrt(t1.x);
    t5.xyz = t1.xxx * t5.xyz;
    t10_6.xyz = t0.wxy * t5.xyz;
    t10_6.xyz = t0.ywx * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.w = t3.y;
    vs_TEXCOORD2.w = t3.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = t10.y + t10.x;
    t1.x = t10.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19.x = t10.x * 0.0208350997 + -0.0851330012;
    t19.x = t10.x * t19.x + 0.180141002;
    t19.x = t10.x * t19.x + -0.330299497;
    t10.x = t10.x * t19.x + 0.999866009;
    t19.x = t10.x * t1.x;
    t19.x = t19.x * -2.0 + 1.57079637;
    tb28 = abs(t4.y)<abs(t4.x);
    t19.x = tb28 ? t19.x : float(0.0);
    t1.x = t1.x * t10.x + t19.x;
    tb10 = t4.y<(-t4.y);
    t10.x = tb10 ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t4.y, (-t4.x));
    t19.x = max(t4.y, (-t4.x));
    tb19 = t19.x>=(-t19.x);
    tb10 = t10.x<(-t10.x);
    ti10 = int(uint(tb19) * 0xffffffffu & uint(tb10) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    tb10 = t1.x<0.0;
    t10.x = tb10 ? 6.28318548 : float(0.0);
    t1.x = t10.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    tb10 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb10) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    tu1 = uint(t1.x);
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t3.xy;
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t1.xz * vec2(0.5, 0.5);
    t28 = t1.y * _ProjectionParams.x;
    t2.w = t28 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t1.xy = t2.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    t16_7 = t0.y * t0.y;
    t16_7 = t0.x * t0.x + (-t16_7);
    t16_0 = t0.ywzx * t0;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 375060
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp float angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  angle_5 = _CameraXZAngle;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_4.xz = tmpvar_11.xz;
  billboardPos_4.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_12;
    vPos_12 = billboardPos_4;
    highp float fMoveAmount_13;
    highp float fAdjust_14;
    highp float fLength_15;
    fLength_15 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_16;
    tmpvar_16 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_14 = tmpvar_16;
    if ((tmpvar_16 != 0.0)) {
      fAdjust_14 = pow (tmpvar_16, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_17.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    tmpvar_18 = (((
      (tmpvar_19 * tmpvar_19)
     * 
      (3.0 - (2.0 * tmpvar_19))
    ) - 0.5) * 2.0);
    fMoveAmount_13 = ((_ST_WindGlobal.y * (tmpvar_18.x + 
      (tmpvar_18.y * tmpvar_18.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_13 = (fMoveAmount_13 * fAdjust_14);
    vPos_12.xz = (tmpvar_11.xz + (_ST_WindVector.xz * fMoveAmount_13));
    vPos_12 = (normalize(vPos_12) * fLength_15);
    billboardPos_4 = vPos_12;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_20;
  tmpvar_20 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.x);
  highp float tmpvar_21;
  tmpvar_21 = (fract(abs(tmpvar_20)) * tmpvar_7.x);
  highp float tmpvar_22;
  if ((tmpvar_20 >= 0.0)) {
    tmpvar_22 = tmpvar_21;
  } else {
    tmpvar_22 = -(tmpvar_21);
  };
  highp vec4 tmpvar_23;
  tmpvar_23 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_22))];
  if ((tmpvar_23.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_23.xy - (tmpvar_23.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_23.xy + (tmpvar_23.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_24;
  highp vec3 viewN_25;
  highp vec3 viewpos_26;
  viewpos_26 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_27[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_27[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_25 = normalize((tmpvar_27 * _BillboardNormal));
  lowp vec3 tmpvar_28;
  tmpvar_28 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_24 = tmpvar_28;
  highp vec3 toLight_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = (unity_LightPosition[0].xyz - (viewpos_26 * unity_LightPosition[0].w));
  highp float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, tmpvar_30);
  toLight_29 = (tmpvar_30 * inversesqrt(tmpvar_31));
  lightColor_24 = (lightColor_24 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_25, toLight_29))
   * 
    ((1.0/((1.0 + (tmpvar_31 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_29, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = (unity_LightPosition[1].xyz - (viewpos_26 * unity_LightPosition[1].w));
  highp float tmpvar_34;
  tmpvar_34 = dot (tmpvar_33, tmpvar_33);
  toLight_32 = (tmpvar_33 * inversesqrt(tmpvar_34));
  lightColor_24 = (lightColor_24 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_25, toLight_32))
   * 
    ((1.0/((1.0 + (tmpvar_34 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_32, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (unity_LightPosition[2].xyz - (viewpos_26 * unity_LightPosition[2].w));
  highp float tmpvar_37;
  tmpvar_37 = dot (tmpvar_36, tmpvar_36);
  toLight_35 = (tmpvar_36 * inversesqrt(tmpvar_37));
  lightColor_24 = (lightColor_24 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_25, toLight_35))
   * 
    ((1.0/((1.0 + (tmpvar_37 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_35, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = (unity_LightPosition[3].xyz - (viewpos_26 * unity_LightPosition[3].w));
  highp float tmpvar_40;
  tmpvar_40 = dot (tmpvar_39, tmpvar_39);
  toLight_38 = (tmpvar_39 * inversesqrt(tmpvar_40));
  lightColor_24 = (lightColor_24 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_25, toLight_38))
   * 
    ((1.0/((1.0 + (tmpvar_40 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_38, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_24);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
highp int ti0;
highp uint tu0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp vec2 t8;
bool tb8;
highp vec2 t10;
bool tb10;
highp float t14;
highp float t17;
highp float t21;
bool tb21;
highp float t22;
bool tb22;
highp float t24;
void main()
{
    t0.x = in_COLOR0.w * 255.0;
    tu0 = uint(t0.x);
    t7.xy = in_POSITION0.xy + _Object2World[3].xy;
    t21 = in_TEXCOORD0.x + -0.5;
    t21 = t21 * _TreeSize[int(tu0) + 0].x;
    t21 = t21 * in_TEXCOORD1.x;
    t1.xyz = vec3(t21) * _BillboardTangent.xyzx.xyz;
    t21 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t1.w = t21 * in_TEXCOORD1.y + t1.y;
    t16_2 = _WindEnabled * _WindQuality;
    tb21 = 0.0<t16_2;
    t8.x = dot(t1.xzw, t1.xzw);
    t8.x = sqrt(t8.x);
    t3.x = float(1.0) / _ST_WindGlobal.z;
    t3.x = (-t3.x) * 0.25 + t1.w;
    t3.x = max(t3.x, 0.0);
    t3.x = t3.x * _ST_WindGlobal.z;
    tb10 = t3.x!=0.0;
    t17 = log2(t3.x);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    t3.x = (tb10) ? t17 : t3.x;
    t4.x = t7.x + in_TEXCOORD1.w;
    t4.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t7.xy = t4.xy + vec2(0.5, 0.5);
    t7.xy = fract(t7.xy);
    t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t7.xy) * abs(t7.xy);
    t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t7.xy = t10.xy * t7.xy + vec2(-0.5, -0.5);
    t7.xy = t7.xy + t7.xy;
    t7.x = t7.y * t7.y + t7.x;
    t14 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t7.x = _ST_WindGlobal.y * t7.x + t14;
    t7.x = t3.x * t7.x;
    t3.xz = _ST_WindVector.xz * t7.xx + t1.xz;
    t3.y = t1.w;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t3.xyz = t8.xxx * t3.xyz;
    t7.xyz = (bool(tb21)) ? t3.xyz : t1.xwz;
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu0) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu0) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t0.x = t1.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0.x);
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb1)) ? t8.xy : t3.xy;
    t1.xyz = t7.yyy * glstate_matrix_modelview0[1].xyz;
    t1.xyz = glstate_matrix_modelview0[0].xyz * t7.xxx + t1.xyz;
    t1.xyz = glstate_matrix_modelview0[2].xyz * t7.zzz + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_modelview0[3].xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t3.xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t3.xyz;
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = inversesqrt(t0.x);
    t3.xyz = t0.xxx * t3.xyz;
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_5.xyz;
    ti0 = 0x0;
    while(true){
        tb22 = ti0>=0x4;
        if(tb22){break;}
        t6.xyz = (-t1.xyz) * unity_LightPosition[ti0 + 0].www + unity_LightPosition[ti0 + 0].xyz;
        t22 = dot(t6.xyz, t6.xyz);
        t24 = inversesqrt(t22);
        t6.xyz = vec3(t24) * t6.xyz;
        t22 = t22 * unity_LightAtten[ti0 + 0].z + 1.0;
        t22 = float(1.0) / t22;
        t24 = dot(t6.xyz, unity_SpotDirection[ti0 + 0].xyz);
        t24 = max(t24, 0.0);
        t24 = t24 + (-unity_LightAtten[ti0 + 0].x);
        t24 = t24 * unity_LightAtten[ti0 + 0].y;
        t24 = clamp(t24, 0.0, 1.0);
        t22 = t22 * t24;
        t24 = dot(t3.xyz, t6.xyz);
        t24 = max(t24, 0.0);
        t22 = t22 * t24;
        t4.xyz = unity_LightColor[ti0 + 0].xyz * vec3(t22) + t4.xyz;
        ti0 = ti0 + 0x1;
    }
    t1.xyz = t4.xyz * _Color.xyz;
    t2 = t7.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t7.xxxx + t2;
    t0 = glstate_matrix_mvp[2] * t7.zzzz + t2;
    gl_Position = t0 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp float angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  angle_5 = _CameraXZAngle;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_4.xz = tmpvar_11.xz;
  billboardPos_4.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_12;
    vPos_12 = billboardPos_4;
    highp float fMoveAmount_13;
    highp float fAdjust_14;
    highp float fLength_15;
    fLength_15 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_16;
    tmpvar_16 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_14 = tmpvar_16;
    if ((tmpvar_16 != 0.0)) {
      fAdjust_14 = pow (tmpvar_16, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_17.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    tmpvar_18 = (((
      (tmpvar_19 * tmpvar_19)
     * 
      (3.0 - (2.0 * tmpvar_19))
    ) - 0.5) * 2.0);
    fMoveAmount_13 = ((_ST_WindGlobal.y * (tmpvar_18.x + 
      (tmpvar_18.y * tmpvar_18.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_13 = (fMoveAmount_13 * fAdjust_14);
    vPos_12.xz = (tmpvar_11.xz + (_ST_WindVector.xz * fMoveAmount_13));
    vPos_12 = (normalize(vPos_12) * fLength_15);
    billboardPos_4 = vPos_12;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_20;
  tmpvar_20 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.x);
  highp float tmpvar_21;
  tmpvar_21 = (fract(abs(tmpvar_20)) * tmpvar_7.x);
  highp float tmpvar_22;
  if ((tmpvar_20 >= 0.0)) {
    tmpvar_22 = tmpvar_21;
  } else {
    tmpvar_22 = -(tmpvar_21);
  };
  highp vec4 tmpvar_23;
  tmpvar_23 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_22))];
  if ((tmpvar_23.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_23.xy - (tmpvar_23.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_23.xy + (tmpvar_23.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_24;
  tmpvar_24 = clamp ((fract(
    ((tmpvar_10.x + tmpvar_10.y) + tmpvar_10.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_3.z = tmpvar_24;
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_25;
  highp vec3 viewN_26;
  highp vec3 viewpos_27;
  viewpos_27 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_28[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_28[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_26 = normalize((tmpvar_28 * _BillboardNormal));
  lowp vec3 tmpvar_29;
  tmpvar_29 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_25 = tmpvar_29;
  highp vec3 toLight_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (unity_LightPosition[0].xyz - (viewpos_27 * unity_LightPosition[0].w));
  highp float tmpvar_32;
  tmpvar_32 = dot (tmpvar_31, tmpvar_31);
  toLight_30 = (tmpvar_31 * inversesqrt(tmpvar_32));
  lightColor_25 = (lightColor_25 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_26, toLight_30))
   * 
    ((1.0/((1.0 + (tmpvar_32 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_30, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = (unity_LightPosition[1].xyz - (viewpos_27 * unity_LightPosition[1].w));
  highp float tmpvar_35;
  tmpvar_35 = dot (tmpvar_34, tmpvar_34);
  toLight_33 = (tmpvar_34 * inversesqrt(tmpvar_35));
  lightColor_25 = (lightColor_25 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_26, toLight_33))
   * 
    ((1.0/((1.0 + (tmpvar_35 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_33, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_LightPosition[2].xyz - (viewpos_27 * unity_LightPosition[2].w));
  highp float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, tmpvar_37);
  toLight_36 = (tmpvar_37 * inversesqrt(tmpvar_38));
  lightColor_25 = (lightColor_25 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_26, toLight_36))
   * 
    ((1.0/((1.0 + (tmpvar_38 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_36, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = (unity_LightPosition[3].xyz - (viewpos_27 * unity_LightPosition[3].w));
  highp float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_40);
  toLight_39 = (tmpvar_40 * inversesqrt(tmpvar_41));
  lightColor_25 = (lightColor_25 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_26, toLight_39))
   * 
    ((1.0/((1.0 + (tmpvar_41 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_39, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_25);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp float t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
mediump float t16_3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
bool tb8;
highp vec3 t9;
highp vec2 t16;
bool tb16;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb23;
highp float t25;
void main()
{
    t0 = in_COLOR0.w * 255.0;
    tu0 = uint(t0);
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = in_TEXCOORD0.x + -0.5;
    t1.x = t1.x * _TreeSize[int(tu0) + 0].x;
    t1.x = t1.x * in_TEXCOORD1.x;
    t1.xyz = t1.xxx * _BillboardTangent.xyzx.xyz;
    t2.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t1.w = t2.x * in_TEXCOORD1.y + t1.y;
    t16_3 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_3;
    t2.x = dot(t1.xzw, t1.xzw);
    t2.x = sqrt(t2.x);
    t9.x = float(1.0) / _ST_WindGlobal.z;
    t9.x = (-t9.x) * 0.25 + t1.w;
    t9.x = max(t9.x, 0.0);
    t9.x = t9.x * _ST_WindGlobal.z;
    tb16 = t9.x!=0.0;
    t23 = log2(t9.x);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    t9.x = (tb16) ? t23 : t9.x;
    t4.x = t7.x + in_TEXCOORD1.w;
    t4.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t16.xy = t4.xy + vec2(0.5, 0.5);
    t16.xy = fract(t16.xy);
    t16.xy = t16.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t4.xy = abs(t16.xy) * abs(t16.xy);
    t16.xy = -abs(t16.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t16.xy = t4.xy * t16.xy + vec2(-0.5, -0.5);
    t16.xy = t16.xy + t16.xy;
    t16.x = t16.y * t16.y + t16.x;
    t23 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t16.x = _ST_WindGlobal.y * t16.x + t23;
    t9.x = t9.x * t16.x;
    t4.xz = _ST_WindVector.xz * t9.xx + t1.xz;
    t4.y = t1.w;
    t9.x = dot(t4.xyz, t4.xyz);
    t9.x = inversesqrt(t9.x);
    t9.xyz = t9.xxx * t4.xyz;
    t2.xyz = t2.xxx * t9.xyz;
    t1.xyz = (bool(tb8)) ? t2.xyz : t1.xwz;
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    t22 = in_TEXCOORD1.z + _CameraXZAngle;
    t22 = t22 * _TreeInfo[int(tu0) + 0].y + 0.5;
    t22 = floor(t22);
    t22 = t22 / _TreeInfo[int(tu0) + 0].x;
    tb2 = t22>=(-t22);
    t22 = fract(abs(t22));
    t22 = (tb2) ? t22 : (-t22);
    t0 = t22 * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0);
    tb22 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t2.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t16.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb22)) ? t2.xy : t16.xy;
    t0 = t7.y + t7.x;
    t0 = t7.z + t0;
    t0 = fract(t0);
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    t7.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    t7.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t7.xyz;
    t7.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t7.xyz;
    t7.xyz = t7.xyz + glstate_matrix_modelview0[3].xyz;
    t2.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    t2.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t2.xyz;
    t2.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t2.xyz;
    t22 = dot(t2.xyz, t2.xyz);
    t22 = inversesqrt(t22);
    t2.xyz = vec3(t22) * t2.xyz;
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_5.xyz;
    ti22 = 0x0;
    while(true){
        tb23 = ti22>=0x4;
        if(tb23){break;}
        t6.xyz = (-t7.xyz) * unity_LightPosition[ti22 + 0].www + unity_LightPosition[ti22 + 0].xyz;
        t23 = dot(t6.xyz, t6.xyz);
        t25 = inversesqrt(t23);
        t6.xyz = vec3(t25) * t6.xyz;
        t23 = t23 * unity_LightAtten[ti22 + 0].z + 1.0;
        t23 = float(1.0) / t23;
        t25 = dot(t6.xyz, unity_SpotDirection[ti22 + 0].xyz);
        t25 = max(t25, 0.0);
        t25 = t25 + (-unity_LightAtten[ti22 + 0].x);
        t25 = t25 * unity_LightAtten[ti22 + 0].y;
        t25 = clamp(t25, 0.0, 1.0);
        t23 = t23 * t25;
        t25 = dot(t2.xyz, t6.xyz);
        t25 = max(t25, 0.0);
        t23 = t23 * t25;
        t4.xyz = unity_LightColor[ti22 + 0].xyz * vec3(t23) + t4.xyz;
        ti22 = ti22 + 0x1;
    }
    t7.xyz = t4.xyz * _Color.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t1 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    gl_Position = t1 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t7.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_0.w = t10_0.w * _Color.w;
    t16_4 = max(t16_8.z, t16_8.y);
    t16_4 = max(t16_8.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_2 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp vec3 angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - tmpvar_10));
  highp vec3 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = -(tmpvar_11.z);
  tmpvar_12.z = tmpvar_11.x;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = tmpvar_13.z;
  tmpvar_14.z = -(tmpvar_13.x);
  highp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0));
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_14.z / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_14.z / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_14.z)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_14.z >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_14.z) * 1.570796);
  };
  angle_5 = vec3(tmpvar_15);
  bvec3 tmpvar_18;
  tmpvar_18 = lessThan (vec3(tmpvar_15), vec3(0.0, 0.0, 0.0));
  float tmpvar_19;
  if (tmpvar_18.x) {
    tmpvar_19 = 6.283185;
  } else {
    tmpvar_19 = 0.0;
  };
  float tmpvar_20;
  if (tmpvar_18.y) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_18.z) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_19;
  tmpvar_22.y = tmpvar_20;
  tmpvar_22.z = tmpvar_21;
  angle_5 = (vec3(tmpvar_15) + tmpvar_22);
  highp vec3 tmpvar_23;
  tmpvar_23 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * tmpvar_13);
  billboardPos_4.xz = tmpvar_23.xz;
  billboardPos_4.y = (tmpvar_23.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_24;
    vPos_24 = billboardPos_4;
    highp float fMoveAmount_25;
    highp float fAdjust_26;
    highp float fLength_27;
    fLength_27 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_28;
    tmpvar_28 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_26 = tmpvar_28;
    if ((tmpvar_28 != 0.0)) {
      fAdjust_26 = pow (tmpvar_28, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_29;
    tmpvar_29.zw = vec2(0.0, 0.0);
    tmpvar_29.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_29.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_30;
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    tmpvar_30 = (((
      (tmpvar_31 * tmpvar_31)
     * 
      (3.0 - (2.0 * tmpvar_31))
    ) - 0.5) * 2.0);
    fMoveAmount_25 = ((_ST_WindGlobal.y * (tmpvar_30.x + 
      (tmpvar_30.y * tmpvar_30.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_25 = (fMoveAmount_25 * fAdjust_26);
    vPos_24.xz = (tmpvar_23.xz + (_ST_WindVector.xz * fMoveAmount_25));
    vPos_24 = (normalize(vPos_24) * fLength_27);
    billboardPos_4 = vPos_24;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (angle_5 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_32;
  tmpvar_32 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.xxx);
  highp vec3 tmpvar_33;
  tmpvar_33 = (fract(abs(tmpvar_32)) * tmpvar_7.xxx);
  highp float tmpvar_34;
  if ((tmpvar_32.x >= 0.0)) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = -(tmpvar_33.x);
  };
  highp vec4 tmpvar_35;
  tmpvar_35 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_34))];
  if ((tmpvar_35.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_35.xy - (tmpvar_35.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_35.xy + (tmpvar_35.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_36;
  highp vec3 viewN_37;
  highp vec3 viewpos_38;
  viewpos_38 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_39[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_39[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_37 = normalize((tmpvar_39 * tmpvar_14));
  lowp vec3 tmpvar_40;
  tmpvar_40 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_36 = tmpvar_40;
  highp vec3 toLight_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (unity_LightPosition[0].xyz - (viewpos_38 * unity_LightPosition[0].w));
  highp float tmpvar_43;
  tmpvar_43 = dot (tmpvar_42, tmpvar_42);
  toLight_41 = (tmpvar_42 * inversesqrt(tmpvar_43));
  lightColor_36 = (lightColor_36 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_37, toLight_41))
   * 
    ((1.0/((1.0 + (tmpvar_43 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_41, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (unity_LightPosition[1].xyz - (viewpos_38 * unity_LightPosition[1].w));
  highp float tmpvar_46;
  tmpvar_46 = dot (tmpvar_45, tmpvar_45);
  toLight_44 = (tmpvar_45 * inversesqrt(tmpvar_46));
  lightColor_36 = (lightColor_36 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_37, toLight_44))
   * 
    ((1.0/((1.0 + (tmpvar_46 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_44, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (unity_LightPosition[2].xyz - (viewpos_38 * unity_LightPosition[2].w));
  highp float tmpvar_49;
  tmpvar_49 = dot (tmpvar_48, tmpvar_48);
  toLight_47 = (tmpvar_48 * inversesqrt(tmpvar_49));
  lightColor_36 = (lightColor_36 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_37, toLight_47))
   * 
    ((1.0/((1.0 + (tmpvar_49 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_47, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (unity_LightPosition[3].xyz - (viewpos_38 * unity_LightPosition[3].w));
  highp float tmpvar_52;
  tmpvar_52 = dot (tmpvar_51, tmpvar_51);
  toLight_50 = (tmpvar_51 * inversesqrt(tmpvar_52));
  lightColor_36 = (lightColor_36 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_37, toLight_50))
   * 
    ((1.0/((1.0 + (tmpvar_52 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_50, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_36);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
mediump float t16_3;
highp vec3 t4;
bool tb4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
bool tb7;
highp float t11;
highp vec2 t14;
bool tb14;
highp vec2 t15;
highp int ti15;
bool tb15;
highp float t21;
highp int ti21;
highp float t22;
bool tb22;
highp float t23;
void main()
{
    t0.x = in_COLOR0.w * 255.0;
    tu0 = uint(t0.x);
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xy = vec2(t21) * t1.xz;
    t1.zw = (-t1.yy);
    t21 = dot(t1.xz, t1.xw);
    t21 = inversesqrt(t21);
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    t1.xy = vec2(t21) * t1.xy;
    t21 = min(abs(t1.y), abs(t1.x));
    t15.x = max(abs(t1.y), abs(t1.x));
    t15.x = float(1.0) / t15.x;
    t21 = t21 * t15.x;
    t15.x = t21 * t21;
    t22 = t15.x * 0.0208350997 + -0.0851330012;
    t22 = t15.x * t22 + 0.180141002;
    t22 = t15.x * t22 + -0.330299497;
    t15.x = t15.x * t22 + 0.999866009;
    t22 = t21 * t15.x;
    tb2 = abs(t1.y)<abs(t1.x);
    t22 = t22 * -2.0 + 1.57079637;
    t22 = tb2 ? t22 : float(0.0);
    t21 = t21 * t15.x + t22;
    tb15 = t1.y<(-t1.y);
    t15.x = tb15 ? -3.14159274 : float(0.0);
    t21 = t21 + t15.x;
    t15.x = min(t1.y, (-t1.x));
    t22 = max(t1.y, (-t1.x));
    tb15 = t15.x<(-t15.x);
    tb22 = t22>=(-t22);
    ti15 = int(uint(tb22) * 0xffffffffu & uint(tb15) * 0xffffffffu);
    t21 = (ti15 != 0) ? (-t21) : t21;
    tb15 = t21<0.0;
    t15.x = tb15 ? 6.28318548 : float(0.0);
    t21 = t21 + t15.x;
    t15.x = in_TEXCOORD0.x + -0.5;
    t15.x = t15.x * _TreeSize[int(tu0) + 0].x;
    t15.x = t15.x * in_TEXCOORD1.x;
    t2.xz = t1.xy * t15.xx;
    t15.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t2.y = t15.x * in_TEXCOORD1.y;
    t16_3 = _WindEnabled * _WindQuality;
    tb15 = 0.0<t16_3;
    t22 = dot(t2.xyz, t2.xyz);
    t22 = sqrt(t22);
    t23 = float(1.0) / _ST_WindGlobal.z;
    t23 = (-t23) * 0.25 + t2.y;
    t23 = max(t23, 0.0);
    t23 = t23 * _ST_WindGlobal.z;
    tb4 = t23!=0.0;
    t11 = log2(t23);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t23 = (tb4) ? t11 : t23;
    t4.x = t7.x + in_TEXCOORD1.w;
    t4.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t7.xy = t4.xy + vec2(0.5, 0.5);
    t7.xy = fract(t7.xy);
    t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t4.xy = abs(t7.xy) * abs(t7.xy);
    t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t7.xy = t4.xy * t7.xy + vec2(-0.5, -0.5);
    t7.xy = t7.xy + t7.xy;
    t7.x = t7.y * t7.y + t7.x;
    t14.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t7.x = _ST_WindGlobal.y * t7.x + t14.x;
    t7.x = t23 * t7.x;
    t4.xz = _ST_WindVector.xz * t7.xx + t2.xz;
    t4.y = t2.y;
    t7.x = dot(t4.xyz, t4.xyz);
    t7.x = inversesqrt(t7.x);
    t4.xyz = t7.xxx * t4.xyz;
    t4.xyz = vec3(t22) * t4.xyz;
    t2.xyz = (bool(tb15)) ? t4.xyz : t2.xyz;
    t2.xyz = t2.xyz + in_POSITION0.xyz;
    t7.x = t21 + in_TEXCOORD1.z;
    t7.x = t7.x * _TreeInfo[int(tu0) + 0].y + 0.5;
    t7.x = floor(t7.x);
    t7.x = t7.x / _TreeInfo[int(tu0) + 0].x;
    tb14 = t7.x>=(-t7.x);
    t7.x = fract(abs(t7.x));
    t7.x = (tb14) ? t7.x : (-t7.x);
    t0.x = t7.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0.x);
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t15.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t15.xy;
    t0.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    t0.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t0.xyz;
    t0.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_modelview0[3].xyz;
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    t21 = dot(t1.xyz, t1.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * t1.xyz;
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_5.xyz;
    ti21 = 0x0;
    while(true){
        tb22 = ti21>=0x4;
        if(tb22){break;}
        t6.xyz = (-t0.xyz) * unity_LightPosition[ti21 + 0].www + unity_LightPosition[ti21 + 0].xyz;
        t22 = dot(t6.xyz, t6.xyz);
        t23 = inversesqrt(t22);
        t6.xyz = vec3(t23) * t6.xyz;
        t22 = t22 * unity_LightAtten[ti21 + 0].z + 1.0;
        t22 = float(1.0) / t22;
        t23 = dot(t6.xyz, unity_SpotDirection[ti21 + 0].xyz);
        t23 = max(t23, 0.0);
        t23 = t23 + (-unity_LightAtten[ti21 + 0].x);
        t23 = t23 * unity_LightAtten[ti21 + 0].y;
        t23 = clamp(t23, 0.0, 1.0);
        t22 = t22 * t23;
        t23 = dot(t1.xyz, t6.xyz);
        t23 = max(t23, 0.0);
        t22 = t22 * t23;
        t4.xyz = unity_LightColor[ti21 + 0].xyz * vec3(t22) + t4.xyz;
        ti21 = ti21 + 0x1;
    }
    t0.xyz = t4.xyz * _Color.xyz;
    t1 = t2.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t2.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t2.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp vec3 angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - tmpvar_10));
  highp vec3 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = -(tmpvar_11.z);
  tmpvar_12.z = tmpvar_11.x;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = tmpvar_13.z;
  tmpvar_14.z = -(tmpvar_13.x);
  highp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0));
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_14.z / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_14.z / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_14.z)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_14.z >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_14.z) * 1.570796);
  };
  angle_5 = vec3(tmpvar_15);
  bvec3 tmpvar_18;
  tmpvar_18 = lessThan (vec3(tmpvar_15), vec3(0.0, 0.0, 0.0));
  float tmpvar_19;
  if (tmpvar_18.x) {
    tmpvar_19 = 6.283185;
  } else {
    tmpvar_19 = 0.0;
  };
  float tmpvar_20;
  if (tmpvar_18.y) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_18.z) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_19;
  tmpvar_22.y = tmpvar_20;
  tmpvar_22.z = tmpvar_21;
  angle_5 = (vec3(tmpvar_15) + tmpvar_22);
  highp vec3 tmpvar_23;
  tmpvar_23 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * tmpvar_13);
  billboardPos_4.xz = tmpvar_23.xz;
  billboardPos_4.y = (tmpvar_23.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_24;
    vPos_24 = billboardPos_4;
    highp float fMoveAmount_25;
    highp float fAdjust_26;
    highp float fLength_27;
    fLength_27 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_28;
    tmpvar_28 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_26 = tmpvar_28;
    if ((tmpvar_28 != 0.0)) {
      fAdjust_26 = pow (tmpvar_28, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_29;
    tmpvar_29.zw = vec2(0.0, 0.0);
    tmpvar_29.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_29.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_30;
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    tmpvar_30 = (((
      (tmpvar_31 * tmpvar_31)
     * 
      (3.0 - (2.0 * tmpvar_31))
    ) - 0.5) * 2.0);
    fMoveAmount_25 = ((_ST_WindGlobal.y * (tmpvar_30.x + 
      (tmpvar_30.y * tmpvar_30.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_25 = (fMoveAmount_25 * fAdjust_26);
    vPos_24.xz = (tmpvar_23.xz + (_ST_WindVector.xz * fMoveAmount_25));
    vPos_24 = (normalize(vPos_24) * fLength_27);
    billboardPos_4 = vPos_24;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (angle_5 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_32;
  tmpvar_32 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.xxx);
  highp vec3 tmpvar_33;
  tmpvar_33 = (fract(abs(tmpvar_32)) * tmpvar_7.xxx);
  highp float tmpvar_34;
  if ((tmpvar_32.x >= 0.0)) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = -(tmpvar_33.x);
  };
  highp vec4 tmpvar_35;
  tmpvar_35 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_34))];
  if ((tmpvar_35.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_35.xy - (tmpvar_35.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_35.xy + (tmpvar_35.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_36;
  tmpvar_36 = clamp ((fract(
    ((tmpvar_10.x + tmpvar_10.y) + tmpvar_10.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_3.z = tmpvar_36;
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_37;
  highp vec3 viewN_38;
  highp vec3 viewpos_39;
  viewpos_39 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_40[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_40[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_38 = normalize((tmpvar_40 * tmpvar_14));
  lowp vec3 tmpvar_41;
  tmpvar_41 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_37 = tmpvar_41;
  highp vec3 toLight_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = (unity_LightPosition[0].xyz - (viewpos_39 * unity_LightPosition[0].w));
  highp float tmpvar_44;
  tmpvar_44 = dot (tmpvar_43, tmpvar_43);
  toLight_42 = (tmpvar_43 * inversesqrt(tmpvar_44));
  lightColor_37 = (lightColor_37 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_38, toLight_42))
   * 
    ((1.0/((1.0 + (tmpvar_44 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_42, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = (unity_LightPosition[1].xyz - (viewpos_39 * unity_LightPosition[1].w));
  highp float tmpvar_47;
  tmpvar_47 = dot (tmpvar_46, tmpvar_46);
  toLight_45 = (tmpvar_46 * inversesqrt(tmpvar_47));
  lightColor_37 = (lightColor_37 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_38, toLight_45))
   * 
    ((1.0/((1.0 + (tmpvar_47 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_45, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (unity_LightPosition[2].xyz - (viewpos_39 * unity_LightPosition[2].w));
  highp float tmpvar_50;
  tmpvar_50 = dot (tmpvar_49, tmpvar_49);
  toLight_48 = (tmpvar_49 * inversesqrt(tmpvar_50));
  lightColor_37 = (lightColor_37 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_38, toLight_48))
   * 
    ((1.0/((1.0 + (tmpvar_50 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_48, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (unity_LightPosition[3].xyz - (viewpos_39 * unity_LightPosition[3].w));
  highp float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_52);
  toLight_51 = (tmpvar_52 * inversesqrt(tmpvar_53));
  lightColor_37 = (lightColor_37 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_38, toLight_51))
   * 
    ((1.0/((1.0 + (tmpvar_53 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_51, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_37);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp float t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp float t8;
bool tb9;
highp vec2 t11;
bool tb11;
highp float t15;
bool tb15;
highp vec2 t18;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb23;
highp float t25;
void main()
{
    t0 = in_COLOR0.w * 255.0;
    tu0 = uint(t0);
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t8 = dot(t1.xyz, t1.xyz);
    t8 = inversesqrt(t8);
    t1.xy = vec2(t8) * t1.xz;
    t1.zw = (-t1.yy);
    t15 = dot(t1.xz, t1.xw);
    t15 = inversesqrt(t15);
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    t1.xy = vec2(t15) * t1.xy;
    t15 = min(abs(t1.y), abs(t1.x));
    t22 = max(abs(t1.y), abs(t1.x));
    t22 = float(1.0) / t22;
    t15 = t22 * t15;
    t22 = t15 * t15;
    t2.x = t22 * 0.0208350997 + -0.0851330012;
    t2.x = t22 * t2.x + 0.180141002;
    t2.x = t22 * t2.x + -0.330299497;
    t22 = t22 * t2.x + 0.999866009;
    t2.x = t22 * t15;
    tb9 = abs(t1.y)<abs(t1.x);
    t2.x = t2.x * -2.0 + 1.57079637;
    t2.x = tb9 ? t2.x : float(0.0);
    t15 = t15 * t22 + t2.x;
    tb22 = t1.y<(-t1.y);
    t22 = tb22 ? -3.14159274 : float(0.0);
    t15 = t22 + t15;
    t22 = min(t1.y, (-t1.x));
    t2.x = max(t1.y, (-t1.x));
    tb22 = t22<(-t22);
    tb2 = t2.x>=(-t2.x);
    ti22 = int(uint(tb22) * 0xffffffffu & uint(tb2) * 0xffffffffu);
    t15 = (ti22 != 0) ? (-t15) : t15;
    tb22 = t15<0.0;
    t22 = tb22 ? 6.28318548 : float(0.0);
    t15 = t22 + t15;
    t22 = in_TEXCOORD0.x + -0.5;
    t22 = t22 * _TreeSize[int(tu0) + 0].x;
    t22 = t22 * in_TEXCOORD1.x;
    t2.xz = t1.xy * vec2(t22);
    t22 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t2.y = t22 * in_TEXCOORD1.y;
    t16_3 = _WindEnabled * _WindQuality;
    tb22 = 0.0<t16_3;
    t23 = dot(t2.xyz, t2.xyz);
    t23 = sqrt(t23);
    t4.x = float(1.0) / _ST_WindGlobal.z;
    t4.x = (-t4.x) * 0.25 + t2.y;
    t4.x = max(t4.x, 0.0);
    t4.x = t4.x * _ST_WindGlobal.z;
    tb11 = t4.x!=0.0;
    t18.x = log2(t4.x);
    t18.x = t18.x * _ST_WindGlobal.w;
    t18.x = exp2(t18.x);
    t4.x = (tb11) ? t18.x : t4.x;
    t5.x = t7.x + in_TEXCOORD1.w;
    t5.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t11.xy = t5.xy + vec2(0.5, 0.5);
    t11.xy = fract(t11.xy);
    t11.xy = t11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t5.xy = abs(t11.xy) * abs(t11.xy);
    t11.xy = -abs(t11.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t11.xy = t5.xy * t11.xy + vec2(-0.5, -0.5);
    t11.xy = t11.xy + t11.xy;
    t11.x = t11.y * t11.y + t11.x;
    t18.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t11.x = _ST_WindGlobal.y * t11.x + t18.x;
    t4.x = t4.x * t11.x;
    t4.xz = _ST_WindVector.xz * t4.xx + t2.xz;
    t4.y = t2.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t4.xyz = vec3(t23) * t4.xyz;
    t2.xyz = (bool(tb22)) ? t4.xyz : t2.xyz;
    t2.xyz = t2.xyz + in_POSITION0.xyz;
    t15 = t15 + in_TEXCOORD1.z;
    t15 = t15 * _TreeInfo[int(tu0) + 0].y + 0.5;
    t15 = floor(t15);
    t15 = t15 / _TreeInfo[int(tu0) + 0].x;
    tb22 = t15>=(-t15);
    t15 = fract(abs(t15));
    t15 = (tb22) ? t15 : (-t15);
    t0 = t15 * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0);
    tb15 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t4.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t18.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb15)) ? t4.xy : t18.xy;
    t0 = t7.y + t7.x;
    t0 = t7.z + t0;
    t0 = fract(t0);
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    t7.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    t7.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t7.xyz;
    t7.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t7.xyz;
    t7.xyz = t7.xyz + glstate_matrix_modelview0[3].xyz;
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_6.xyz;
    ti22 = 0x0;
    while(true){
        tb23 = ti22>=0x4;
        if(tb23){break;}
        t5.xyz = (-t7.xyz) * unity_LightPosition[ti22 + 0].www + unity_LightPosition[ti22 + 0].xyz;
        t23 = dot(t5.xyz, t5.xyz);
        t25 = inversesqrt(t23);
        t5.xyz = vec3(t25) * t5.xyz;
        t23 = t23 * unity_LightAtten[ti22 + 0].z + 1.0;
        t23 = float(1.0) / t23;
        t25 = dot(t5.xyz, unity_SpotDirection[ti22 + 0].xyz);
        t25 = max(t25, 0.0);
        t25 = t25 + (-unity_LightAtten[ti22 + 0].x);
        t25 = t25 * unity_LightAtten[ti22 + 0].y;
        t25 = clamp(t25, 0.0, 1.0);
        t23 = t23 * t25;
        t25 = dot(t1.xyz, t5.xyz);
        t25 = max(t25, 0.0);
        t23 = t23 * t25;
        t4.xyz = unity_LightColor[ti22 + 0].xyz * vec3(t23) + t4.xyz;
        ti22 = ti22 + 0x1;
    }
    t7.xyz = t4.xyz * _Color.xyz;
    t1 = t2.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t2.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t2.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t7.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_0.w = t10_0.w * _Color.w;
    t16_4 = max(t16_8.z, t16_8.y);
    t16_4 = max(t16_8.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_2 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp float angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  angle_5 = _CameraXZAngle;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_4.xz = tmpvar_11.xz;
  billboardPos_4.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_12;
    vPos_12 = billboardPos_4;
    highp float fMoveAmount_13;
    highp float fAdjust_14;
    highp float fLength_15;
    fLength_15 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_16;
    tmpvar_16 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_14 = tmpvar_16;
    if ((tmpvar_16 != 0.0)) {
      fAdjust_14 = pow (tmpvar_16, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_17.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    tmpvar_18 = (((
      (tmpvar_19 * tmpvar_19)
     * 
      (3.0 - (2.0 * tmpvar_19))
    ) - 0.5) * 2.0);
    fMoveAmount_13 = ((_ST_WindGlobal.y * (tmpvar_18.x + 
      (tmpvar_18.y * tmpvar_18.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_13 = (fMoveAmount_13 * fAdjust_14);
    vPos_12.xz = (tmpvar_11.xz + (_ST_WindVector.xz * fMoveAmount_13));
    vPos_12 = (normalize(vPos_12) * fLength_15);
    billboardPos_4 = vPos_12;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_20;
  tmpvar_20 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.x);
  highp float tmpvar_21;
  tmpvar_21 = (fract(abs(tmpvar_20)) * tmpvar_7.x);
  highp float tmpvar_22;
  if ((tmpvar_20 >= 0.0)) {
    tmpvar_22 = tmpvar_21;
  } else {
    tmpvar_22 = -(tmpvar_21);
  };
  highp vec4 tmpvar_23;
  tmpvar_23 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_22))];
  if ((tmpvar_23.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_23.xy - (tmpvar_23.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_23.xy + (tmpvar_23.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_24;
  hPos_24 = (glstate_matrix_mvp * tmpvar_2);
  mediump vec3 screenPos_25;
  highp vec4 o_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = (hPos_24 * 0.5);
  highp vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = hPos_24.zw;
  highp vec3 tmpvar_29;
  tmpvar_29 = o_26.xyw;
  screenPos_25 = tmpvar_29;
  screenPos_25.xy = (screenPos_25.xy * (_ScreenParams.xy * 0.25));
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_30;
  highp vec3 viewN_31;
  highp vec3 viewpos_32;
  viewpos_32 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_33[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_33[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_31 = normalize((tmpvar_33 * _BillboardNormal));
  lowp vec3 tmpvar_34;
  tmpvar_34 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_30 = tmpvar_34;
  highp vec3 toLight_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (unity_LightPosition[0].xyz - (viewpos_32 * unity_LightPosition[0].w));
  highp float tmpvar_37;
  tmpvar_37 = dot (tmpvar_36, tmpvar_36);
  toLight_35 = (tmpvar_36 * inversesqrt(tmpvar_37));
  lightColor_30 = (lightColor_30 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_31, toLight_35))
   * 
    ((1.0/((1.0 + (tmpvar_37 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_35, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = (unity_LightPosition[1].xyz - (viewpos_32 * unity_LightPosition[1].w));
  highp float tmpvar_40;
  tmpvar_40 = dot (tmpvar_39, tmpvar_39);
  toLight_38 = (tmpvar_39 * inversesqrt(tmpvar_40));
  lightColor_30 = (lightColor_30 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_31, toLight_38))
   * 
    ((1.0/((1.0 + (tmpvar_40 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_38, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (unity_LightPosition[2].xyz - (viewpos_32 * unity_LightPosition[2].w));
  highp float tmpvar_43;
  tmpvar_43 = dot (tmpvar_42, tmpvar_42);
  toLight_41 = (tmpvar_42 * inversesqrt(tmpvar_43));
  lightColor_30 = (lightColor_30 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_31, toLight_41))
   * 
    ((1.0/((1.0 + (tmpvar_43 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_41, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (unity_LightPosition[3].xyz - (viewpos_32 * unity_LightPosition[3].w));
  highp float tmpvar_46;
  tmpvar_46 = dot (tmpvar_45, tmpvar_45);
  toLight_44 = (tmpvar_45 * inversesqrt(tmpvar_46));
  lightColor_30 = (lightColor_30 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_31, toLight_44))
   * 
    ((1.0/((1.0 + (tmpvar_46 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_44, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_30);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
  xlv_Input_ditherScreenPos = screenPos_25;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_2 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp int ti0;
highp uint tu0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp vec3 t8;
highp vec2 t9;
bool tb9;
highp vec2 t11;
bool tb11;
highp float t16;
highp float t19;
highp float t24;
bool tb24;
highp float t25;
bool tb25;
highp float t27;
void main()
{
    t0.x = in_COLOR0.w * 255.0;
    tu0 = uint(t0.x);
    t8.xy = in_POSITION0.xy + _Object2World[3].xy;
    t24 = in_TEXCOORD0.x + -0.5;
    t24 = t24 * _TreeSize[int(tu0) + 0].x;
    t24 = t24 * in_TEXCOORD1.x;
    t1.xyz = vec3(t24) * _BillboardTangent.xyzx.xyz;
    t24 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t1.w = t24 * in_TEXCOORD1.y + t1.y;
    t16_2 = _WindEnabled * _WindQuality;
    tb24 = 0.0<t16_2;
    t9.x = dot(t1.xzw, t1.xzw);
    t9.x = sqrt(t9.x);
    t3.x = float(1.0) / _ST_WindGlobal.z;
    t3.x = (-t3.x) * 0.25 + t1.w;
    t3.x = max(t3.x, 0.0);
    t3.x = t3.x * _ST_WindGlobal.z;
    tb11 = t3.x!=0.0;
    t19 = log2(t3.x);
    t19 = t19 * _ST_WindGlobal.w;
    t19 = exp2(t19);
    t3.x = (tb11) ? t19 : t3.x;
    t4.x = t8.x + in_TEXCOORD1.w;
    t4.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t8.xy = t4.xy + vec2(0.5, 0.5);
    t8.xy = fract(t8.xy);
    t8.xy = t8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t11.xy = abs(t8.xy) * abs(t8.xy);
    t8.xy = -abs(t8.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t8.xy = t11.xy * t8.xy + vec2(-0.5, -0.5);
    t8.xy = t8.xy + t8.xy;
    t8.x = t8.y * t8.y + t8.x;
    t16 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t8.x = _ST_WindGlobal.y * t8.x + t16;
    t8.x = t3.x * t8.x;
    t3.xz = _ST_WindVector.xz * t8.xx + t1.xz;
    t3.y = t1.w;
    t8.x = dot(t3.xyz, t3.xyz);
    t8.x = inversesqrt(t8.x);
    t3.xyz = t8.xxx * t3.xyz;
    t3.xyz = t9.xxx * t3.xyz;
    t8.xyz = (bool(tb24)) ? t3.xyz : t1.xwz;
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu0) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu0) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t0.x = t1.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0.x);
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb1)) ? t9.xy : t3.xy;
    t1.xyz = t8.yyy * glstate_matrix_mvp[1].xyw;
    t1.xyz = glstate_matrix_mvp[0].xyw * t8.xxx + t1.xyz;
    t1.xyz = glstate_matrix_mvp[2].xyw * t8.zzz + t1.xyz;
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    t3.xz = t1.xz * vec2(0.5, 0.5);
    t0.x = t1.y * _ProjectionParams.x;
    t3.w = t0.x * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t1.xy = t3.xy * vec2(0.25, 0.25);
    t3.xyz = t8.yyy * glstate_matrix_modelview0[1].xyz;
    t3.xyz = glstate_matrix_modelview0[0].xyz * t8.xxx + t3.xyz;
    t3.xyz = glstate_matrix_modelview0[2].xyz * t8.zzz + t3.xyz;
    t3.xyz = t3.xyz + glstate_matrix_modelview0[3].xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t4.xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t4.xyz;
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = inversesqrt(t0.x);
    t4.xyz = t0.xxx * t4.xyz;
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t6.xyz = t10_5.xyz;
    ti0 = 0x0;
    while(true){
        tb25 = ti0>=0x4;
        if(tb25){break;}
        t7.xyz = (-t3.xyz) * unity_LightPosition[ti0 + 0].www + unity_LightPosition[ti0 + 0].xyz;
        t25 = dot(t7.xyz, t7.xyz);
        t27 = inversesqrt(t25);
        t7.xyz = vec3(t27) * t7.xyz;
        t25 = t25 * unity_LightAtten[ti0 + 0].z + 1.0;
        t25 = float(1.0) / t25;
        t27 = dot(t7.xyz, unity_SpotDirection[ti0 + 0].xyz);
        t27 = max(t27, 0.0);
        t27 = t27 + (-unity_LightAtten[ti0 + 0].x);
        t27 = t27 * unity_LightAtten[ti0 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        t25 = t25 * t27;
        t27 = dot(t4.xyz, t7.xyz);
        t27 = max(t27, 0.0);
        t25 = t25 * t27;
        t6.xyz = unity_LightColor[ti0 + 0].xyz * vec3(t25) + t6.xyz;
        ti0 = ti0 + 0x1;
    }
    t3.xyz = t6.xyz * _Color.xyz;
    t2 = t8.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t8.xxxx + t2;
    t0 = glstate_matrix_mvp[2] * t8.zzzz + t2;
    gl_Position = t0 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1.x = t10_1 + -0.5;
    tb1 = t16_1.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp float angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  angle_5 = _CameraXZAngle;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_4.xz = tmpvar_11.xz;
  billboardPos_4.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_12;
    vPos_12 = billboardPos_4;
    highp float fMoveAmount_13;
    highp float fAdjust_14;
    highp float fLength_15;
    fLength_15 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_16;
    tmpvar_16 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_14 = tmpvar_16;
    if ((tmpvar_16 != 0.0)) {
      fAdjust_14 = pow (tmpvar_16, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_17.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    tmpvar_18 = (((
      (tmpvar_19 * tmpvar_19)
     * 
      (3.0 - (2.0 * tmpvar_19))
    ) - 0.5) * 2.0);
    fMoveAmount_13 = ((_ST_WindGlobal.y * (tmpvar_18.x + 
      (tmpvar_18.y * tmpvar_18.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_13 = (fMoveAmount_13 * fAdjust_14);
    vPos_12.xz = (tmpvar_11.xz + (_ST_WindVector.xz * fMoveAmount_13));
    vPos_12 = (normalize(vPos_12) * fLength_15);
    billboardPos_4 = vPos_12;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_20;
  tmpvar_20 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.x);
  highp float tmpvar_21;
  tmpvar_21 = (fract(abs(tmpvar_20)) * tmpvar_7.x);
  highp float tmpvar_22;
  if ((tmpvar_20 >= 0.0)) {
    tmpvar_22 = tmpvar_21;
  } else {
    tmpvar_22 = -(tmpvar_21);
  };
  highp vec4 tmpvar_23;
  tmpvar_23 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_22))];
  if ((tmpvar_23.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_23.xy - (tmpvar_23.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_23.xy + (tmpvar_23.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_24;
  tmpvar_24 = clamp ((fract(
    ((tmpvar_10.x + tmpvar_10.y) + tmpvar_10.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_3.z = tmpvar_24;
  highp vec4 hPos_25;
  hPos_25 = (glstate_matrix_mvp * tmpvar_2);
  mediump vec3 screenPos_26;
  highp vec4 o_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (hPos_25 * 0.5);
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
  o_27.xy = (tmpvar_29 + tmpvar_28.w);
  o_27.zw = hPos_25.zw;
  highp vec3 tmpvar_30;
  tmpvar_30 = o_27.xyw;
  screenPos_26 = tmpvar_30;
  screenPos_26.xy = (screenPos_26.xy * (_ScreenParams.xy * 0.25));
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_31;
  highp vec3 viewN_32;
  highp vec3 viewpos_33;
  viewpos_33 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_34[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_34[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_32 = normalize((tmpvar_34 * _BillboardNormal));
  lowp vec3 tmpvar_35;
  tmpvar_35 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_31 = tmpvar_35;
  highp vec3 toLight_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (unity_LightPosition[0].xyz - (viewpos_33 * unity_LightPosition[0].w));
  highp float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, tmpvar_37);
  toLight_36 = (tmpvar_37 * inversesqrt(tmpvar_38));
  lightColor_31 = (lightColor_31 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_32, toLight_36))
   * 
    ((1.0/((1.0 + (tmpvar_38 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_36, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = (unity_LightPosition[1].xyz - (viewpos_33 * unity_LightPosition[1].w));
  highp float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_40);
  toLight_39 = (tmpvar_40 * inversesqrt(tmpvar_41));
  lightColor_31 = (lightColor_31 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_32, toLight_39))
   * 
    ((1.0/((1.0 + (tmpvar_41 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_39, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = (unity_LightPosition[2].xyz - (viewpos_33 * unity_LightPosition[2].w));
  highp float tmpvar_44;
  tmpvar_44 = dot (tmpvar_43, tmpvar_43);
  toLight_42 = (tmpvar_43 * inversesqrt(tmpvar_44));
  lightColor_31 = (lightColor_31 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_32, toLight_42))
   * 
    ((1.0/((1.0 + (tmpvar_44 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_42, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = (unity_LightPosition[3].xyz - (viewpos_33 * unity_LightPosition[3].w));
  highp float tmpvar_47;
  tmpvar_47 = dot (tmpvar_46, tmpvar_46);
  toLight_45 = (tmpvar_46 * inversesqrt(tmpvar_47));
  lightColor_31 = (lightColor_31 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_32, toLight_45))
   * 
    ((1.0/((1.0 + (tmpvar_47 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_45, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_31);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
  xlv_Input_ditherScreenPos = screenPos_26;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_2 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_10 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = tmpvar_1;
  tmpvar_11.w = tmpvar_2;
  gl_FragData[0] = tmpvar_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp float t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp vec3 t8;
bool tb9;
highp vec3 t10;
highp vec2 t18;
bool tb18;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t28;
void main()
{
    t0 = in_COLOR0.w * 255.0;
    tu0 = uint(t0);
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = in_TEXCOORD0.x + -0.5;
    t1.x = t1.x * _TreeSize[int(tu0) + 0].x;
    t1.x = t1.x * in_TEXCOORD1.x;
    t1.xyz = t1.xxx * _BillboardTangent.xyzx.xyz;
    t2.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t1.w = t2.x * in_TEXCOORD1.y + t1.y;
    t16_3 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_3;
    t2.x = dot(t1.xzw, t1.xzw);
    t2.x = sqrt(t2.x);
    t10.x = float(1.0) / _ST_WindGlobal.z;
    t10.x = (-t10.x) * 0.25 + t1.w;
    t10.x = max(t10.x, 0.0);
    t10.x = t10.x * _ST_WindGlobal.z;
    tb18 = t10.x!=0.0;
    t26 = log2(t10.x);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    t10.x = (tb18) ? t26 : t10.x;
    t4.x = t8.x + in_TEXCOORD1.w;
    t4.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t18.xy = t4.xy + vec2(0.5, 0.5);
    t18.xy = fract(t18.xy);
    t18.xy = t18.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t4.xy = abs(t18.xy) * abs(t18.xy);
    t18.xy = -abs(t18.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t18.xy = t4.xy * t18.xy + vec2(-0.5, -0.5);
    t18.xy = t18.xy + t18.xy;
    t18.x = t18.y * t18.y + t18.x;
    t26 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18.x = _ST_WindGlobal.y * t18.x + t26;
    t10.x = t10.x * t18.x;
    t4.xz = _ST_WindVector.xz * t10.xx + t1.xz;
    t4.y = t1.w;
    t10.x = dot(t4.xyz, t4.xyz);
    t10.x = inversesqrt(t10.x);
    t10.xyz = t10.xxx * t4.xyz;
    t2.xyz = t2.xxx * t10.xyz;
    t1.xyz = (bool(tb9)) ? t2.xyz : t1.xwz;
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    t25 = in_TEXCOORD1.z + _CameraXZAngle;
    t25 = t25 * _TreeInfo[int(tu0) + 0].y + 0.5;
    t25 = floor(t25);
    t25 = t25 / _TreeInfo[int(tu0) + 0].x;
    tb2 = t25>=(-t25);
    t25 = fract(abs(t25));
    t25 = (tb2) ? t25 : (-t25);
    t0 = t25 * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0);
    tb25 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t2.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t18.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb25)) ? t2.xy : t18.xy;
    t0 = t8.y + t8.x;
    t0 = t8.z + t0;
    t0 = fract(t0);
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    t8.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t8.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t8.xyz;
    t8.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t8.xyz;
    t8.xyz = t8.xyz + glstate_matrix_mvp[3].xyw;
    t2.xz = t8.xz * vec2(0.5, 0.5);
    t25 = t8.y * _ProjectionParams.x;
    t2.w = t25 * 0.5;
    t2.xy = t2.zz + t2.xw;
    t2.xy = t2.xy * _ScreenParams.xy;
    t8.xy = t2.xy * vec2(0.25, 0.25);
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = t2.xyz + glstate_matrix_modelview0[3].xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t4.xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t4.xyz;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t6.xyz = t10_5.xyz;
    ti25 = 0x0;
    while(true){
        tb26 = ti25>=0x4;
        if(tb26){break;}
        t7.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        t26 = dot(t7.xyz, t7.xyz);
        t28 = inversesqrt(t26);
        t7.xyz = vec3(t28) * t7.xyz;
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        t26 = float(1.0) / t26;
        t28 = dot(t7.xyz, unity_SpotDirection[ti25 + 0].xyz);
        t28 = max(t28, 0.0);
        t28 = t28 + (-unity_LightAtten[ti25 + 0].x);
        t28 = t28 * unity_LightAtten[ti25 + 0].y;
        t28 = clamp(t28, 0.0, 1.0);
        t26 = t26 * t28;
        t28 = dot(t4.xyz, t7.xyz);
        t28 = max(t28, 0.0);
        t26 = t26 * t28;
        t6.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t6.xyz;
        ti25 = ti25 + 0x1;
    }
    t2.xyz = t6.xyz * _Color.xyz;
    t3 = t1.yyyy * glstate_matrix_mvp[1];
    t3 = glstate_matrix_mvp[0] * t1.xxxx + t3;
    t1 = glstate_matrix_mvp[2] * t1.zzzz + t3;
    gl_Position = t1 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t2.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = t0;
    vs_TEXCOORD3.xyz = t8.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_0.w = t10_0.w * _Color.w;
    t16_4 = max(t16_8.z, t16_8.y);
    t16_4 = max(t16_8.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp vec3 angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - tmpvar_10));
  highp vec3 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = -(tmpvar_11.z);
  tmpvar_12.z = tmpvar_11.x;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = tmpvar_13.z;
  tmpvar_14.z = -(tmpvar_13.x);
  highp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0));
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_14.z / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_14.z / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_14.z)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_14.z >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_14.z) * 1.570796);
  };
  angle_5 = vec3(tmpvar_15);
  bvec3 tmpvar_18;
  tmpvar_18 = lessThan (vec3(tmpvar_15), vec3(0.0, 0.0, 0.0));
  float tmpvar_19;
  if (tmpvar_18.x) {
    tmpvar_19 = 6.283185;
  } else {
    tmpvar_19 = 0.0;
  };
  float tmpvar_20;
  if (tmpvar_18.y) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_18.z) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_19;
  tmpvar_22.y = tmpvar_20;
  tmpvar_22.z = tmpvar_21;
  angle_5 = (vec3(tmpvar_15) + tmpvar_22);
  highp vec3 tmpvar_23;
  tmpvar_23 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * tmpvar_13);
  billboardPos_4.xz = tmpvar_23.xz;
  billboardPos_4.y = (tmpvar_23.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_24;
    vPos_24 = billboardPos_4;
    highp float fMoveAmount_25;
    highp float fAdjust_26;
    highp float fLength_27;
    fLength_27 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_28;
    tmpvar_28 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_26 = tmpvar_28;
    if ((tmpvar_28 != 0.0)) {
      fAdjust_26 = pow (tmpvar_28, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_29;
    tmpvar_29.zw = vec2(0.0, 0.0);
    tmpvar_29.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_29.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_30;
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    tmpvar_30 = (((
      (tmpvar_31 * tmpvar_31)
     * 
      (3.0 - (2.0 * tmpvar_31))
    ) - 0.5) * 2.0);
    fMoveAmount_25 = ((_ST_WindGlobal.y * (tmpvar_30.x + 
      (tmpvar_30.y * tmpvar_30.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_25 = (fMoveAmount_25 * fAdjust_26);
    vPos_24.xz = (tmpvar_23.xz + (_ST_WindVector.xz * fMoveAmount_25));
    vPos_24 = (normalize(vPos_24) * fLength_27);
    billboardPos_4 = vPos_24;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (angle_5 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_32;
  tmpvar_32 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.xxx);
  highp vec3 tmpvar_33;
  tmpvar_33 = (fract(abs(tmpvar_32)) * tmpvar_7.xxx);
  highp float tmpvar_34;
  if ((tmpvar_32.x >= 0.0)) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = -(tmpvar_33.x);
  };
  highp vec4 tmpvar_35;
  tmpvar_35 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_34))];
  if ((tmpvar_35.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_35.xy - (tmpvar_35.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_35.xy + (tmpvar_35.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_36;
  hPos_36 = (glstate_matrix_mvp * tmpvar_2);
  mediump vec3 screenPos_37;
  highp vec4 o_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = (hPos_36 * 0.5);
  highp vec2 tmpvar_40;
  tmpvar_40.x = tmpvar_39.x;
  tmpvar_40.y = (tmpvar_39.y * _ProjectionParams.x);
  o_38.xy = (tmpvar_40 + tmpvar_39.w);
  o_38.zw = hPos_36.zw;
  highp vec3 tmpvar_41;
  tmpvar_41 = o_38.xyw;
  screenPos_37 = tmpvar_41;
  screenPos_37.xy = (screenPos_37.xy * (_ScreenParams.xy * 0.25));
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_42;
  highp vec3 viewN_43;
  highp vec3 viewpos_44;
  viewpos_44 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_45[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_45[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_43 = normalize((tmpvar_45 * tmpvar_14));
  lowp vec3 tmpvar_46;
  tmpvar_46 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_42 = tmpvar_46;
  highp vec3 toLight_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (unity_LightPosition[0].xyz - (viewpos_44 * unity_LightPosition[0].w));
  highp float tmpvar_49;
  tmpvar_49 = dot (tmpvar_48, tmpvar_48);
  toLight_47 = (tmpvar_48 * inversesqrt(tmpvar_49));
  lightColor_42 = (lightColor_42 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_43, toLight_47))
   * 
    ((1.0/((1.0 + (tmpvar_49 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_47, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (unity_LightPosition[1].xyz - (viewpos_44 * unity_LightPosition[1].w));
  highp float tmpvar_52;
  tmpvar_52 = dot (tmpvar_51, tmpvar_51);
  toLight_50 = (tmpvar_51 * inversesqrt(tmpvar_52));
  lightColor_42 = (lightColor_42 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_43, toLight_50))
   * 
    ((1.0/((1.0 + (tmpvar_52 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_50, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[2].xyz - (viewpos_44 * unity_LightPosition[2].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_42 = (lightColor_42 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_43, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[3].xyz - (viewpos_44 * unity_LightPosition[3].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_42 = (lightColor_42 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_43, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_42);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
  xlv_Input_ditherScreenPos = screenPos_37;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_2 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
bool tb4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp vec3 t8;
bool tb8;
highp float t12;
highp vec2 t16;
bool tb16;
highp vec2 t17;
highp int ti17;
bool tb17;
highp float t24;
highp int ti24;
highp float t25;
bool tb25;
highp float t26;
void main()
{
    t0.x = in_COLOR0.w * 255.0;
    tu0 = uint(t0.x);
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t24 = dot(t1.xyz, t1.xyz);
    t24 = inversesqrt(t24);
    t1.xy = vec2(t24) * t1.xz;
    t1.zw = (-t1.yy);
    t24 = dot(t1.xz, t1.xw);
    t24 = inversesqrt(t24);
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    t1.xy = vec2(t24) * t1.xy;
    t24 = min(abs(t1.y), abs(t1.x));
    t17.x = max(abs(t1.y), abs(t1.x));
    t17.x = float(1.0) / t17.x;
    t24 = t24 * t17.x;
    t17.x = t24 * t24;
    t25 = t17.x * 0.0208350997 + -0.0851330012;
    t25 = t17.x * t25 + 0.180141002;
    t25 = t17.x * t25 + -0.330299497;
    t17.x = t17.x * t25 + 0.999866009;
    t25 = t24 * t17.x;
    tb2 = abs(t1.y)<abs(t1.x);
    t25 = t25 * -2.0 + 1.57079637;
    t25 = tb2 ? t25 : float(0.0);
    t24 = t24 * t17.x + t25;
    tb17 = t1.y<(-t1.y);
    t17.x = tb17 ? -3.14159274 : float(0.0);
    t24 = t24 + t17.x;
    t17.x = min(t1.y, (-t1.x));
    t25 = max(t1.y, (-t1.x));
    tb17 = t17.x<(-t17.x);
    tb25 = t25>=(-t25);
    ti17 = int(uint(tb25) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t24 = (ti17 != 0) ? (-t24) : t24;
    tb17 = t24<0.0;
    t17.x = tb17 ? 6.28318548 : float(0.0);
    t24 = t24 + t17.x;
    t17.x = in_TEXCOORD0.x + -0.5;
    t17.x = t17.x * _TreeSize[int(tu0) + 0].x;
    t17.x = t17.x * in_TEXCOORD1.x;
    t2.xz = t1.xy * t17.xx;
    t17.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t2.y = t17.x * in_TEXCOORD1.y;
    t16_3 = _WindEnabled * _WindQuality;
    tb17 = 0.0<t16_3;
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb4 = t26!=0.0;
    t12 = log2(t26);
    t12 = t12 * _ST_WindGlobal.w;
    t12 = exp2(t12);
    t26 = (tb4) ? t12 : t26;
    t4.x = t8.x + in_TEXCOORD1.w;
    t4.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t8.xy = t4.xy + vec2(0.5, 0.5);
    t8.xy = fract(t8.xy);
    t8.xy = t8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t4.xy = abs(t8.xy) * abs(t8.xy);
    t8.xy = -abs(t8.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t8.xy = t4.xy * t8.xy + vec2(-0.5, -0.5);
    t8.xy = t8.xy + t8.xy;
    t8.x = t8.y * t8.y + t8.x;
    t16.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t8.x = _ST_WindGlobal.y * t8.x + t16.x;
    t8.x = t26 * t8.x;
    t4.xz = _ST_WindVector.xz * t8.xx + t2.xz;
    t4.y = t2.y;
    t8.x = dot(t4.xyz, t4.xyz);
    t8.x = inversesqrt(t8.x);
    t4.xyz = t8.xxx * t4.xyz;
    t4.xyz = vec3(t25) * t4.xyz;
    t2.xyz = (bool(tb17)) ? t4.xyz : t2.xyz;
    t2.xyz = t2.xyz + in_POSITION0.xyz;
    t8.x = t24 + in_TEXCOORD1.z;
    t8.x = t8.x * _TreeInfo[int(tu0) + 0].y + 0.5;
    t8.x = floor(t8.x);
    t8.x = t8.x / _TreeInfo[int(tu0) + 0].x;
    tb16 = t8.x>=(-t8.x);
    t8.x = fract(abs(t8.x));
    t8.x = (tb16) ? t8.x : (-t8.x);
    t0.x = t8.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0.x);
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t17.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb8)) ? t16.xy : t17.xy;
    t0.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t0.w = t0.y * _ProjectionParams.x;
    t4.xzw = t0.xzw * vec3(0.5, 0.5, 0.5);
    t17.xy = t4.zz + t4.xw;
    t17.xy = t17.xy * _ScreenParams.xy;
    t0.xy = t17.xy * vec2(0.25, 0.25);
    t4.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    t4.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t4.xyz;
    t4.xyz = t4.xyz + glstate_matrix_modelview0[3].xyz;
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    t24 = dot(t1.xyz, t1.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * t1.xyz;
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t6.xyz = t10_5.xyz;
    ti24 = 0x0;
    while(true){
        tb25 = ti24>=0x4;
        if(tb25){break;}
        t7.xyz = (-t4.xyz) * unity_LightPosition[ti24 + 0].www + unity_LightPosition[ti24 + 0].xyz;
        t25 = dot(t7.xyz, t7.xyz);
        t26 = inversesqrt(t25);
        t7.xyz = vec3(t26) * t7.xyz;
        t25 = t25 * unity_LightAtten[ti24 + 0].z + 1.0;
        t25 = float(1.0) / t25;
        t26 = dot(t7.xyz, unity_SpotDirection[ti24 + 0].xyz);
        t26 = max(t26, 0.0);
        t26 = t26 + (-unity_LightAtten[ti24 + 0].x);
        t26 = t26 * unity_LightAtten[ti24 + 0].y;
        t26 = clamp(t26, 0.0, 1.0);
        t25 = t25 * t26;
        t26 = dot(t1.xyz, t7.xyz);
        t26 = max(t26, 0.0);
        t25 = t25 * t26;
        t6.xyz = unity_LightColor[ti24 + 0].xyz * vec3(t25) + t6.xyz;
        ti24 = ti24 + 0x1;
    }
    t1.xyz = t6.xyz * _Color.xyz;
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    gl_Position = t2 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1.x = t10_1 + -0.5;
    tb1 = t16_1.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesVertex;
  mediump vec3 tmpvar_3;
  highp vec3 billboardPos_4;
  highp vec3 angle_5;
  highp float tmpvar_6;
  tmpvar_6 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7 = _TreeInfo[int(tmpvar_6)];
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeSize[int(tmpvar_6)];
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_glesVertex.xyz + tmpvar_9);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - tmpvar_10));
  highp vec3 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = -(tmpvar_11.z);
  tmpvar_12.z = tmpvar_11.x;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = tmpvar_13.z;
  tmpvar_14.z = -(tmpvar_13.x);
  highp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (min (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0) / max (abs(
    (tmpvar_14.z / tmpvar_13.z)
  ), 1.0));
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  tmpvar_17 = (((
    ((((
      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)
     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)
   * tmpvar_17) + 0.9999793) * tmpvar_16);
  tmpvar_17 = (tmpvar_17 + (float(
    (abs((tmpvar_14.z / tmpvar_13.z)) > 1.0)
  ) * (
    (tmpvar_17 * -2.0)
   + 1.570796)));
  tmpvar_15 = (tmpvar_17 * sign((tmpvar_14.z / tmpvar_13.z)));
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_14.z)))) {
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_14.z >= 0.0)) {
        tmpvar_15 += 3.141593;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.141593);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_14.z) * 1.570796);
  };
  angle_5 = vec3(tmpvar_15);
  bvec3 tmpvar_18;
  tmpvar_18 = lessThan (vec3(tmpvar_15), vec3(0.0, 0.0, 0.0));
  float tmpvar_19;
  if (tmpvar_18.x) {
    tmpvar_19 = 6.283185;
  } else {
    tmpvar_19 = 0.0;
  };
  float tmpvar_20;
  if (tmpvar_18.y) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_18.z) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_19;
  tmpvar_22.y = tmpvar_20;
  tmpvar_22.z = tmpvar_21;
  angle_5 = (vec3(tmpvar_15) + tmpvar_22);
  highp vec3 tmpvar_23;
  tmpvar_23 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_8.x) * _glesMultiTexCoord1.x) * tmpvar_13);
  billboardPos_4.xz = tmpvar_23.xz;
  billboardPos_4.y = (tmpvar_23.y + ((
    (_glesMultiTexCoord0.y * tmpvar_8.y)
   + tmpvar_8.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_24;
    vPos_24 = billboardPos_4;
    highp float fMoveAmount_25;
    highp float fAdjust_26;
    highp float fLength_27;
    fLength_27 = sqrt(dot (billboardPos_4, billboardPos_4));
    highp float tmpvar_28;
    tmpvar_28 = (max ((billboardPos_4.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_26 = tmpvar_28;
    if ((tmpvar_28 != 0.0)) {
      fAdjust_26 = pow (tmpvar_28, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_29;
    tmpvar_29.zw = vec2(0.0, 0.0);
    tmpvar_29.x = (tmpvar_10.x + _glesMultiTexCoord1.w);
    tmpvar_29.y = (tmpvar_10.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_30;
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    tmpvar_30 = (((
      (tmpvar_31 * tmpvar_31)
     * 
      (3.0 - (2.0 * tmpvar_31))
    ) - 0.5) * 2.0);
    fMoveAmount_25 = ((_ST_WindGlobal.y * (tmpvar_30.x + 
      (tmpvar_30.y * tmpvar_30.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_25 = (fMoveAmount_25 * fAdjust_26);
    vPos_24.xz = (tmpvar_23.xz + (_ST_WindVector.xz * fMoveAmount_25));
    vPos_24 = (normalize(vPos_24) * fLength_27);
    billboardPos_4 = vPos_24;
  };
  tmpvar_2.xyz = (_glesVertex.xyz + billboardPos_4);
  tmpvar_2.w = 1.0;
  angle_5 = (angle_5 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_32;
  tmpvar_32 = (floor((
    (angle_5 * tmpvar_7.y)
   + 0.5)) / tmpvar_7.xxx);
  highp vec3 tmpvar_33;
  tmpvar_33 = (fract(abs(tmpvar_32)) * tmpvar_7.xxx);
  highp float tmpvar_34;
  if ((tmpvar_32.x >= 0.0)) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = -(tmpvar_33.x);
  };
  highp vec4 tmpvar_35;
  tmpvar_35 = _ImageTexCoords[int((tmpvar_7.z + tmpvar_34))];
  if ((tmpvar_35.w < 0.0)) {
    tmpvar_3.xy = (tmpvar_35.xy - (tmpvar_35.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_3.xy = (tmpvar_35.xy + (tmpvar_35.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_36;
  tmpvar_36 = clamp ((fract(
    ((tmpvar_10.x + tmpvar_10.y) + tmpvar_10.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_3.z = tmpvar_36;
  highp vec4 hPos_37;
  hPos_37 = (glstate_matrix_mvp * tmpvar_2);
  mediump vec3 screenPos_38;
  highp vec4 o_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (hPos_37 * 0.5);
  highp vec2 tmpvar_41;
  tmpvar_41.x = tmpvar_40.x;
  tmpvar_41.y = (tmpvar_40.y * _ProjectionParams.x);
  o_39.xy = (tmpvar_41 + tmpvar_40.w);
  o_39.zw = hPos_37.zw;
  highp vec3 tmpvar_42;
  tmpvar_42 = o_39.xyw;
  screenPos_38 = tmpvar_42;
  screenPos_38.xy = (screenPos_38.xy * (_ScreenParams.xy * 0.25));
  tmpvar_1.w = _Color.w;
  highp vec3 lightColor_43;
  highp vec3 viewN_44;
  highp vec3 viewpos_45;
  viewpos_45 = (glstate_matrix_modelview0 * tmpvar_2).xyz;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_46[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_46[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_44 = normalize((tmpvar_46 * tmpvar_14));
  lowp vec3 tmpvar_47;
  tmpvar_47 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_43 = tmpvar_47;
  highp vec3 toLight_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (unity_LightPosition[0].xyz - (viewpos_45 * unity_LightPosition[0].w));
  highp float tmpvar_50;
  tmpvar_50 = dot (tmpvar_49, tmpvar_49);
  toLight_48 = (tmpvar_49 * inversesqrt(tmpvar_50));
  lightColor_43 = (lightColor_43 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_44, toLight_48))
   * 
    ((1.0/((1.0 + (tmpvar_50 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_48, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (unity_LightPosition[1].xyz - (viewpos_45 * unity_LightPosition[1].w));
  highp float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_52);
  toLight_51 = (tmpvar_52 * inversesqrt(tmpvar_53));
  lightColor_43 = (lightColor_43 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_44, toLight_51))
   * 
    ((1.0/((1.0 + (tmpvar_53 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_51, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (unity_LightPosition[2].xyz - (viewpos_45 * unity_LightPosition[2].w));
  highp float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_55);
  toLight_54 = (tmpvar_55 * inversesqrt(tmpvar_56));
  lightColor_43 = (lightColor_43 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_44, toLight_54))
   * 
    ((1.0/((1.0 + (tmpvar_56 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_54, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[3].xyz - (viewpos_45 * unity_LightPosition[3].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  toLight_57 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_43 = (lightColor_43 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_44, toLight_57))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_57, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_1.xyz = (_Color.xyz * lightColor_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
  xlv_Input_color = tmpvar_1;
  xlv_Input_interpolator1 = tmpvar_3;
  xlv_Input_ditherScreenPos = screenPos_38;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_2 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_10 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = tmpvar_1;
  tmpvar_11.w = tmpvar_2;
  gl_FragData[0] = tmpvar_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp float t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t8;
highp float t9;
bool tb10;
highp vec2 t12;
bool tb12;
highp vec2 t17;
bool tb17;
highp vec2 t20;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t28;
void main()
{
    t0 = in_COLOR0.w * 255.0;
    tu0 = uint(t0);
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t9 = dot(t1.xyz, t1.xyz);
    t9 = inversesqrt(t9);
    t1.xy = vec2(t9) * t1.xz;
    t1.zw = (-t1.yy);
    t17.x = dot(t1.xz, t1.xw);
    t17.x = inversesqrt(t17.x);
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    t1.xy = t17.xx * t1.xy;
    t17.x = min(abs(t1.y), abs(t1.x));
    t25 = max(abs(t1.y), abs(t1.x));
    t25 = float(1.0) / t25;
    t17.x = t25 * t17.x;
    t25 = t17.x * t17.x;
    t2.x = t25 * 0.0208350997 + -0.0851330012;
    t2.x = t25 * t2.x + 0.180141002;
    t2.x = t25 * t2.x + -0.330299497;
    t25 = t25 * t2.x + 0.999866009;
    t2.x = t25 * t17.x;
    tb10 = abs(t1.y)<abs(t1.x);
    t2.x = t2.x * -2.0 + 1.57079637;
    t2.x = tb10 ? t2.x : float(0.0);
    t17.x = t17.x * t25 + t2.x;
    tb25 = t1.y<(-t1.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t17.x = t25 + t17.x;
    t25 = min(t1.y, (-t1.x));
    t2.x = max(t1.y, (-t1.x));
    tb25 = t25<(-t25);
    tb2 = t2.x>=(-t2.x);
    ti25 = int(uint(tb25) * 0xffffffffu & uint(tb2) * 0xffffffffu);
    t17.x = (ti25 != 0) ? (-t17.x) : t17.x;
    tb25 = t17.x<0.0;
    t25 = tb25 ? 6.28318548 : float(0.0);
    t17.x = t25 + t17.x;
    t25 = in_TEXCOORD0.x + -0.5;
    t25 = t25 * _TreeSize[int(tu0) + 0].x;
    t25 = t25 * in_TEXCOORD1.x;
    t2.xz = t1.xy * vec2(t25);
    t25 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    t2.y = t25 * in_TEXCOORD1.y;
    t16_3 = _WindEnabled * _WindQuality;
    tb25 = 0.0<t16_3;
    t26 = dot(t2.xyz, t2.xyz);
    t26 = sqrt(t26);
    t4.x = float(1.0) / _ST_WindGlobal.z;
    t4.x = (-t4.x) * 0.25 + t2.y;
    t4.x = max(t4.x, 0.0);
    t4.x = t4.x * _ST_WindGlobal.z;
    tb12 = t4.x!=0.0;
    t20.x = log2(t4.x);
    t20.x = t20.x * _ST_WindGlobal.w;
    t20.x = exp2(t20.x);
    t4.x = (tb12) ? t20.x : t4.x;
    t5.x = t8.x + in_TEXCOORD1.w;
    t5.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t12.xy = t5.xy + vec2(0.5, 0.5);
    t12.xy = fract(t12.xy);
    t12.xy = t12.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t5.xy = abs(t12.xy) * abs(t12.xy);
    t12.xy = -abs(t12.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t12.xy = t5.xy * t12.xy + vec2(-0.5, -0.5);
    t12.xy = t12.xy + t12.xy;
    t12.x = t12.y * t12.y + t12.x;
    t20.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t12.x = _ST_WindGlobal.y * t12.x + t20.x;
    t4.x = t4.x * t12.x;
    t4.xz = _ST_WindVector.xz * t4.xx + t2.xz;
    t4.y = t2.y;
    t28 = dot(t4.xyz, t4.xyz);
    t28 = inversesqrt(t28);
    t4.xyz = vec3(t28) * t4.xyz;
    t4.xyz = vec3(t26) * t4.xyz;
    t2.xyz = (bool(tb25)) ? t4.xyz : t2.xyz;
    t2.xyz = t2.xyz + in_POSITION0.xyz;
    t17.x = t17.x + in_TEXCOORD1.z;
    t17.x = t17.x * _TreeInfo[int(tu0) + 0].y + 0.5;
    t17.x = floor(t17.x);
    t17.x = t17.x / _TreeInfo[int(tu0) + 0].x;
    tb25 = t17.x>=(-t17.x);
    t17.x = fract(abs(t17.x));
    t17.x = (tb25) ? t17.x : (-t17.x);
    t0 = t17.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    tu0 = uint(t0);
    tb17 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t4.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t20.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb17)) ? t4.xy : t20.xy;
    t0 = t8.y + t8.x;
    t0 = t8.z + t0;
    t0 = fract(t0);
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    t8.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t8.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t8.xyz;
    t8.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t8.xyz;
    t8.xyz = t8.xyz + glstate_matrix_mvp[3].xyw;
    t4.xz = t8.xz * vec2(0.5, 0.5);
    t17.x = t8.y * _ProjectionParams.x;
    t4.w = t17.x * 0.5;
    t17.xy = t4.zz + t4.xw;
    t17.xy = t17.xy * _ScreenParams.xy;
    t8.xy = t17.xy * vec2(0.25, 0.25);
    t4.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    t4.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t4.xyz;
    t4.xyz = t4.xyz + glstate_matrix_modelview0[3].xyz;
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t5.xyz = t10_6.xyz;
    ti25 = 0x0;
    while(true){
        tb26 = ti25>=0x4;
        if(tb26){break;}
        t7.xyz = (-t4.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        t26 = dot(t7.xyz, t7.xyz);
        t28 = inversesqrt(t26);
        t7.xyz = vec3(t28) * t7.xyz;
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        t26 = float(1.0) / t26;
        t28 = dot(t7.xyz, unity_SpotDirection[ti25 + 0].xyz);
        t28 = max(t28, 0.0);
        t28 = t28 + (-unity_LightAtten[ti25 + 0].x);
        t28 = t28 * unity_LightAtten[ti25 + 0].y;
        t28 = clamp(t28, 0.0, 1.0);
        t26 = t26 * t28;
        t28 = dot(t1.xyz, t7.xyz);
        t28 = max(t28, 0.0);
        t26 = t26 * t28;
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        ti25 = ti25 + 0x1;
    }
    t1.xyz = t5.xyz * _Color.xyz;
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    gl_Position = t2 + glstate_matrix_mvp[3];
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.z = t0;
    vs_TEXCOORD3.xyz = t8.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_0.w = t10_0.w * _Color.w;
    t16_4 = max(t16_8.z, t16_8.y);
    t16_4 = max(t16_8.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 400
 Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 409734
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_10.xz;
  billboardPos_6.y = (tmpvar_10.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * _glesMultiTexCoord1.y));
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  highp float tmpvar_11;
  tmpvar_11 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_12;
  tmpvar_12 = (fract(abs(tmpvar_11)) * tmpvar_8.x);
  highp float tmpvar_13;
  if ((tmpvar_11 >= 0.0)) {
    tmpvar_13 = tmpvar_12;
  } else {
    tmpvar_13 = -(tmpvar_12);
  };
  highp vec4 tmpvar_14;
  tmpvar_14 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_13))];
  if ((tmpvar_14.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_14.xy - (tmpvar_14.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_14.xy + (tmpvar_14.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * _BillboardNormal.x)
   + 
    (v_16.xyz * _BillboardNormal.y)
  ) + (v_17.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_18;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = worldNormal_1;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t5;
highp uint tu5;
bool tb5;
highp vec2 t10;
bool tb10;
highp float t16;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t5 = in_COLOR0.w * 255.0;
    tu5 = uint(t5);
    t0.x = t0.x * _TreeSize[int(tu5) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu5) + 0].y + _TreeSize[int(tu5) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t2.xyz;
    vs_TEXCOORD1.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu5) + 0].x;
    tb10 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb10) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].x + _TreeInfo[int(tu5) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    vs_TEXCOORD3.z = 0.0;
    t16_3.x = t1.y * t1.y;
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_4.x = dot(unity_SHBr, t16_0);
    t16_4.y = dot(unity_SHBg, t16_0);
    t16_4.z = dot(unity_SHBb, t16_0);
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    t1.w = 1.0;
    t16_4.x = dot(unity_SHAr, t1);
    t16_4.y = dot(unity_SHAg, t1);
    t16_4.z = dot(unity_SHAb, t1);
    vs_TEXCOORD4.xyz = t16_3.xyz + t16_4.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * _BillboardNormal.x)
   + 
    (v_17.xyz * _BillboardNormal.y)
  ) + (v_18.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_19;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = worldNormal_1;
  mediump vec4 normal_21;
  normal_21 = tmpvar_20;
  mediump vec3 x2_22;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, normal_21);
  x1_23.y = dot (unity_SHAg, normal_21);
  x1_23.z = dot (unity_SHAb, normal_21);
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x2_22.x = dot (unity_SHBr, tmpvar_24);
  x2_22.y = dot (unity_SHBg, tmpvar_24);
  x2_22.z = dot (unity_SHBb, tmpvar_24);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_22 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )) + x1_23);
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * _BillboardNormal.x)
   + 
    (v_18.xyz * _BillboardNormal.y)
  ) + (v_19.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_20;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = worldNormal_1;
  mediump vec4 normal_22;
  normal_22 = tmpvar_21;
  mediump vec3 x2_23;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, normal_22);
  x1_24.y = dot (unity_SHAg, normal_22);
  x1_24.z = dot (unity_SHAb, normal_22);
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
  x2_23.x = dot (unity_SHBr, tmpvar_25);
  x2_23.y = dot (unity_SHBg, tmpvar_25);
  x2_23.z = dot (unity_SHBb, tmpvar_25);
  highp vec3 lightColor0_26;
  lightColor0_26 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_27;
  lightColor1_27 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_28;
  lightColor2_28 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_29;
  lightColor3_29 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_30;
  lightAttenSq_30 = unity_4LightAtten0;
  highp vec3 normal_31;
  normal_31 = worldNormal_1;
  highp vec3 col_32;
  highp vec4 ndotl_33;
  highp vec4 lengthSq_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_34 = (tmpvar_35 * tmpvar_35);
  lengthSq_34 = (lengthSq_34 + (tmpvar_36 * tmpvar_36));
  lengthSq_34 = (lengthSq_34 + (tmpvar_37 * tmpvar_37));
  ndotl_33 = (tmpvar_35 * normal_31.x);
  ndotl_33 = (ndotl_33 + (tmpvar_36 * normal_31.y));
  ndotl_33 = (ndotl_33 + (tmpvar_37 * normal_31.z));
  highp vec4 tmpvar_38;
  tmpvar_38 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_33 * inversesqrt(lengthSq_34)));
  ndotl_33 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_38 * (1.0/((1.0 + 
    (lengthSq_34 * lightAttenSq_30)
  ))));
  col_32 = (lightColor0_26 * tmpvar_39.x);
  col_32 = (col_32 + (lightColor1_27 * tmpvar_39.y));
  col_32 = (col_32 + (lightColor2_28 * tmpvar_39.z));
  col_32 = (col_32 + (lightColor3_29 * tmpvar_39.w));
  tmpvar_4 = (((x2_23 + 
    (unity_SHC.xyz * ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y)))
  ) + x1_24) + col_32);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_16;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
bool tb2;
highp vec4 t3;
mediump vec3 t16_4;
highp vec4 t5;
mediump vec3 t16_5;
highp float t6;
highp uint tu6;
highp vec2 t8;
bool tb8;
highp float t19;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t6 = in_COLOR0.w * 255.0;
    tu6 = uint(t6);
    t0.x = t0.x * _TreeSize[int(tu6) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu6) + 0].y + _TreeSize[int(tu6) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t2.xyz;
    t0.xzw = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t0.xzw;
    vs_TEXCOORD2 = _Color;
    t2.x = in_TEXCOORD1.z + _CameraXZAngle;
    t2.x = t2.x * _TreeInfo[int(tu6) + 0].y + 0.5;
    t2.x = floor(t2.x);
    t2.x = t2.x / _TreeInfo[int(tu6) + 0].x;
    tb8 = t2.x>=(-t2.x);
    t2.x = fract(abs(t2.x));
    t2.x = (tb8) ? t2.x : (-t2.x);
    t6 = t2.x * _TreeInfo[int(tu6) + 0].x + _TreeInfo[int(tu6) + 0].z;
    tu6 = uint(t6);
    tb2 = _ImageTexCoords[int(tu6) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu6) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu6) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu6) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu6) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb2)) ? t8.xy : t3.xy;
    vs_TEXCOORD3.z = 0.0;
    t16_4.x = t1.y * t1.y;
    t16_4.x = t1.x * t1.x + (-t16_4.x);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_5.x = dot(unity_SHBr, t16_2);
    t16_5.y = dot(unity_SHBg, t16_2);
    t16_5.z = dot(unity_SHBb, t16_2);
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    t1.w = 1.0;
    t16_5.x = dot(unity_SHAr, t1);
    t16_5.y = dot(unity_SHAg, t1);
    t16_5.z = dot(unity_SHAb, t1);
    t16_4.xyz = t16_4.xyz + t16_5.xyz;
    t2 = (-t0.zzzz) + unity_4LightPosY0;
    t3 = t1.yyyy * t2;
    t2 = t2 * t2;
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.wwww) + unity_4LightPosZ0;
    t3 = t5 * t1.xxxx + t3;
    t1 = t0 * t1.zzzz + t3;
    t2 = t5 * t5 + t2;
    t0 = t0 * t0 + t2;
    t2 = inversesqrt(t0);
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    t1 = t1 * t2;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t0 * t1;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t0.xyz = t0.xyz + t16_4.xyz;
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_12.xz;
  billboardPos_8.y = (tmpvar_12.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_13;
  tmpvar_13 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_14;
  tmpvar_14 = (fract(abs(tmpvar_13)) * tmpvar_10.x);
  highp float tmpvar_15;
  if ((tmpvar_13 >= 0.0)) {
    tmpvar_15 = tmpvar_14;
  } else {
    tmpvar_15 = -(tmpvar_14);
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_15))];
  if ((tmpvar_16.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_16.xy - (tmpvar_16.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_16.xy + (tmpvar_16.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_21;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = worldNormal_1;
  mediump vec4 normal_23;
  normal_23 = tmpvar_22;
  mediump vec3 x2_24;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, normal_23);
  x1_25.y = dot (unity_SHAg, normal_23);
  x1_25.z = dot (unity_SHAb, normal_23);
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x2_24.x = dot (unity_SHBr, tmpvar_26);
  x2_24.y = dot (unity_SHBg, tmpvar_26);
  x2_24.z = dot (unity_SHBb, tmpvar_26);
  highp vec3 lightColor0_27;
  lightColor0_27 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_28;
  lightColor1_28 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_29;
  lightColor2_29 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_30;
  lightColor3_30 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_31;
  lightAttenSq_31 = unity_4LightAtten0;
  highp vec3 normal_32;
  normal_32 = worldNormal_1;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_17.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_17.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_17.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  ndotl_34 = (tmpvar_36 * normal_32.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * normal_32.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * normal_32.z));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(lengthSq_35)));
  ndotl_34 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * (1.0/((1.0 + 
    (lengthSq_35 * lightAttenSq_31)
  ))));
  col_33 = (lightColor0_27 * tmpvar_40.x);
  col_33 = (col_33 + (lightColor1_28 * tmpvar_40.y));
  col_33 = (col_33 + (lightColor2_29 * tmpvar_40.z));
  col_33 = (col_33 + (lightColor3_30 * tmpvar_40.w));
  tmpvar_4 = (((x2_24 + 
    (unity_SHC.xyz * ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y)))
  ) + x1_25) + col_33);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_17;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * _BillboardNormal.x)
   + 
    (v_17.xyz * _BillboardNormal.y)
  ) + (v_18.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_19;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = worldNormal_1;
  mediump vec4 normal_21;
  normal_21 = tmpvar_20;
  mediump vec3 x2_22;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, normal_21);
  x1_23.y = dot (unity_SHAg, normal_21);
  x1_23.z = dot (unity_SHAb, normal_21);
  mediump vec4 tmpvar_24;
  tmpvar_24 = (normal_21.xyzz * normal_21.yzzx);
  x2_22.x = dot (unity_SHBr, tmpvar_24);
  x2_22.y = dot (unity_SHBg, tmpvar_24);
  x2_22.z = dot (unity_SHBb, tmpvar_24);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_22 + (unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )) + x1_23);
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
mediump vec4 t16_2;
bool tb2;
highp vec2 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
highp uint tu6;
highp vec2 t8;
bool tb8;
highp float t19;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t6 = in_COLOR0.w * 255.0;
    tu6 = uint(t6);
    t0.x = t0.x * _TreeSize[int(tu6) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu6) + 0].y + _TreeSize[int(tu6) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t0.www + t2.xyz;
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t2.x = in_TEXCOORD1.z + _CameraXZAngle;
    t2.x = t2.x * _TreeInfo[int(tu6) + 0].y + 0.5;
    t2.x = floor(t2.x);
    t2.x = t2.x / _TreeInfo[int(tu6) + 0].x;
    tb8 = t2.x>=(-t2.x);
    t2.x = fract(abs(t2.x));
    t2.x = (tb8) ? t2.x : (-t2.x);
    t6 = t2.x * _TreeInfo[int(tu6) + 0].x + _TreeInfo[int(tu6) + 0].z;
    tu6 = uint(t6);
    tb2 = _ImageTexCoords[int(tu6) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu6) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu6) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu6) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu6) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb2)) ? t8.xy : t3.xy;
    vs_TEXCOORD3.z = 0.0;
    t16_4.x = t1.y * t1.y;
    t16_4.x = t1.x * t1.x + (-t16_4.x);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_5.x = dot(unity_SHBr, t16_2);
    t16_5.y = dot(unity_SHBg, t16_2);
    t16_5.z = dot(unity_SHBb, t16_2);
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    t1.w = 1.0;
    t16_5.x = dot(unity_SHAr, t1);
    t16_5.y = dot(unity_SHAg, t1);
    t16_5.z = dot(unity_SHAb, t1);
    vs_TEXCOORD4.xyz = t16_4.xyz + t16_5.xyz;
    t1 = t0.zzzz * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.wwww + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD5 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    vec3 txVec127 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec127, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_12.xz;
  billboardPos_8.y = (tmpvar_12.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_13;
  tmpvar_13 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_14;
  tmpvar_14 = (fract(abs(tmpvar_13)) * tmpvar_10.x);
  highp float tmpvar_15;
  if ((tmpvar_13 >= 0.0)) {
    tmpvar_15 = tmpvar_14;
  } else {
    tmpvar_15 = -(tmpvar_14);
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_15))];
  if ((tmpvar_16.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_16.xy - (tmpvar_16.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_16.xy + (tmpvar_16.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_21;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = worldNormal_1;
  mediump vec4 normal_23;
  normal_23 = tmpvar_22;
  mediump vec3 x2_24;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, normal_23);
  x1_25.y = dot (unity_SHAg, normal_23);
  x1_25.z = dot (unity_SHAb, normal_23);
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x2_24.x = dot (unity_SHBr, tmpvar_26);
  x2_24.y = dot (unity_SHBg, tmpvar_26);
  x2_24.z = dot (unity_SHBb, tmpvar_26);
  highp vec3 lightColor0_27;
  lightColor0_27 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_28;
  lightColor1_28 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_29;
  lightColor2_29 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_30;
  lightColor3_30 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_31;
  lightAttenSq_31 = unity_4LightAtten0;
  highp vec3 normal_32;
  normal_32 = worldNormal_1;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_17.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_17.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_17.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  ndotl_34 = (tmpvar_36 * normal_32.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * normal_32.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * normal_32.z));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(lengthSq_35)));
  ndotl_34 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * (1.0/((1.0 + 
    (lengthSq_35 * lightAttenSq_31)
  ))));
  col_33 = (lightColor0_27 * tmpvar_40.x);
  col_33 = (col_33 + (lightColor1_28 * tmpvar_40.y));
  col_33 = (col_33 + (lightColor2_29 * tmpvar_40.z));
  col_33 = (col_33 + (lightColor3_30 * tmpvar_40.w));
  tmpvar_4 = (((x2_24 + 
    (unity_SHC.xyz * ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y)))
  ) + x1_25) + col_33);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_17;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump vec4 t16_3;
bool tb3;
mediump vec3 t16_4;
highp vec4 t5;
mediump vec3 t16_5;
highp vec4 t6;
highp float t7;
highp uint tu7;
highp vec2 t17;
highp float t22;
highp float t23;
bool tb23;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t7 = in_COLOR0.w * 255.0;
    tu7 = uint(t7);
    t0.x = t0.x * _TreeSize[int(tu7) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu7) + 0].y + _TreeSize[int(tu7) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t0.www + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t2.xyz;
    vs_TEXCOORD2 = _Color;
    t23 = in_TEXCOORD1.z + _CameraXZAngle;
    t23 = t23 * _TreeInfo[int(tu7) + 0].y + 0.5;
    t23 = floor(t23);
    t23 = t23 / _TreeInfo[int(tu7) + 0].x;
    tb3 = t23>=(-t23);
    t23 = fract(abs(t23));
    t23 = (tb3) ? t23 : (-t23);
    t7 = t23 * _TreeInfo[int(tu7) + 0].x + _TreeInfo[int(tu7) + 0].z;
    tu7 = uint(t7);
    tb23 = _ImageTexCoords[int(tu7) + 0].w<0.0;
    t3.xy = (-_ImageTexCoords[int(tu7) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu7) + 0].xy;
    t17.xy = _ImageTexCoords[int(tu7) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu7) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb23)) ? t3.xy : t17.xy;
    vs_TEXCOORD3.z = 0.0;
    t16_4.x = t1.y * t1.y;
    t16_4.x = t1.x * t1.x + (-t16_4.x);
    t16_3 = t1.yzzx * t1.xyzz;
    t16_5.x = dot(unity_SHBr, t16_3);
    t16_5.y = dot(unity_SHBg, t16_3);
    t16_5.z = dot(unity_SHBb, t16_3);
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    t1.w = 1.0;
    t16_5.x = dot(unity_SHAr, t1);
    t16_5.y = dot(unity_SHAg, t1);
    t16_5.z = dot(unity_SHAb, t1);
    t16_4.xyz = t16_4.xyz + t16_5.xyz;
    t3 = (-t2.yyyy) + unity_4LightPosY0;
    t5 = t1.yyyy * t3;
    t3 = t3 * t3;
    t6 = (-t2.xxxx) + unity_4LightPosX0;
    t2 = (-t2.zzzz) + unity_4LightPosZ0;
    t5 = t6 * t1.xxxx + t5;
    t1 = t2 * t1.zzzz + t5;
    t3 = t6 * t6 + t3;
    t2 = t2 * t2 + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t1 = t1 * t3;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t1 = t2 * t1;
    t2.xyz = t1.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t2.xyz;
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    t1.xyz = t1.xyz + t16_4.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    t1 = t0.zzzz * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.wwww + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD5 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    vec3 txVec128 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec128, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * _BillboardNormal.x)
   + 
    (v_18.xyz * _BillboardNormal.y)
  ) + (v_19.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_20;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_21 * _BillboardTangent));
  worldTangent_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_25;
  tmpvar_25.x = worldTangent_2.x;
  tmpvar_25.y = tmpvar_24.x;
  tmpvar_25.z = worldNormal_3.x;
  tmpvar_25.w = tmpvar_16.x;
  highp vec4 tmpvar_26;
  tmpvar_26.x = worldTangent_2.y;
  tmpvar_26.y = tmpvar_24.y;
  tmpvar_26.z = worldNormal_3.y;
  tmpvar_26.w = tmpvar_16.y;
  highp vec4 tmpvar_27;
  tmpvar_27.x = worldTangent_2.z;
  tmpvar_27.y = tmpvar_24.z;
  tmpvar_27.z = worldNormal_3.z;
  tmpvar_27.w = tmpvar_16.z;
  lowp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = worldNormal_3;
  mediump vec4 normal_29;
  normal_29 = tmpvar_28;
  mediump vec3 x2_30;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, normal_29);
  x1_31.y = dot (unity_SHAg, normal_29);
  x1_31.z = dot (unity_SHAb, normal_29);
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_29.xyzz * normal_29.yzzx);
  x2_30.x = dot (unity_SHBr, tmpvar_32);
  x2_30.y = dot (unity_SHBg, tmpvar_32);
  x2_30.z = dot (unity_SHBb, tmpvar_32);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_26;
  xlv_TEXCOORD2 = tmpvar_27;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = ((x2_30 + (unity_SHC.xyz * 
    ((normal_29.x * normal_29.x) - (normal_29.y * normal_29.y))
  )) + x1_31);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
highp uint tu7;
bool tb7;
highp vec2 t14;
bool tb14;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t7 = in_COLOR0.w * 255.0;
    tu7 = uint(t7);
    t0.x = t0.x * _TreeSize[int(tu7) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu7) + 0].y + _TreeSize[int(tu7) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    t0.xzw = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t0.x;
    t1.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t1.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t1.xyz;
    t1.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t1.xyz;
    t0.x = dot(t1.xyz, t1.xyz);
    t0.x = inversesqrt(t0.x);
    t1.xyz = t0.xxx * t1.xyz;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t0.x = dot(t2.xyz, t2.xyz);
    t0.x = inversesqrt(t0.x);
    t2.xyz = t0.xxx * t2.xyz;
    t10_4.xyz = t1.xyz * t2.zxy;
    t10_4.xyz = t2.yzx * t1.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t1.z;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD1.x = t1.x;
    vs_TEXCOORD2.x = t1.y;
    vs_TEXCOORD1.w = t0.z;
    vs_TEXCOORD2.w = t0.w;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    vs_TEXCOORD2.z = t2.z;
    vs_TEXCOORD3 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu7) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu7) + 0].x;
    tb14 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb14) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu7) + 0].x + _TreeInfo[int(tu7) + 0].z;
    tu0 = uint(t0.x);
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb7)) ? t14.xy : t1.xy;
    vs_TEXCOORD4.z = 0.0;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_0 = t2.yzzx * t2.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t2.w = 1.0;
    t16_6.x = dot(unity_SHAr, t2);
    t16_6.y = dot(unity_SHAg, t2);
    t16_6.z = dot(unity_SHAb, t2);
    vs_TEXCOORD5.xyz = t16_5.xyz + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_12.xz;
  billboardPos_8.y = (tmpvar_12.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_13;
  tmpvar_13 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_14;
  tmpvar_14 = (fract(abs(tmpvar_13)) * tmpvar_10.x);
  highp float tmpvar_15;
  if ((tmpvar_13 >= 0.0)) {
    tmpvar_15 = tmpvar_14;
  } else {
    tmpvar_15 = -(tmpvar_14);
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_15))];
  if ((tmpvar_16.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_16.xy - (tmpvar_16.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_16.xy + (tmpvar_16.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_21;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((tmpvar_22 * _BillboardTangent));
  worldTangent_2 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_26;
  tmpvar_26.x = worldTangent_2.x;
  tmpvar_26.y = tmpvar_25.x;
  tmpvar_26.z = worldNormal_3.x;
  tmpvar_26.w = tmpvar_17.x;
  highp vec4 tmpvar_27;
  tmpvar_27.x = worldTangent_2.y;
  tmpvar_27.y = tmpvar_25.y;
  tmpvar_27.z = worldNormal_3.y;
  tmpvar_27.w = tmpvar_17.y;
  highp vec4 tmpvar_28;
  tmpvar_28.x = worldTangent_2.z;
  tmpvar_28.y = tmpvar_25.z;
  tmpvar_28.z = worldNormal_3.z;
  tmpvar_28.w = tmpvar_17.z;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = worldNormal_3;
  mediump vec4 normal_30;
  normal_30 = tmpvar_29;
  mediump vec3 x2_31;
  mediump vec3 x1_32;
  x1_32.x = dot (unity_SHAr, normal_30);
  x1_32.y = dot (unity_SHAg, normal_30);
  x1_32.z = dot (unity_SHAb, normal_30);
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normal_30.xyzz * normal_30.yzzx);
  x2_31.x = dot (unity_SHBr, tmpvar_33);
  x2_31.y = dot (unity_SHBg, tmpvar_33);
  x2_31.z = dot (unity_SHBb, tmpvar_33);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_27;
  xlv_TEXCOORD2 = tmpvar_28;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_31 + (unity_SHC.xyz * 
    ((normal_30.x * normal_30.x) - (normal_30.y * normal_30.y))
  )) + x1_32);
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_21.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_12.xz;
  billboardPos_8.y = (tmpvar_12.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_13;
  tmpvar_13 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_14;
  tmpvar_14 = (fract(abs(tmpvar_13)) * tmpvar_10.x);
  highp float tmpvar_15;
  if ((tmpvar_13 >= 0.0)) {
    tmpvar_15 = tmpvar_14;
  } else {
    tmpvar_15 = -(tmpvar_14);
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_15))];
  if ((tmpvar_16.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_16.xy - (tmpvar_16.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_16.xy + (tmpvar_16.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_21;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((tmpvar_22 * _BillboardTangent));
  worldTangent_2 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_26;
  tmpvar_26.x = worldTangent_2.x;
  tmpvar_26.y = tmpvar_25.x;
  tmpvar_26.z = worldNormal_3.x;
  tmpvar_26.w = tmpvar_17.x;
  highp vec4 tmpvar_27;
  tmpvar_27.x = worldTangent_2.y;
  tmpvar_27.y = tmpvar_25.y;
  tmpvar_27.z = worldNormal_3.y;
  tmpvar_27.w = tmpvar_17.y;
  highp vec4 tmpvar_28;
  tmpvar_28.x = worldTangent_2.z;
  tmpvar_28.y = tmpvar_25.z;
  tmpvar_28.z = worldNormal_3.z;
  tmpvar_28.w = tmpvar_17.z;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = worldNormal_3;
  mediump vec4 normal_30;
  normal_30 = tmpvar_29;
  mediump vec3 x2_31;
  mediump vec3 x1_32;
  x1_32.x = dot (unity_SHAr, normal_30);
  x1_32.y = dot (unity_SHAg, normal_30);
  x1_32.z = dot (unity_SHAb, normal_30);
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normal_30.xyzz * normal_30.yzzx);
  x2_31.x = dot (unity_SHBr, tmpvar_33);
  x2_31.y = dot (unity_SHBg, tmpvar_33);
  x2_31.z = dot (unity_SHBb, tmpvar_33);
  highp vec3 lightColor0_34;
  lightColor0_34 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_35;
  lightColor1_35 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_36;
  lightColor2_36 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_37;
  lightColor3_37 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_38;
  lightAttenSq_38 = unity_4LightAtten0;
  highp vec3 normal_39;
  normal_39 = worldNormal_3;
  highp vec3 col_40;
  highp vec4 ndotl_41;
  highp vec4 lengthSq_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosX0 - tmpvar_17.x);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosY0 - tmpvar_17.y);
  highp vec4 tmpvar_45;
  tmpvar_45 = (unity_4LightPosZ0 - tmpvar_17.z);
  lengthSq_42 = (tmpvar_43 * tmpvar_43);
  lengthSq_42 = (lengthSq_42 + (tmpvar_44 * tmpvar_44));
  lengthSq_42 = (lengthSq_42 + (tmpvar_45 * tmpvar_45));
  ndotl_41 = (tmpvar_43 * normal_39.x);
  ndotl_41 = (ndotl_41 + (tmpvar_44 * normal_39.y));
  ndotl_41 = (ndotl_41 + (tmpvar_45 * normal_39.z));
  highp vec4 tmpvar_46;
  tmpvar_46 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_41 * inversesqrt(lengthSq_42)));
  ndotl_41 = tmpvar_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_46 * (1.0/((1.0 + 
    (lengthSq_42 * lightAttenSq_38)
  ))));
  col_40 = (lightColor0_34 * tmpvar_47.x);
  col_40 = (col_40 + (lightColor1_35 * tmpvar_47.y));
  col_40 = (col_40 + (lightColor2_36 * tmpvar_47.z));
  col_40 = (col_40 + (lightColor3_37 * tmpvar_47.w));
  tmpvar_5 = (((x2_31 + 
    (unity_SHC.xyz * ((normal_30.x * normal_30.x) - (normal_30.y * normal_30.y)))
  ) + x1_32) + col_40);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_27;
  xlv_TEXCOORD2 = tmpvar_28;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
highp uint tu7;
highp vec2 t8;
bool tb8;
highp float t22;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t7 = in_COLOR0.w * 255.0;
    tu7 = uint(t7);
    t0.x = t0.x * _TreeSize[int(tu7) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu7) + 0].y + _TreeSize[int(tu7) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    t0.xzw = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t0.x;
    t1.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t1.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t1.xyz;
    t1.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t1.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    vs_TEXCOORD0.x = t1.z;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t22 = dot(t2.xyz, t2.xyz);
    t22 = inversesqrt(t22);
    t2.xyz = vec3(t22) * t2.xyz;
    t10_4.xyz = t1.xyz * t2.zxy;
    t10_4.xyz = t2.yzx * t1.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD1.x = t1.x;
    vs_TEXCOORD2.x = t1.y;
    vs_TEXCOORD1.w = t0.z;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD2.w = t0.w;
    vs_TEXCOORD2.z = t2.z;
    vs_TEXCOORD3 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu7) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu7) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t7 = t1.x * _TreeInfo[int(tu7) + 0].x + _TreeInfo[int(tu7) + 0].z;
    tu7 = uint(t7);
    tb1 = _ImageTexCoords[int(tu7) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu7) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu7) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu7) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu7) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t2.w = 1.0;
    t16_6.x = dot(unity_SHAr, t2);
    t16_6.y = dot(unity_SHAg, t2);
    t16_6.z = dot(unity_SHAb, t2);
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    t1 = (-t0.zzzz) + unity_4LightPosY0;
    t3 = t2.yyyy * t1;
    t1 = t1 * t1;
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    t0 = (-t0.wwww) + unity_4LightPosZ0;
    t3 = t4 * t2.xxxx + t3;
    t2 = t0 * t2.zzzz + t3;
    t1 = t4 * t4 + t1;
    t0 = t0 * t0 + t1;
    t1 = inversesqrt(t0);
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    t1 = t1 * t2;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t0 * t1;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_13.xz;
  billboardPos_9.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_11.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_22;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((tmpvar_23 * _BillboardTangent));
  worldTangent_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_27;
  tmpvar_27.x = worldTangent_2.x;
  tmpvar_27.y = tmpvar_26.x;
  tmpvar_27.z = worldNormal_3.x;
  tmpvar_27.w = tmpvar_18.x;
  highp vec4 tmpvar_28;
  tmpvar_28.x = worldTangent_2.y;
  tmpvar_28.y = tmpvar_26.y;
  tmpvar_28.z = worldNormal_3.y;
  tmpvar_28.w = tmpvar_18.y;
  highp vec4 tmpvar_29;
  tmpvar_29.x = worldTangent_2.z;
  tmpvar_29.y = tmpvar_26.z;
  tmpvar_29.z = worldNormal_3.z;
  tmpvar_29.w = tmpvar_18.z;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = worldNormal_3;
  mediump vec4 normal_31;
  normal_31 = tmpvar_30;
  mediump vec3 x2_32;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, normal_31);
  x1_33.y = dot (unity_SHAg, normal_31);
  x1_33.z = dot (unity_SHAb, normal_31);
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normal_31.xyzz * normal_31.yzzx);
  x2_32.x = dot (unity_SHBr, tmpvar_34);
  x2_32.y = dot (unity_SHBg, tmpvar_34);
  x2_32.z = dot (unity_SHBb, tmpvar_34);
  highp vec3 lightColor0_35;
  lightColor0_35 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_36;
  lightColor1_36 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_37;
  lightColor2_37 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_38;
  lightColor3_38 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_39;
  lightAttenSq_39 = unity_4LightAtten0;
  highp vec3 normal_40;
  normal_40 = worldNormal_3;
  highp vec3 col_41;
  highp vec4 ndotl_42;
  highp vec4 lengthSq_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosX0 - tmpvar_18.x);
  highp vec4 tmpvar_45;
  tmpvar_45 = (unity_4LightPosY0 - tmpvar_18.y);
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosZ0 - tmpvar_18.z);
  lengthSq_43 = (tmpvar_44 * tmpvar_44);
  lengthSq_43 = (lengthSq_43 + (tmpvar_45 * tmpvar_45));
  lengthSq_43 = (lengthSq_43 + (tmpvar_46 * tmpvar_46));
  ndotl_42 = (tmpvar_44 * normal_40.x);
  ndotl_42 = (ndotl_42 + (tmpvar_45 * normal_40.y));
  ndotl_42 = (ndotl_42 + (tmpvar_46 * normal_40.z));
  highp vec4 tmpvar_47;
  tmpvar_47 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_42 * inversesqrt(lengthSq_43)));
  ndotl_42 = tmpvar_47;
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_47 * (1.0/((1.0 + 
    (lengthSq_43 * lightAttenSq_39)
  ))));
  col_41 = (lightColor0_35 * tmpvar_48.x);
  col_41 = (col_41 + (lightColor1_36 * tmpvar_48.y));
  col_41 = (col_41 + (lightColor2_37 * tmpvar_48.z));
  col_41 = (col_41 + (lightColor3_38 * tmpvar_48.w));
  tmpvar_5 = (((x2_32 + 
    (unity_SHC.xyz * ((normal_31.x * normal_31.x) - (normal_31.y * normal_31.y)))
  ) + x1_33) + col_41);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_27;
  xlv_TEXCOORD1 = tmpvar_28;
  xlv_TEXCOORD2 = tmpvar_29;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_21.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_12.xz;
  billboardPos_8.y = (tmpvar_12.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  highp float tmpvar_13;
  tmpvar_13 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_14;
  tmpvar_14 = (fract(abs(tmpvar_13)) * tmpvar_10.x);
  highp float tmpvar_15;
  if ((tmpvar_13 >= 0.0)) {
    tmpvar_15 = tmpvar_14;
  } else {
    tmpvar_15 = -(tmpvar_14);
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_15))];
  if ((tmpvar_16.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_16.xy - (tmpvar_16.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_16.xy + (tmpvar_16.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_21;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize((tmpvar_22 * _BillboardTangent));
  worldTangent_2 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_26;
  tmpvar_26.x = worldTangent_2.x;
  tmpvar_26.y = tmpvar_25.x;
  tmpvar_26.z = worldNormal_3.x;
  tmpvar_26.w = tmpvar_17.x;
  highp vec4 tmpvar_27;
  tmpvar_27.x = worldTangent_2.y;
  tmpvar_27.y = tmpvar_25.y;
  tmpvar_27.z = worldNormal_3.y;
  tmpvar_27.w = tmpvar_17.y;
  highp vec4 tmpvar_28;
  tmpvar_28.x = worldTangent_2.z;
  tmpvar_28.y = tmpvar_25.z;
  tmpvar_28.z = worldNormal_3.z;
  tmpvar_28.w = tmpvar_17.z;
  lowp vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = worldNormal_3;
  mediump vec4 normal_30;
  normal_30 = tmpvar_29;
  mediump vec3 x2_31;
  mediump vec3 x1_32;
  x1_32.x = dot (unity_SHAr, normal_30);
  x1_32.y = dot (unity_SHAg, normal_30);
  x1_32.z = dot (unity_SHAb, normal_30);
  mediump vec4 tmpvar_33;
  tmpvar_33 = (normal_30.xyzz * normal_30.yzzx);
  x2_31.x = dot (unity_SHBr, tmpvar_33);
  x2_31.y = dot (unity_SHBg, tmpvar_33);
  x2_31.z = dot (unity_SHBb, tmpvar_33);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_27;
  xlv_TEXCOORD2 = tmpvar_28;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_31 + (unity_SHC.xyz * 
    ((normal_30.x * normal_30.x) - (normal_30.y * normal_30.y))
  )) + x1_32);
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_20.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
highp vec3 t4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp float t8;
highp uint tu8;
highp vec2 t9;
bool tb9;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t8 = in_COLOR0.w * 255.0;
    tu8 = uint(t8);
    t0.x = t0.x * _TreeSize[int(tu8) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.www + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t1.x = dot(t2.xyz, t2.xyz);
    t1.x = inversesqrt(t1.x);
    t2.xyz = t1.xxx * t2.xyz;
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t3.xyz = t3.xyz + t4.xyz;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t3.xyz = t3.xyz + t4.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_5.xyz = t2.xyz * t3.zxy;
    t10_5.xyz = t3.yzx * t2.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD0.z = t3.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.z = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD2.z = t3.z;
    vs_TEXCOORD3 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu8) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu8) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t8 = t1.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    tu8 = uint(t8);
    tb1 = _ImageTexCoords[int(tu8) + 0].w<0.0;
    t9.xy = (-_ImageTexCoords[int(tu8) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu8) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu8) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu8) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    vs_TEXCOORD4.z = 0.0;
    t16_6.x = t3.y * t3.y;
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    t16_1 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_1);
    t16_7.y = dot(unity_SHBg, t16_1);
    t16_7.z = dot(unity_SHBb, t16_1);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t3.w = 1.0;
    t16_7.x = dot(unity_SHAr, t3);
    t16_7.y = dot(unity_SHAg, t3);
    t16_7.z = dot(unity_SHAb, t3);
    vs_TEXCOORD5.xyz = t16_6.xyz + t16_7.xyz;
    t1 = t0.zzzz * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.wwww + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_7;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    vec3 txVec129 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec129, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_3.x = t16_3.x * t16_7 + _LightShadowData.x;
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_13.xz;
  billboardPos_9.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_11.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_22;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((tmpvar_23 * _BillboardTangent));
  worldTangent_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_27;
  tmpvar_27.x = worldTangent_2.x;
  tmpvar_27.y = tmpvar_26.x;
  tmpvar_27.z = worldNormal_3.x;
  tmpvar_27.w = tmpvar_18.x;
  highp vec4 tmpvar_28;
  tmpvar_28.x = worldTangent_2.y;
  tmpvar_28.y = tmpvar_26.y;
  tmpvar_28.z = worldNormal_3.y;
  tmpvar_28.w = tmpvar_18.y;
  highp vec4 tmpvar_29;
  tmpvar_29.x = worldTangent_2.z;
  tmpvar_29.y = tmpvar_26.z;
  tmpvar_29.z = worldNormal_3.z;
  tmpvar_29.w = tmpvar_18.z;
  lowp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = worldNormal_3;
  mediump vec4 normal_31;
  normal_31 = tmpvar_30;
  mediump vec3 x2_32;
  mediump vec3 x1_33;
  x1_33.x = dot (unity_SHAr, normal_31);
  x1_33.y = dot (unity_SHAg, normal_31);
  x1_33.z = dot (unity_SHAb, normal_31);
  mediump vec4 tmpvar_34;
  tmpvar_34 = (normal_31.xyzz * normal_31.yzzx);
  x2_32.x = dot (unity_SHBr, tmpvar_34);
  x2_32.y = dot (unity_SHBg, tmpvar_34);
  x2_32.z = dot (unity_SHBb, tmpvar_34);
  highp vec3 lightColor0_35;
  lightColor0_35 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_36;
  lightColor1_36 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_37;
  lightColor2_37 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_38;
  lightColor3_38 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_39;
  lightAttenSq_39 = unity_4LightAtten0;
  highp vec3 normal_40;
  normal_40 = worldNormal_3;
  highp vec3 col_41;
  highp vec4 ndotl_42;
  highp vec4 lengthSq_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosX0 - tmpvar_18.x);
  highp vec4 tmpvar_45;
  tmpvar_45 = (unity_4LightPosY0 - tmpvar_18.y);
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosZ0 - tmpvar_18.z);
  lengthSq_43 = (tmpvar_44 * tmpvar_44);
  lengthSq_43 = (lengthSq_43 + (tmpvar_45 * tmpvar_45));
  lengthSq_43 = (lengthSq_43 + (tmpvar_46 * tmpvar_46));
  ndotl_42 = (tmpvar_44 * normal_40.x);
  ndotl_42 = (ndotl_42 + (tmpvar_45 * normal_40.y));
  ndotl_42 = (ndotl_42 + (tmpvar_46 * normal_40.z));
  highp vec4 tmpvar_47;
  tmpvar_47 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_42 * inversesqrt(lengthSq_43)));
  ndotl_42 = tmpvar_47;
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_47 * (1.0/((1.0 + 
    (lengthSq_43 * lightAttenSq_39)
  ))));
  col_41 = (lightColor0_35 * tmpvar_48.x);
  col_41 = (col_41 + (lightColor1_36 * tmpvar_48.y));
  col_41 = (col_41 + (lightColor2_37 * tmpvar_48.z));
  col_41 = (col_41 + (lightColor3_38 * tmpvar_48.w));
  tmpvar_5 = (((x2_32 + 
    (unity_SHC.xyz * ((normal_31.x * normal_31.x) - (normal_31.y * normal_31.y)))
  ) + x1_33) + col_41);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_27;
  xlv_TEXCOORD1 = tmpvar_28;
  xlv_TEXCOORD2 = tmpvar_29;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_20.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp float t8;
highp uint tu8;
highp vec2 t18;
highp float t25;
bool tb25;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t8 = in_COLOR0.w * 255.0;
    tu8 = uint(t8);
    t0.x = t0.x * _TreeSize[int(tu8) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.www + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t25 = dot(t2.xyz, t2.xyz);
    t25 = inversesqrt(t25);
    t2.xyz = vec3(t25) * t2.xyz;
    vs_TEXCOORD0.x = t2.z;
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t3.xyz = t3.xyz + t4.xyz;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t3.xyz = t3.xyz + t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = inversesqrt(t25);
    t3.xyz = vec3(t25) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.zxy;
    t10_5.xyz = t3.yzx * t2.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t3.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.z = t3.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD2.z = t3.z;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD3 = _Color;
    t25 = in_TEXCOORD1.z + _CameraXZAngle;
    t25 = t25 * _TreeInfo[int(tu8) + 0].y + 0.5;
    t25 = floor(t25);
    t25 = t25 / _TreeInfo[int(tu8) + 0].x;
    tb2 = t25>=(-t25);
    t25 = fract(abs(t25));
    t25 = (tb2) ? t25 : (-t25);
    t8 = t25 * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    tu8 = uint(t8);
    tb25 = _ImageTexCoords[int(tu8) + 0].w<0.0;
    t2.xy = (-_ImageTexCoords[int(tu8) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu8) + 0].xy;
    t18.xy = _ImageTexCoords[int(tu8) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu8) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb25)) ? t2.xy : t18.xy;
    vs_TEXCOORD4.z = 0.0;
    t16_6.x = t3.y * t3.y;
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    t16_2 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t3.w = 1.0;
    t16_7.x = dot(unity_SHAr, t3);
    t16_7.y = dot(unity_SHAg, t3);
    t16_7.z = dot(unity_SHAb, t3);
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    t2 = (-t1.yyyy) + unity_4LightPosY0;
    t4 = t3.yyyy * t2;
    t2 = t2 * t2;
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    t4 = t5 * t3.xxxx + t4;
    t3 = t1 * t3.zzzz + t4;
    t2 = t5 * t5 + t2;
    t1 = t1 * t1 + t2;
    t2 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t2 = t2 * t3;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t1 = t1 * t2;
    t3.xyz = t1.yyy * unity_LightColor[1].xyz;
    t3.xyz = unity_LightColor[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t3.xyz;
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    t1.xyz = t1.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t1.xyz;
    t1 = t0.zzzz * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.wwww + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_7;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    vec3 txVec130 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec130, 0.0);
    t16_7 = (-_LightShadowData.x) + 1.0;
    t16_3.x = t16_3.x * t16_7 + _LightShadowData.x;
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
  ZWrite Off
  Cull Off
  Blend One One
  GpuProgramID 502162
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_10.xz;
  billboardPos_6.y = (tmpvar_10.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * _glesMultiTexCoord1.y));
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  highp float tmpvar_11;
  tmpvar_11 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_12;
  tmpvar_12 = (fract(abs(tmpvar_11)) * tmpvar_8.x);
  highp float tmpvar_13;
  if ((tmpvar_11 >= 0.0)) {
    tmpvar_13 = tmpvar_12;
  } else {
    tmpvar_13 = -(tmpvar_12);
  };
  highp vec4 tmpvar_14;
  tmpvar_14 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_13))];
  if ((tmpvar_14.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_14.xy - (tmpvar_14.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_14.xy + (tmpvar_14.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * _BillboardNormal.x)
   + 
    (v_16.xyz * _BillboardNormal.y)
  ) + (v_17.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_18;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
highp float t3;
highp uint tu3;
bool tb3;
highp vec2 t6;
bool tb6;
highp float t10;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t3 = in_COLOR0.w * 255.0;
    tu3 = uint(t3);
    t0.x = t0.x * _TreeSize[int(tu3) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu3) + 0].y + _TreeSize[int(tu3) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD1.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu3) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].x + _TreeInfo[int(tu3) + 0].z;
    tu0 = uint(t0.x);
    tb3 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb3)) ? t6.xy : t1.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_10.xz;
  billboardPos_6.y = (tmpvar_10.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * _glesMultiTexCoord1.y));
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  highp float tmpvar_11;
  tmpvar_11 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_12;
  tmpvar_12 = (fract(abs(tmpvar_11)) * tmpvar_8.x);
  highp float tmpvar_13;
  if ((tmpvar_11 >= 0.0)) {
    tmpvar_13 = tmpvar_12;
  } else {
    tmpvar_13 = -(tmpvar_12);
  };
  highp vec4 tmpvar_14;
  tmpvar_14 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_13))];
  if ((tmpvar_14.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_14.xy - (tmpvar_14.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_14.xy + (tmpvar_14.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * _BillboardNormal.x)
   + 
    (v_16.xyz * _BillboardNormal.y)
  ) + (v_17.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_18;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
highp float t3;
highp uint tu3;
bool tb3;
highp vec2 t6;
bool tb6;
highp float t10;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t3 = in_COLOR0.w * 255.0;
    tu3 = uint(t3);
    t0.x = t0.x * _TreeSize[int(tu3) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu3) + 0].y + _TreeSize[int(tu3) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD1.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu3) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].x + _TreeInfo[int(tu3) + 0].z;
    tu0 = uint(t0.x);
    tb3 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb3)) ? t6.xy : t1.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_11 = max(t16_11, 0.0);
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_10.xz;
  billboardPos_6.y = (tmpvar_10.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * _glesMultiTexCoord1.y));
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  highp float tmpvar_11;
  tmpvar_11 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_12;
  tmpvar_12 = (fract(abs(tmpvar_11)) * tmpvar_8.x);
  highp float tmpvar_13;
  if ((tmpvar_11 >= 0.0)) {
    tmpvar_13 = tmpvar_12;
  } else {
    tmpvar_13 = -(tmpvar_12);
  };
  highp vec4 tmpvar_14;
  tmpvar_14 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_13))];
  if ((tmpvar_14.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_14.xy - (tmpvar_14.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_14.xy + (tmpvar_14.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * _BillboardNormal.x)
   + 
    (v_16.xyz * _BillboardNormal.y)
  ) + (v_17.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_18;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
highp float t3;
highp uint tu3;
bool tb3;
highp vec2 t6;
bool tb6;
highp float t10;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t3 = in_COLOR0.w * 255.0;
    tu3 = uint(t3);
    t0.x = t0.x * _TreeSize[int(tu3) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu3) + 0].y + _TreeSize[int(tu3) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD1.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu3) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].x + _TreeInfo[int(tu3) + 0].z;
    tu0 = uint(t0.x);
    tb3 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb3)) ? t6.xy : t1.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb9 = 0.0<t16_0.z;
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    t10_1 = (tb9) ? 1.0 : 0.0;
    t10_1 = t10_4 * t10_1;
    t10_1 = t10_14 * t10_1;
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t4.xyz = vec3(t19) * t4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_10.xz;
  billboardPos_6.y = (tmpvar_10.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * _glesMultiTexCoord1.y));
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  highp float tmpvar_11;
  tmpvar_11 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_12;
  tmpvar_12 = (fract(abs(tmpvar_11)) * tmpvar_8.x);
  highp float tmpvar_13;
  if ((tmpvar_11 >= 0.0)) {
    tmpvar_13 = tmpvar_12;
  } else {
    tmpvar_13 = -(tmpvar_12);
  };
  highp vec4 tmpvar_14;
  tmpvar_14 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_13))];
  if ((tmpvar_14.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_14.xy - (tmpvar_14.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_14.xy + (tmpvar_14.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * _BillboardNormal.x)
   + 
    (v_16.xyz * _BillboardNormal.y)
  ) + (v_17.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_18;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
highp float t3;
highp uint tu3;
bool tb3;
highp vec2 t6;
bool tb6;
highp float t10;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t3 = in_COLOR0.w * 255.0;
    tu3 = uint(t3);
    t0.x = t0.x * _TreeSize[int(tu3) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu3) + 0].y + _TreeSize[int(tu3) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD1.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu3) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].x + _TreeInfo[int(tu3) + 0].z;
    tu0 = uint(t0.x);
    tb3 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb3)) ? t6.xy : t1.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_4 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_10.xz;
  billboardPos_6.y = (tmpvar_10.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * _glesMultiTexCoord1.y));
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  highp float tmpvar_11;
  tmpvar_11 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_12;
  tmpvar_12 = (fract(abs(tmpvar_11)) * tmpvar_8.x);
  highp float tmpvar_13;
  if ((tmpvar_11 >= 0.0)) {
    tmpvar_13 = tmpvar_12;
  } else {
    tmpvar_13 = -(tmpvar_12);
  };
  highp vec4 tmpvar_14;
  tmpvar_14 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_13))];
  if ((tmpvar_14.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_14.xy - (tmpvar_14.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_14.xy + (tmpvar_14.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * _BillboardNormal.x)
   + 
    (v_16.xyz * _BillboardNormal.y)
  ) + (v_17.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_18;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
highp float t3;
highp uint tu3;
bool tb3;
highp vec2 t6;
bool tb6;
highp float t10;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t3 = in_COLOR0.w * 255.0;
    tu3 = uint(t3);
    t0.x = t0.x * _TreeSize[int(tu3) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu3) + 0].y + _TreeSize[int(tu3) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD1.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu3) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].x + _TreeInfo[int(tu3) + 0].z;
    tu0 = uint(t0.x);
    tb3 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb3)) ? t6.xy : t1.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * _BillboardNormal.x)
   + 
    (v_17.xyz * _BillboardNormal.y)
  ) + (v_18.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_19;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_20 * _BillboardTangent));
  worldTangent_2 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_24;
  tmpvar_24.x = worldTangent_2.x;
  tmpvar_24.y = tmpvar_23.x;
  tmpvar_24.z = worldNormal_3.x;
  lowp vec3 tmpvar_25;
  tmpvar_25.x = worldTangent_2.y;
  tmpvar_25.y = tmpvar_23.y;
  tmpvar_25.z = worldNormal_3.y;
  lowp vec3 tmpvar_26;
  tmpvar_26.x = worldTangent_2.z;
  tmpvar_26.y = tmpvar_23.z;
  tmpvar_26.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_24;
  xlv_TEXCOORD1 = tmpvar_25;
  xlv_TEXCOORD2 = tmpvar_26;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
lowp vec3 t10_3;
highp float t4;
highp uint tu4;
bool tb4;
highp vec2 t8;
bool tb8;
highp float t13;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t4 = in_COLOR0.w * 255.0;
    tu4 = uint(t4);
    t0.x = t0.x * _TreeSize[int(tu4) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu4) + 0].y + _TreeSize[int(tu4) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * t2.xyz;
    t10_3.xyz = t1.xyz * t2.xyz;
    t10_3.xyz = t1.zxy * t2.yzx + (-t10_3.xyz);
    t10_3.xyz = t10_3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_3.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.y = t10_3.y;
    vs_TEXCOORD2.y = t10_3.z;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD3.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu4) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].x + _TreeInfo[int(tu4) + 0].z;
    tu0 = uint(t0.x);
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb4)) ? t8.xy : t1.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * _BillboardNormal.x)
   + 
    (v_17.xyz * _BillboardNormal.y)
  ) + (v_18.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_19;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_20 * _BillboardTangent));
  worldTangent_2 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_24;
  tmpvar_24.x = worldTangent_2.x;
  tmpvar_24.y = tmpvar_23.x;
  tmpvar_24.z = worldNormal_3.x;
  lowp vec3 tmpvar_25;
  tmpvar_25.x = worldTangent_2.y;
  tmpvar_25.y = tmpvar_23.y;
  tmpvar_25.z = worldNormal_3.y;
  lowp vec3 tmpvar_26;
  tmpvar_26.x = worldTangent_2.z;
  tmpvar_26.y = tmpvar_23.z;
  tmpvar_26.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_24;
  xlv_TEXCOORD1 = tmpvar_25;
  xlv_TEXCOORD2 = tmpvar_26;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
lowp vec3 t10_3;
highp float t4;
highp uint tu4;
bool tb4;
highp vec2 t8;
bool tb8;
highp float t13;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t4 = in_COLOR0.w * 255.0;
    tu4 = uint(t4);
    t0.x = t0.x * _TreeSize[int(tu4) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu4) + 0].y + _TreeSize[int(tu4) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * t2.xyz;
    t10_3.xyz = t1.xyz * t2.xyz;
    t10_3.xyz = t1.zxy * t2.yzx + (-t10_3.xyz);
    t10_3.xyz = t10_3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_3.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.y = t10_3.y;
    vs_TEXCOORD2.y = t10_3.z;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD3.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu4) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].x + _TreeInfo[int(tu4) + 0].z;
    tu0 = uint(t0.x);
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb4)) ? t8.xy : t1.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_3.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_3.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_3.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_14 = dot(t10_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * _BillboardNormal.x)
   + 
    (v_17.xyz * _BillboardNormal.y)
  ) + (v_18.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_19;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_20 * _BillboardTangent));
  worldTangent_2 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_24;
  tmpvar_24.x = worldTangent_2.x;
  tmpvar_24.y = tmpvar_23.x;
  tmpvar_24.z = worldNormal_3.x;
  lowp vec3 tmpvar_25;
  tmpvar_25.x = worldTangent_2.y;
  tmpvar_25.y = tmpvar_23.y;
  tmpvar_25.z = worldNormal_3.y;
  lowp vec3 tmpvar_26;
  tmpvar_26.x = worldTangent_2.z;
  tmpvar_26.y = tmpvar_23.z;
  tmpvar_26.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_24;
  xlv_TEXCOORD1 = tmpvar_25;
  xlv_TEXCOORD2 = tmpvar_26;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_6.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_5 = tmpvar_23;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
lowp vec3 t10_3;
highp float t4;
highp uint tu4;
bool tb4;
highp vec2 t8;
bool tb8;
highp float t13;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t4 = in_COLOR0.w * 255.0;
    tu4 = uint(t4);
    t0.x = t0.x * _TreeSize[int(tu4) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu4) + 0].y + _TreeSize[int(tu4) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * t2.xyz;
    t10_3.xyz = t1.xyz * t2.xyz;
    t10_3.xyz = t1.zxy * t2.yzx + (-t10_3.xyz);
    t10_3.xyz = t10_3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_3.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.y = t10_3.y;
    vs_TEXCOORD2.y = t10_3.z;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD3.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu4) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].x + _TreeInfo[int(tu4) + 0].z;
    tu0 = uint(t0.x);
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb4)) ? t8.xy : t1.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
bool tb11;
mediump float t16_18;
lowp float t10_18;
mediump float t16_23;
highp float t25;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb11 = 0.0<t16_0.z;
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    t10_1.x = (tb11) ? 1.0 : 0.0;
    t10_1.x = t10_4 * t10_1.x;
    t10_1.x = t10_18 * t10_1.x;
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_23 = dot(t10_6.xyz, t4.xyz);
    t16_23 = max(t16_23, 0.0);
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * _BillboardNormal.x)
   + 
    (v_17.xyz * _BillboardNormal.y)
  ) + (v_18.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_19;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_20 * _BillboardTangent));
  worldTangent_2 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_24;
  tmpvar_24.x = worldTangent_2.x;
  tmpvar_24.y = tmpvar_23.x;
  tmpvar_24.z = worldNormal_3.x;
  lowp vec3 tmpvar_25;
  tmpvar_25.x = worldTangent_2.y;
  tmpvar_25.y = tmpvar_23.y;
  tmpvar_25.z = worldNormal_3.y;
  lowp vec3 tmpvar_26;
  tmpvar_26.x = worldTangent_2.z;
  tmpvar_26.y = tmpvar_23.z;
  tmpvar_26.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_24;
  xlv_TEXCOORD1 = tmpvar_25;
  xlv_TEXCOORD2 = tmpvar_26;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
lowp vec3 t10_3;
highp float t4;
highp uint tu4;
bool tb4;
highp vec2 t8;
bool tb8;
highp float t13;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t4 = in_COLOR0.w * 255.0;
    tu4 = uint(t4);
    t0.x = t0.x * _TreeSize[int(tu4) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu4) + 0].y + _TreeSize[int(tu4) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * t2.xyz;
    t10_3.xyz = t1.xyz * t2.xyz;
    t10_3.xyz = t1.zxy * t2.yzx + (-t10_3.xyz);
    t10_3.xyz = t10_3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_3.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.y = t10_3.y;
    vs_TEXCOORD2.y = t10_3.z;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD3.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu4) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].x + _TreeInfo[int(tu4) + 0].z;
    tu0 = uint(t0.x);
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb4)) ? t8.xy : t1.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_6 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * _BillboardNormal.x)
   + 
    (v_17.xyz * _BillboardNormal.y)
  ) + (v_18.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_19;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_20 * _BillboardTangent));
  worldTangent_2 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_24;
  tmpvar_24.x = worldTangent_2.x;
  tmpvar_24.y = tmpvar_23.x;
  tmpvar_24.z = worldNormal_3.x;
  lowp vec3 tmpvar_25;
  tmpvar_25.x = worldTangent_2.y;
  tmpvar_25.y = tmpvar_23.y;
  tmpvar_25.z = worldNormal_3.y;
  lowp vec3 tmpvar_26;
  tmpvar_26.x = worldTangent_2.z;
  tmpvar_26.y = tmpvar_23.z;
  tmpvar_26.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_24;
  xlv_TEXCOORD1 = tmpvar_25;
  xlv_TEXCOORD2 = tmpvar_26;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
lowp vec3 t10_3;
highp float t4;
highp uint tu4;
bool tb4;
highp vec2 t8;
bool tb8;
highp float t13;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t4 = in_COLOR0.w * 255.0;
    tu4 = uint(t4);
    t0.x = t0.x * _TreeSize[int(tu4) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu4) + 0].y + _TreeSize[int(tu4) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t13 = dot(t2.xyz, t2.xyz);
    t13 = inversesqrt(t13);
    t2.xyz = vec3(t13) * t2.xyz;
    t10_3.xyz = t1.xyz * t2.xyz;
    t10_3.xyz = t1.zxy * t2.yzx + (-t10_3.xyz);
    t10_3.xyz = t10_3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_3.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.y = t10_3.y;
    vs_TEXCOORD2.y = t10_3.z;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD3.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu4) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].x + _TreeInfo[int(tu4) + 0].z;
    tu0 = uint(t0.x);
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb4)) ? t8.xy : t1.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 559326
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_10.xz;
  billboardPos_6.y = (tmpvar_10.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * _glesMultiTexCoord1.y));
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  highp float tmpvar_11;
  tmpvar_11 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_12;
  tmpvar_12 = (fract(abs(tmpvar_11)) * tmpvar_8.x);
  highp float tmpvar_13;
  if ((tmpvar_11 >= 0.0)) {
    tmpvar_13 = tmpvar_12;
  } else {
    tmpvar_13 = -(tmpvar_12);
  };
  highp vec4 tmpvar_14;
  tmpvar_14 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_13))];
  if ((tmpvar_14.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_14.xy - (tmpvar_14.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_14.xy + (tmpvar_14.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * _BillboardNormal.x)
   + 
    (v_16.xyz * _BillboardNormal.y)
  ) + (v_17.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_18;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
highp float t3;
highp uint tu3;
bool tb3;
highp vec2 t6;
bool tb6;
highp float t10;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t3 = in_COLOR0.w * 255.0;
    tu3 = uint(t3);
    t0.x = t0.x * _TreeSize[int(tu3) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu3) + 0].y + _TreeSize[int(tu3) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    vs_TEXCOORD1.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu3) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu3) + 0].x + _TreeInfo[int(tu3) + 0].z;
    tu0 = uint(t0.x);
    tb3 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb3)) ? t6.xy : t1.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = _Shininess;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * _BillboardNormal.x)
   + 
    (v_18.xyz * _BillboardNormal.y)
  ) + (v_19.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_20;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_21 * _BillboardTangent));
  worldTangent_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_25;
  tmpvar_25.x = worldTangent_2.x;
  tmpvar_25.y = tmpvar_24.x;
  tmpvar_25.z = worldNormal_3.x;
  tmpvar_25.w = tmpvar_16.x;
  highp vec4 tmpvar_26;
  tmpvar_26.x = worldTangent_2.y;
  tmpvar_26.y = tmpvar_24.y;
  tmpvar_26.z = worldNormal_3.y;
  tmpvar_26.w = tmpvar_16.y;
  highp vec4 tmpvar_27;
  tmpvar_27.x = worldTangent_2.z;
  tmpvar_27.y = tmpvar_24.z;
  tmpvar_27.z = worldNormal_3.z;
  tmpvar_27.w = tmpvar_16.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_26;
  xlv_TEXCOORD2 = tmpvar_27;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD0.xyz, tmpvar_7);
  worldN_2.x = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD1.xyz, tmpvar_7);
  worldN_2.y = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD2.xyz, tmpvar_7);
  worldN_2.z = tmpvar_10;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec3 t2;
lowp vec3 t10_3;
highp float t4;
highp uint tu4;
bool tb4;
highp vec2 t8;
bool tb8;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t4 = in_COLOR0.w * 255.0;
    tu4 = uint(t4);
    t0.x = t0.x * _TreeSize[int(tu4) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu4) + 0].y + _TreeSize[int(tu4) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.zzz * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t1.xyz;
    t0.xzw = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t0.x;
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t2.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t2.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t2.xyz;
    t2.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t2.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t2.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t2.xyz;
    t0.x = dot(t1.xyz, t1.xyz);
    t0.x = inversesqrt(t0.x);
    t1.xyz = t0.xxx * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t0.x = dot(t2.xyz, t2.xyz);
    t0.x = inversesqrt(t0.x);
    t2.xyz = t0.xxx * t2.xyz;
    t10_3.xyz = t1.xyz * t2.xyz;
    t10_3.xyz = t1.zxy * t2.yzx + (-t10_3.xyz);
    t10_3.xyz = t10_3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_3.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.y = t10_3.y;
    vs_TEXCOORD2.y = t10_3.z;
    vs_TEXCOORD1.w = t0.z;
    vs_TEXCOORD2.w = t0.w;
    vs_TEXCOORD3 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu4) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu4) + 0].x + _TreeInfo[int(tu4) + 0].z;
    tu0 = uint(t0.x);
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb4)) ? t8.xy : t1.xy;
    vs_TEXCOORD4.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    SV_Target0.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = _Shininess;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
  ZWrite Off
  Cull Off
  GpuProgramID 640180
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_2 = _Color;
  tmpvar_1 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_1.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, normal_24);
  x1_26.y = dot (unity_SHAg, normal_24);
  x1_26.z = dot (unity_SHAb, normal_24);
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x2_25.x = dot (unity_SHBr, tmpvar_27);
  x2_25.y = dot (unity_SHBg, tmpvar_27);
  x2_25.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_23 = ((x2_25 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )) + x1_26);
  tmpvar_4 = tmpvar_23;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_16;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t5;
highp uint tu5;
bool tb5;
highp vec2 t10;
bool tb10;
highp float t15;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t5 = in_COLOR0.w * 255.0;
    tu5 = uint(t5);
    t0.x = t0.x * _TreeSize[int(tu5) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu5) + 0].y + _TreeSize[int(tu5) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    t1 = t1 + glstate_matrix_mvp[3];
    gl_Position = t1;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD1 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu5) + 0].x;
    tb10 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb10) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].x + _TreeInfo[int(tu5) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb5)) ? t10.xy : t2.xy;
    vs_TEXCOORD2.z = 0.0;
    t0.x = t1.y * _ProjectionParams.x;
    t0.w = t0.x * 0.5;
    t0.xz = t1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.zw = t1.zw;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t0.xyz = t0.xyz + t1.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    t16_3.x = t0.y * t0.y;
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    t16_1 = t0.yzzx * t0.xyzz;
    t16_4.x = dot(unity_SHBr, t16_1);
    t16_4.y = dot(unity_SHBg, t16_1);
    t16_4.z = dot(unity_SHBb, t16_1);
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_3.xyz = t16_3.xyz + t16_4.xyz;
    vs_TEXCOORD5.xyz = t16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_2 = _Color;
  tmpvar_1 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_1.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, normal_24);
  x1_26.y = dot (unity_SHAg, normal_24);
  x1_26.z = dot (unity_SHAb, normal_24);
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x2_25.x = dot (unity_SHBr, tmpvar_27);
  x2_25.y = dot (unity_SHBg, tmpvar_27);
  x2_25.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_23 = ((x2_25 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )) + x1_26);
  tmpvar_4 = tmpvar_23;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_16;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t5;
highp uint tu5;
bool tb5;
highp vec2 t10;
bool tb10;
highp float t15;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t5 = in_COLOR0.w * 255.0;
    tu5 = uint(t5);
    t0.x = t0.x * _TreeSize[int(tu5) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu5) + 0].y + _TreeSize[int(tu5) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    t1 = t1 + glstate_matrix_mvp[3];
    gl_Position = t1;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD1 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu5) + 0].x;
    tb10 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb10) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].x + _TreeInfo[int(tu5) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb5)) ? t10.xy : t2.xy;
    vs_TEXCOORD2.z = 0.0;
    t0.x = t1.y * _ProjectionParams.x;
    t0.w = t0.x * 0.5;
    t0.xz = t1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.zw = t1.zw;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t0.xyz = t0.xyz + t1.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    t16_3.x = t0.y * t0.y;
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    t16_1 = t0.yzzx * t0.xyzz;
    t16_4.x = dot(unity_SHBr, t16_1);
    t16_4.y = dot(unity_SHBg, t16_1);
    t16_4.z = dot(unity_SHBb, t16_1);
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_3.xyz = t16_3.xyz + t16_4.xyz;
    vs_TEXCOORD5.xyz = t16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_2 = _Color;
  tmpvar_1 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_1.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, normal_24);
  x1_26.y = dot (unity_SHAg, normal_24);
  x1_26.z = dot (unity_SHAb, normal_24);
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x2_25.x = dot (unity_SHBr, tmpvar_27);
  x2_25.y = dot (unity_SHBg, tmpvar_27);
  x2_25.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_23 = ((x2_25 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )) + x1_26);
  tmpvar_4 = tmpvar_23;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_16;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t5;
highp uint tu5;
bool tb5;
highp vec2 t10;
bool tb10;
highp float t15;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t5 = in_COLOR0.w * 255.0;
    tu5 = uint(t5);
    t0.x = t0.x * _TreeSize[int(tu5) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu5) + 0].y + _TreeSize[int(tu5) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    t1 = t1 + glstate_matrix_mvp[3];
    gl_Position = t1;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD1 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu5) + 0].x;
    tb10 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb10) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].x + _TreeInfo[int(tu5) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb5)) ? t10.xy : t2.xy;
    vs_TEXCOORD2.z = 0.0;
    t0.x = t1.y * _ProjectionParams.x;
    t0.w = t0.x * 0.5;
    t0.xz = t1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.zw = t1.zw;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t0.xyz = t0.xyz + t1.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    t16_3.x = t0.y * t0.y;
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    t16_1 = t0.yzzx * t0.xyzz;
    t16_4.x = dot(unity_SHBr, t16_1);
    t16_4.y = dot(unity_SHBg, t16_1);
    t16_4.z = dot(unity_SHBb, t16_1);
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_3.xyz = t16_3.xyz + t16_4.xyz;
    vs_TEXCOORD5.xyz = t16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_11.xz;
  billboardPos_7.y = (tmpvar_11.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  highp float tmpvar_12;
  tmpvar_12 = (floor((
    ((_CameraXZAngle + _glesMultiTexCoord1.z) * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_13;
  tmpvar_13 = (fract(abs(tmpvar_12)) * tmpvar_9.x);
  highp float tmpvar_14;
  if ((tmpvar_12 >= 0.0)) {
    tmpvar_14 = tmpvar_13;
  } else {
    tmpvar_14 = -(tmpvar_13);
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_14))];
  if ((tmpvar_15.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_15.xy - (tmpvar_15.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_15.xy + (tmpvar_15.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_2 = _Color;
  tmpvar_1 = (glstate_matrix_mvp * tmpvar_5);
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_1.zw;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_23;
  mediump vec4 normal_24;
  normal_24 = tmpvar_22;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, normal_24);
  x1_26.y = dot (unity_SHAg, normal_24);
  x1_26.z = dot (unity_SHAb, normal_24);
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x2_25.x = dot (unity_SHBr, tmpvar_27);
  x2_25.y = dot (unity_SHBg, tmpvar_27);
  x2_25.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_23 = ((x2_25 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )) + x1_26);
  tmpvar_4 = tmpvar_23;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_16;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t5;
highp uint tu5;
bool tb5;
highp vec2 t10;
bool tb10;
highp float t15;
void main()
{
    t0.x = in_TEXCOORD0.x + -0.5;
    t5 = in_COLOR0.w * 255.0;
    tu5 = uint(t5);
    t0.x = t0.x * _TreeSize[int(tu5) + 0].x;
    t0.x = t0.x * in_TEXCOORD1.x;
    t1.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu5) + 0].y + _TreeSize[int(tu5) + 0].z;
    t1.w = t0.x * in_TEXCOORD1.y + t1.y;
    t0.xzw = t1.xwz + in_POSITION0.xyz;
    t1 = t0.zzzz * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.wwww + t1;
    t1 = t1 + glstate_matrix_mvp[3];
    gl_Position = t1;
    t2.xyz = t0.zzz * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t0.xxx + t2.xyz;
    t0.xzw = _Object2World[2].xyz * t0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t0.xzw + _Object2World[3].xyz;
    vs_TEXCOORD1 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu5) + 0].x;
    tb10 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb10) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu5) + 0].x + _TreeInfo[int(tu5) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD2.xy = (bool(tb5)) ? t10.xy : t2.xy;
    vs_TEXCOORD2.z = 0.0;
    t0.x = t1.y * _ProjectionParams.x;
    t0.w = t0.x * 0.5;
    t0.xz = t1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.zw = t1.zw;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t0.xyz = t0.xyz + t1.xyz;
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t0.xyz = t0.xyz + t1.xyz;
    t15 = dot(t0.xyz, t0.xyz);
    t15 = inversesqrt(t15);
    t0.xyz = vec3(t15) * t0.xyz;
    t16_3.x = t0.y * t0.y;
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    t16_1 = t0.yzzx * t0.xyzz;
    t16_4.x = dot(unity_SHBr, t16_1);
    t16_4.y = dot(unity_SHBg, t16_1);
    t16_4.z = dot(unity_SHBb, t16_1);
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_3.xyz = t16_3.xyz + t16_4.xyz;
    vs_TEXCOORD5.xyz = t16_3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT