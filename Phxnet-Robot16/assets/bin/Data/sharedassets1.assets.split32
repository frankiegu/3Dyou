MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = dot(t4.xyz, t4.xyz);
    t52 = sqrt(t52);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t5.xyz, t5.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t5.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2>=3.0;
    if(tb52){
        tb52 = t16_2==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t3.xz = t2.xw * vec2(0.5, 0.5);
    t0.x = t2.y * _ProjectionParams.x;
    t3.w = t0.x * 0.5;
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t0.xyw = t34.yyy * t5.xyz;
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    t51 = dot(t0.xyz, t0.xyz);
    t51 = inversesqrt(t51);
    t0.xyz = vec3(t51) * t0.xyz;
    t0.w = 1.0;
    t16_15.x = dot(unity_SHAr, t0);
    t16_15.y = dot(unity_SHAg, t0);
    t16_15.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_16.x = dot(unity_SHBr, t16_3);
    t16_16.y = dot(unity_SHBg, t16_3);
    t16_16.z = dot(unity_SHBb, t16_3);
    t16_66 = t0.y * t0.y;
    t16_66 = t0.x * t0.x + (-t16_66);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_15.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  finalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_19;
    tmpvar_19 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_15 = (finalPosition_15 * tmpvar_20);
    finalPosition_15 = (normalize(finalPosition_15) * tmpvar_19);
  };
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_16 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = finalPosition_15;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (finalPosition_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * rotatedWindVector_14.zxy) - (tmpvar_31.zxy * rotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (rotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_12 = vDirection_25;
    finalPosition_15 = vPos_24;
  };
  finalPosition_15 = (finalPosition_15 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_65;
  tmpvar_65.x = _Object2World[3].x;
  tmpvar_65.y = _Object2World[3].y;
  tmpvar_65.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = finalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = finalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_65.x + tmpvar_65.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (finalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((rotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_65.x + tmpvar_65.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    finalPosition_15 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = finalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_65.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_65.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    finalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec4 tmpvar_105;
  tmpvar_105.w = 1.0;
  tmpvar_105.xyz = normalize(((
    (v_102.xyz * tmpvar_12.x)
   + 
    (v_103.xyz * tmpvar_12.y)
  ) + (v_104.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_106;
  mediump vec4 normal_107;
  normal_107 = tmpvar_105;
  mediump vec3 x2_108;
  mediump vec3 x1_109;
  x1_109.x = dot (unity_SHAr, normal_107);
  x1_109.y = dot (unity_SHAg, normal_107);
  x1_109.z = dot (unity_SHAb, normal_107);
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_110);
  x2_108.y = dot (unity_SHBg, tmpvar_110);
  x2_108.z = dot (unity_SHBb, tmpvar_110);
  tmpvar_106 = ((x2_108 + (unity_SHC.xyz * 
    ((normal_107.x * normal_107.x) - (normal_107.y * normal_107.y))
  )) + x1_109);
  tmpvar_7 = tmpvar_106;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_99;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = dot(t4.xyz, t4.xyz);
    t52 = sqrt(t52);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t5.xyz, t5.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t5.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2>=3.0;
    if(tb52){
        tb52 = t16_2==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t3.xz = t2.xw * vec2(0.5, 0.5);
    t0.x = t2.y * _ProjectionParams.x;
    t3.w = t0.x * 0.5;
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t0.xyw = t34.yyy * t5.xyz;
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    t51 = dot(t0.xyz, t0.xyz);
    t51 = inversesqrt(t51);
    t0.xyz = vec3(t51) * t0.xyz;
    t0.w = 1.0;
    t16_15.x = dot(unity_SHAr, t0);
    t16_15.y = dot(unity_SHAg, t0);
    t16_15.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_16.x = dot(unity_SHBr, t16_3);
    t16_16.y = dot(unity_SHBg, t16_3);
    t16_16.z = dot(unity_SHBb, t16_3);
    t16_66 = t0.y * t0.y;
    t16_66 = t0.x * t0.x + (-t16_66);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_15.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  finalPosition_12 = tmpvar_1.xyz;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_12 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_16;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_16 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_58;
  mediump vec4 normal_59;
  normal_59 = tmpvar_57;
  mediump vec3 x2_60;
  mediump vec3 x1_61;
  x1_61.x = dot (unity_SHAr, normal_59);
  x1_61.y = dot (unity_SHAg, normal_59);
  x1_61.z = dot (unity_SHAb, normal_59);
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_62);
  x2_60.y = dot (unity_SHBg, tmpvar_62);
  x2_60.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_58 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + x1_61);
  tmpvar_6 = tmpvar_58;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_51;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_9;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_10;
  c_10.xyz = (tmpvar_5 * light_3.xyz);
  c_10.w = tmpvar_6;
  c_2.xyz = c_10.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb25 = t16_0>=3.0;
    if(tb25){
        tb25 = t16_0==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb26 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            t26 = (-t0.y) * t0.z + t5.x;
            t26 = t5.y * t26 + t5.w;
            t27 = (-t26) + t5.x;
            t26 = t5.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t0.x * t28;
            t26 = t26 * t27 + t28;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t9.x = t0.y * _ProjectionParams.x;
    t1.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.zw = t0.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
void main()
{
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_1.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_1.xyz = log2(t16_1.xyz);
    t0.xyz = (-t16_1.xyz) + vs_TEXCOORD5.xyz;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    t16_1.xyz = t0.xyz * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  finalPosition_12 = tmpvar_1.xyz;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_12 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_16;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_16 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_58;
  mediump vec4 normal_59;
  normal_59 = tmpvar_57;
  mediump vec3 x2_60;
  mediump vec3 x1_61;
  x1_61.x = dot (unity_SHAr, normal_59);
  x1_61.y = dot (unity_SHAg, normal_59);
  x1_61.z = dot (unity_SHAb, normal_59);
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_62);
  x2_60.y = dot (unity_SHBg, tmpvar_62);
  x2_60.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_58 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + x1_61);
  tmpvar_6 = tmpvar_58;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_51;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_10.w;
  light_3.xyz = (tmpvar_10.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb25 = t16_0>=3.0;
    if(tb25){
        tb25 = t16_0==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb26 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            t26 = (-t0.y) * t0.z + t5.x;
            t26 = t5.y * t26 + t5.w;
            t27 = (-t26) + t5.x;
            t26 = t5.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t0.x * t28;
            t26 = t26 * t27 + t28;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t9.x = t0.y * _ProjectionParams.x;
    t1.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.zw = t0.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
void main()
{
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_1.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    t16_1.xyz = t0.xyz * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  finalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_13 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_17;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_17 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_59;
  mediump vec4 normal_60;
  normal_60 = tmpvar_58;
  mediump vec3 x2_61;
  mediump vec3 x1_62;
  x1_62.x = dot (unity_SHAr, normal_60);
  x1_62.y = dot (unity_SHAg, normal_60);
  x1_62.z = dot (unity_SHAb, normal_60);
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_63);
  x2_61.y = dot (unity_SHBg, tmpvar_63);
  x2_61.z = dot (unity_SHBb, tmpvar_63);
  tmpvar_59 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + x1_62);
  tmpvar_6 = tmpvar_59;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_52;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_10 = t16_2.x / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_2.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_2.xyz = log2(t16_2.xyz);
    t0.xyz = (-t16_2.xyz) + vs_TEXCOORD5.xyz;
    t16_1.xyz = t0.xyz * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  finalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_13 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_17;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_17 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_59;
  mediump vec4 normal_60;
  normal_60 = tmpvar_58;
  mediump vec3 x2_61;
  mediump vec3 x1_62;
  x1_62.x = dot (unity_SHAr, normal_60);
  x1_62.y = dot (unity_SHAg, normal_60);
  x1_62.z = dot (unity_SHAb, normal_60);
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_63);
  x2_61.y = dot (unity_SHBg, tmpvar_63);
  x2_61.z = dot (unity_SHBb, tmpvar_63);
  tmpvar_59 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + x1_62);
  tmpvar_6 = tmpvar_59;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_52;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_10 = t16_2.x / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_2.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t16_1.xyz = t0.xyz * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  finalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_13 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_17;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_17 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_59;
  mediump vec4 normal_60;
  normal_60 = tmpvar_58;
  mediump vec3 x2_61;
  mediump vec3 x1_62;
  x1_62.x = dot (unity_SHAr, normal_60);
  x1_62.y = dot (unity_SHAg, normal_60);
  x1_62.z = dot (unity_SHAb, normal_60);
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_63);
  x2_61.y = dot (unity_SHBg, tmpvar_63);
  x2_61.z = dot (unity_SHBb, tmpvar_63);
  tmpvar_59 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + x1_62);
  tmpvar_6 = tmpvar_59;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_52;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_10 = t16_2.x / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_2.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_2.xyz = log2(t16_2.xyz);
    t0.xyz = (-t16_2.xyz) + vs_TEXCOORD5.xyz;
    t16_1.xyz = t0.xyz * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  finalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_13 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_17;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_17 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_59;
  mediump vec4 normal_60;
  normal_60 = tmpvar_58;
  mediump vec3 x2_61;
  mediump vec3 x1_62;
  x1_62.x = dot (unity_SHAr, normal_60);
  x1_62.y = dot (unity_SHAg, normal_60);
  x1_62.z = dot (unity_SHAb, normal_60);
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_63);
  x2_61.y = dot (unity_SHBg, tmpvar_63);
  x2_61.z = dot (unity_SHBb, tmpvar_63);
  tmpvar_59 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + x1_62);
  tmpvar_6 = tmpvar_59;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_52;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_10 = t16_2.x / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_2.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t16_1.xyz = t0.xyz * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  finalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_14 = tmpvar_18;
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (tmpvar_18 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * tmpvar_11.x)
   + 
    (v_61.xyz * tmpvar_11.y)
  ) + (v_62.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_7 = tmpvar_64;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_57;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb25 = t16_0==5.0;
    tb26 = in_TEXCOORD0.x<0.5;
    t26 = tb26 ? 0.75 : float(0.0);
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t26 = t3.x * _ST_WindFrondRipple.z + t26;
    t26 = t26 + 0.5;
    t26 = fract(t26);
    t26 = t26 * 2.0 + -1.0;
    t3.x = abs(t26) * abs(t26);
    t26 = -abs(t26) * 2.0 + 3.0;
    t26 = t3.x * t26 + -0.5;
    t26 = t26 * in_TEXCOORD2.y;
    t26 = dot(_ST_WindFrondRipple.yy, vec2(t26));
    t3.xyz = vec3(t26) * in_NORMAL0.xyz + t2.xyz;
    t2.xyz = (bool(tb25)) ? t3.xyz : t2.xyz;
    tb26 = t16_0>=3.0;
    if(tb26){
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb26 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            t26 = (-t0.y) * t0.z + t5.x;
            t26 = t5.y * t26 + t5.w;
            t27 = (-t26) + t5.x;
            t26 = t5.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t0.x * t28;
            t26 = t26 * t27 + t28;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t9.x = t0.y * _ProjectionParams.x;
    t1.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.zw = t0.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  finalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_14 = tmpvar_18;
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (tmpvar_18 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * tmpvar_11.x)
   + 
    (v_61.xyz * tmpvar_11.y)
  ) + (v_62.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_7 = tmpvar_64;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_57;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb25 = t16_0==5.0;
    tb26 = in_TEXCOORD0.x<0.5;
    t26 = tb26 ? 0.75 : float(0.0);
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t26 = t3.x * _ST_WindFrondRipple.z + t26;
    t26 = t26 + 0.5;
    t26 = fract(t26);
    t26 = t26 * 2.0 + -1.0;
    t3.x = abs(t26) * abs(t26);
    t26 = -abs(t26) * 2.0 + 3.0;
    t26 = t3.x * t26 + -0.5;
    t26 = t26 * in_TEXCOORD2.y;
    t26 = dot(_ST_WindFrondRipple.yy, vec2(t26));
    t3.xyz = vec3(t26) * in_NORMAL0.xyz + t2.xyz;
    t2.xyz = (bool(tb25)) ? t3.xyz : t2.xyz;
    tb26 = t16_0>=3.0;
    if(tb26){
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb26 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            t26 = (-t0.y) * t0.z + t5.x;
            t26 = t5.y * t26 + t5.w;
            t27 = (-t26) + t5.x;
            t26 = t5.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t0.x * t28;
            t26 = t26 * t27 + t28;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t9.x = t0.y * _ProjectionParams.x;
    t1.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.zw = t0.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  finalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_15 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * tmpvar_12.x)
   + 
    (v_62.xyz * tmpvar_12.y)
  ) + (v_63.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_7 = tmpvar_65;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_58;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2==5.0;
    tb30 = in_TEXCOORD0.x<0.5;
    t30 = tb30 ? 0.75 : float(0.0);
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    t30 = t30 + 0.5;
    t30 = fract(t30);
    t30 = t30 * 2.0 + -1.0;
    t4.x = abs(t30) * abs(t30);
    t30 = -abs(t30) * 2.0 + 3.0;
    t30 = t4.x * t30 + -0.5;
    t30 = t30 * in_TEXCOORD2.y;
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    tb30 = t16_2>=3.0;
    if(tb30){
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  finalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_15 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * tmpvar_12.x)
   + 
    (v_62.xyz * tmpvar_12.y)
  ) + (v_63.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_7 = tmpvar_65;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_58;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2==5.0;
    tb30 = in_TEXCOORD0.x<0.5;
    t30 = tb30 ? 0.75 : float(0.0);
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    t30 = t30 + 0.5;
    t30 = fract(t30);
    t30 = t30 * 2.0 + -1.0;
    t4.x = abs(t30) * abs(t30);
    t30 = -abs(t30) * 2.0 + 3.0;
    t30 = t4.x * t30 + -0.5;
    t30 = t30 * in_TEXCOORD2.y;
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    tb30 = t16_2>=3.0;
    if(tb30){
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  finalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_15 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * tmpvar_12.x)
   + 
    (v_62.xyz * tmpvar_12.y)
  ) + (v_63.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_7 = tmpvar_65;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_58;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2==5.0;
    tb30 = in_TEXCOORD0.x<0.5;
    t30 = tb30 ? 0.75 : float(0.0);
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    t30 = t30 + 0.5;
    t30 = fract(t30);
    t30 = t30 * 2.0 + -1.0;
    t4.x = abs(t30) * abs(t30);
    t30 = -abs(t30) * 2.0 + 3.0;
    t30 = t4.x * t30 + -0.5;
    t30 = t30 * in_TEXCOORD2.y;
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    tb30 = t16_2>=3.0;
    if(tb30){
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  finalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_15 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * tmpvar_12.x)
   + 
    (v_62.xyz * tmpvar_12.y)
  ) + (v_63.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_7 = tmpvar_65;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_58;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb28 = t16_2==5.0;
    tb30 = in_TEXCOORD0.x<0.5;
    t30 = tb30 ? 0.75 : float(0.0);
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    t30 = t30 + 0.5;
    t30 = fract(t30);
    t30 = t30 * 2.0 + -1.0;
    t4.x = abs(t30) * abs(t30);
    t30 = -abs(t30) * 2.0 + 3.0;
    t30 = t4.x * t30 + -0.5;
    t30 = t30 * in_TEXCOORD2.y;
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    tb30 = t16_2>=3.0;
    if(tb30){
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xz = t2.xw * vec2(0.5, 0.5);
    t9.x = t2.y * _ProjectionParams.x;
    t0.w = t9.x * 0.5;
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_3);
    t16_8.y = dot(unity_SHBg, t16_3);
    t16_8.z = dot(unity_SHBb, t16_3);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_14;
  highp vec3 rotatedWindVector_15;
  highp vec3 finalPosition_16;
  finalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_16 = (finalPosition_16 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_20;
    tmpvar_20 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_16 = (finalPosition_16 * tmpvar_21);
    finalPosition_16 = (normalize(finalPosition_16) * tmpvar_20);
  } else {
    highp vec3 tmpvar_22;
    tmpvar_22.x = tmpvar_4.w;
    tmpvar_22.y = tmpvar_5.x;
    tmpvar_22.z = tmpvar_5.y;
    finalPosition_16 = mix (finalPosition_16, tmpvar_22, unity_LODFade.xxx);
  };
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = finalPosition_16;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (finalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * rotatedWindVector_15.zxy) - (tmpvar_33.zxy * rotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (rotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    finalPosition_16 = vPos_26;
  };
  finalPosition_16 = (finalPosition_16 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_67;
  tmpvar_67.x = _Object2World[3].x;
  tmpvar_67.y = _Object2World[3].y;
  tmpvar_67.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = finalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = finalPosition_16;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_67.x + tmpvar_67.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (finalPosition_16 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((rotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_67.x + tmpvar_67.y));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    finalPosition_16 = vPos_68;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = finalPosition_16;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp float tmpvar_97;
    tmpvar_97 = (max ((finalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_67.x + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_67.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (finalPosition_16.xz + (rotatedWindVector_15.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    finalPosition_16 = vPos_93;
  };
  tmpvar_12.xyz = finalPosition_16;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = normalize(((
    (v_104.xyz * tmpvar_13.x)
   + 
    (v_105.xyz * tmpvar_13.y)
  ) + (v_106.xyz * tmpvar_13.z)));
  mediump vec3 tmpvar_108;
  mediump vec4 normal_109;
  normal_109 = tmpvar_107;
  mediump vec3 x2_110;
  mediump vec3 x1_111;
  x1_111.x = dot (unity_SHAr, normal_109);
  x1_111.y = dot (unity_SHAg, normal_109);
  x1_111.z = dot (unity_SHAb, normal_109);
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_112);
  x2_110.y = dot (unity_SHBg, tmpvar_112);
  x2_110.z = dot (unity_SHBb, tmpvar_112);
  tmpvar_108 = ((x2_110 + (unity_SHC.xyz * 
    ((normal_109.x * normal_109.x) - (normal_109.y * normal_109.y))
  )) + x1_111);
  tmpvar_9 = tmpvar_108;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_101;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t33 = dot(t2.xyz, t2.xyz);
    t33 = inversesqrt(t33);
    t2.xyz = vec3(t33) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb33 = in_COLOR0.w==0.0;
    t49 = in_TEXCOORD1.w + -1.0;
    t49 = unity_LODFade.x * t49 + 1.0;
    t4.xyz = vec3(t49) * t3.xyz;
    t49 = dot(t4.xyz, t4.xyz);
    t49 = sqrt(t49);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t50 = dot(t5.xyz, t5.xyz);
    t50 = inversesqrt(t50);
    t4.xyz = vec3(t50) * t5.xyz;
    t4.xyz = vec3(t49) * t4.xyz;
    t5.x = in_TEXCOORD1.w;
    t5.yz = in_TEXCOORD3.xy;
    t5.xyz = (-t3.xyz) + t5.xyz;
    t3.xyz = unity_LODFade.xxx * t5.xyz + t3.xyz;
    t3.xyz = (bool(tb33)) ? t4.xyz : t3.xyz;
    tb33 = t16_0<5.0;
    ti17 = int(uint(tb33) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti17))!=uint(0u)){
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb33 = t16_0==4.0;
        tb49 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t17.x = t17.x + t4.x;
        t17.x = t17.x + 0.5;
        t17.x = fract(t17.x);
        t17.x = t17.x * 2.0 + -1.0;
        t50 = abs(t17.x) * abs(t17.x);
        t17.x = -abs(t17.x) * 2.0 + 3.0;
        t17.x = t50 * t17.x + -0.5;
        t17.x = dot(t17.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t17.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb33){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t50 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t50);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t38.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t38.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t50 = dot(t3.xyz, t3.xyz);
            t50 = sqrt(t50);
            t51 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t51 = t51 * t5.x;
            t5.x = sin(t51);
            t7.x = cos(t51);
            t51 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t51);
            t23.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t23.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t23.y);
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            t11.z = t8.w * t4.z + t23.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t51 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t18.x = dot(t2.xyz, t4.xyz);
            t18.x = max(t18.x, -1.0);
            t18.x = min(t18.x, 1.0);
            t7.w = t18.x + t7.y;
            t51 = dot(t7.xzw, t7.xzw);
            t51 = inversesqrt(t51);
            t4.xyz = vec3(t51) * t7.zxw;
            t51 = -abs(t18.x) + 1.0;
            t51 = sqrt(t51);
            t5.x = abs(t18.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t18.x) + -0.212114394;
            t5.x = t5.x * abs(t18.x) + 1.57072878;
            t37 = t51 * t5.x;
            t37 = t37 * -2.0 + 3.14159274;
            tb18 = t18.x<(-t18.x);
            t18.x = tb18 ? t37 : float(0.0);
            t18.x = t5.x * t51 + t18.x;
            t51 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t17.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t49 = t5.z * t5.z;
            t49 = t49 * t5.x + 1.0;
            t49 = t49 * 0.5;
            t49 = clamp(t49, 0.0, 1.0);
            t49 = log2(t49);
            t33 = t49 * t17.y;
            t33 = exp2(t33);
            t49 = t5.y * t51;
            t49 = t18.x * t5.w + t49;
            t17.x = t17.x * t33 + t49;
            t17.x = t17.x * in_TEXCOORD2.x;
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            t17.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t33 = t4.x * t4.x;
            t8.w = t33 * t17.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t18.x = dot(t4.xyz, t4.xyz);
            t18.x = inversesqrt(t18.x);
            t4.xyz = t18.xxx * t4.xyz;
            t3.xyz = vec3(t50) * t4.xyz;
        } else {
            t17.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t17.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb18 = t16_0>=3.0;
    if(tb18){
        tb18 = t16_0==5.0;
        if(tb18){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t18.x = dot(t4.xyz, t4.xyz);
            t18.x = inversesqrt(t18.x);
            t4.xyz = t18.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t18.x = _Object2World[3].y + _Object2World[3].x;
            t18.x = t18.x + _ST_WindBranch.x;
            t0.x = t18.x + in_TEXCOORD0.w;
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t50 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t50 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb50 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            t50 = (-t0.y) * t0.z + t6.x;
            t50 = t6.y * t50 + t6.w;
            t51 = (-t50) + t6.x;
            t50 = t6.y * t51 + t50;
            t50 = t50 * _ST_WindBranchTwitch.x;
            t51 = (-_ST_WindVector.w) + 1.0;
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            t52 = t0.x * t52;
            t50 = t50 * t51 + t52;
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t50 = t50 * t51;
            t5.xyz = vec3(t50) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t18.x * 0.100000001 + in_TEXCOORD0.w;
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t18.x * 0.100000001 + in_TEXCOORD0.w;
            t18.xz = t6.xy + vec2(0.5, 0.5);
            t18.xz = fract(t18.xz);
            t18.xz = t18.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t18.xz) * abs(t18.xz);
            t18.xz = -abs(t18.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t18.xz = t6.xy * t18.xz + vec2(-0.5, -0.5);
            t18.xz = t18.xz + t18.xz;
            t18.xz = t18.xz * t18.xz;
            t18.x = t18.x * t18.z;
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            t50 = t0.w * _ST_WindVector.w;
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t18.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t18.x = _Object2World[3].y + _Object2World[3].x;
            t18.x = t18.x + _ST_WindBranch.x;
            t5.x = t18.x + in_TEXCOORD0.w;
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t18.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb18 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            t51 = (-t5.y) * t5.z + t18.x;
            t51 = t18.z * t51 + t0.w;
            t18.x = t18.x + (-t51);
            t18.x = t18.z * t18.x + t51;
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            t50 = (-_ST_WindVector.w) + 1.0;
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            t51 = t51 * t5.x;
            t18.x = t18.x * t50 + t51;
            t4.xyz = t18.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = sqrt(t18.x);
    t50 = float(1.0) / _ST_WindGlobal.z;
    t50 = (-t50) * 0.25 + t3.y;
    t50 = max(t50, 0.0);
    t50 = t50 * _ST_WindGlobal.z;
    tb51 = t50!=0.0;
    t4.x = log2(t50);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t50 = (tb51) ? t4.x : t50;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t36.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t36.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t51 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    t50 = t50 * t51;
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t18.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xz = t0.xw * vec2(0.5, 0.5);
    t1.x = t0.y * _ProjectionParams.x;
    t2.w = t1.x * 0.5;
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t17.yyy * t3.xyz;
    t1.xyz = t2.xyz * t17.xxx + t3.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    t49 = dot(t1.xyz, t1.xyz);
    t49 = inversesqrt(t49);
    t1.xyz = vec3(t49) * t1.xyz;
    t1.w = 1.0;
    t16_14.x = dot(unity_SHAr, t1);
    t16_14.y = dot(unity_SHAg, t1);
    t16_14.z = dot(unity_SHAb, t1);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_15.x = dot(unity_SHBr, t16_2);
    t16_15.y = dot(unity_SHBg, t16_2);
    t16_15.z = dot(unity_SHBb, t16_2);
    t16_62 = t1.y * t1.y;
    t16_62 = t1.x * t1.x + (-t16_62);
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.zw = t0.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_14.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_14;
  highp vec3 rotatedWindVector_15;
  highp vec3 finalPosition_16;
  finalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_16 = (finalPosition_16 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_20;
    tmpvar_20 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_16 = (finalPosition_16 * tmpvar_21);
    finalPosition_16 = (normalize(finalPosition_16) * tmpvar_20);
  } else {
    highp vec3 tmpvar_22;
    tmpvar_22.x = tmpvar_4.w;
    tmpvar_22.y = tmpvar_5.x;
    tmpvar_22.z = tmpvar_5.y;
    finalPosition_16 = mix (finalPosition_16, tmpvar_22, unity_LODFade.xxx);
  };
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = finalPosition_16;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (finalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * rotatedWindVector_15.zxy) - (tmpvar_33.zxy * rotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (rotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    finalPosition_16 = vPos_26;
  };
  finalPosition_16 = (finalPosition_16 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_67;
  tmpvar_67.x = _Object2World[3].x;
  tmpvar_67.y = _Object2World[3].y;
  tmpvar_67.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = finalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = finalPosition_16;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_67.x + tmpvar_67.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (finalPosition_16 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((rotatedBranchAnchor_14 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_67.x + tmpvar_67.y));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    finalPosition_16 = vPos_68;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = finalPosition_16;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp float tmpvar_97;
    tmpvar_97 = (max ((finalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_67.x + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_67.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (finalPosition_16.xz + (rotatedWindVector_15.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    finalPosition_16 = vPos_93;
  };
  tmpvar_12.xyz = finalPosition_16;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = normalize(((
    (v_104.xyz * tmpvar_13.x)
   + 
    (v_105.xyz * tmpvar_13.y)
  ) + (v_106.xyz * tmpvar_13.z)));
  mediump vec3 tmpvar_108;
  mediump vec4 normal_109;
  normal_109 = tmpvar_107;
  mediump vec3 x2_110;
  mediump vec3 x1_111;
  x1_111.x = dot (unity_SHAr, normal_109);
  x1_111.y = dot (unity_SHAg, normal_109);
  x1_111.z = dot (unity_SHAb, normal_109);
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_112);
  x2_110.y = dot (unity_SHBg, tmpvar_112);
  x2_110.z = dot (unity_SHBb, tmpvar_112);
  tmpvar_108 = ((x2_110 + (unity_SHC.xyz * 
    ((normal_109.x * normal_109.x) - (normal_109.y * normal_109.y))
  )) + x1_111);
  tmpvar_9 = tmpvar_108;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_101;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t33 = dot(t2.xyz, t2.xyz);
    t33 = inversesqrt(t33);
    t2.xyz = vec3(t33) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb33 = in_COLOR0.w==0.0;
    t49 = in_TEXCOORD1.w + -1.0;
    t49 = unity_LODFade.x * t49 + 1.0;
    t4.xyz = vec3(t49) * t3.xyz;
    t49 = dot(t4.xyz, t4.xyz);
    t49 = sqrt(t49);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t50 = dot(t5.xyz, t5.xyz);
    t50 = inversesqrt(t50);
    t4.xyz = vec3(t50) * t5.xyz;
    t4.xyz = vec3(t49) * t4.xyz;
    t5.x = in_TEXCOORD1.w;
    t5.yz = in_TEXCOORD3.xy;
    t5.xyz = (-t3.xyz) + t5.xyz;
    t3.xyz = unity_LODFade.xxx * t5.xyz + t3.xyz;
    t3.xyz = (bool(tb33)) ? t4.xyz : t3.xyz;
    tb33 = t16_0<5.0;
    ti17 = int(uint(tb33) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti17))!=uint(0u)){
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb33 = t16_0==4.0;
        tb49 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t17.x = t17.x + t4.x;
        t17.x = t17.x + 0.5;
        t17.x = fract(t17.x);
        t17.x = t17.x * 2.0 + -1.0;
        t50 = abs(t17.x) * abs(t17.x);
        t17.x = -abs(t17.x) * 2.0 + 3.0;
        t17.x = t50 * t17.x + -0.5;
        t17.x = dot(t17.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t17.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb33){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t50 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t50);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t38.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t38.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t50 = dot(t3.xyz, t3.xyz);
            t50 = sqrt(t50);
            t51 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t51 = t51 * t5.x;
            t5.x = sin(t51);
            t7.x = cos(t51);
            t51 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t51);
            t23.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t23.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t23.y);
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            t11.z = t8.w * t4.z + t23.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t51 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t18.x = dot(t2.xyz, t4.xyz);
            t18.x = max(t18.x, -1.0);
            t18.x = min(t18.x, 1.0);
            t7.w = t18.x + t7.y;
            t51 = dot(t7.xzw, t7.xzw);
            t51 = inversesqrt(t51);
            t4.xyz = vec3(t51) * t7.zxw;
            t51 = -abs(t18.x) + 1.0;
            t51 = sqrt(t51);
            t5.x = abs(t18.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t18.x) + -0.212114394;
            t5.x = t5.x * abs(t18.x) + 1.57072878;
            t37 = t51 * t5.x;
            t37 = t37 * -2.0 + 3.14159274;
            tb18 = t18.x<(-t18.x);
            t18.x = tb18 ? t37 : float(0.0);
            t18.x = t5.x * t51 + t18.x;
            t51 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t17.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t49 = t5.z * t5.z;
            t49 = t49 * t5.x + 1.0;
            t49 = t49 * 0.5;
            t49 = clamp(t49, 0.0, 1.0);
            t49 = log2(t49);
            t33 = t49 * t17.y;
            t33 = exp2(t33);
            t49 = t5.y * t51;
            t49 = t18.x * t5.w + t49;
            t17.x = t17.x * t33 + t49;
            t17.x = t17.x * in_TEXCOORD2.x;
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            t17.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t33 = t4.x * t4.x;
            t8.w = t33 * t17.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t18.x = dot(t4.xyz, t4.xyz);
            t18.x = inversesqrt(t18.x);
            t4.xyz = t18.xxx * t4.xyz;
            t3.xyz = vec3(t50) * t4.xyz;
        } else {
            t17.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t17.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb18 = t16_0>=3.0;
    if(tb18){
        tb18 = t16_0==5.0;
        if(tb18){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t18.x = dot(t4.xyz, t4.xyz);
            t18.x = inversesqrt(t18.x);
            t4.xyz = t18.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t18.x = _Object2World[3].y + _Object2World[3].x;
            t18.x = t18.x + _ST_WindBranch.x;
            t0.x = t18.x + in_TEXCOORD0.w;
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t50 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t50 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb50 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            t50 = (-t0.y) * t0.z + t6.x;
            t50 = t6.y * t50 + t6.w;
            t51 = (-t50) + t6.x;
            t50 = t6.y * t51 + t50;
            t50 = t50 * _ST_WindBranchTwitch.x;
            t51 = (-_ST_WindVector.w) + 1.0;
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            t52 = t0.x * t52;
            t50 = t50 * t51 + t52;
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t50 = t50 * t51;
            t5.xyz = vec3(t50) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t18.x * 0.100000001 + in_TEXCOORD0.w;
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t18.x * 0.100000001 + in_TEXCOORD0.w;
            t18.xz = t6.xy + vec2(0.5, 0.5);
            t18.xz = fract(t18.xz);
            t18.xz = t18.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t18.xz) * abs(t18.xz);
            t18.xz = -abs(t18.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t18.xz = t6.xy * t18.xz + vec2(-0.5, -0.5);
            t18.xz = t18.xz + t18.xz;
            t18.xz = t18.xz * t18.xz;
            t18.x = t18.x * t18.z;
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            t50 = t0.w * _ST_WindVector.w;
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t18.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t18.x = _Object2World[3].y + _Object2World[3].x;
            t18.x = t18.x + _ST_WindBranch.x;
            t5.x = t18.x + in_TEXCOORD0.w;
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t18.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb18 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            t51 = (-t5.y) * t5.z + t18.x;
            t51 = t18.z * t51 + t0.w;
            t18.x = t18.x + (-t51);
            t18.x = t18.z * t18.x + t51;
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            t50 = (-_ST_WindVector.w) + 1.0;
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            t51 = t51 * t5.x;
            t18.x = t18.x * t50 + t51;
            t4.xyz = t18.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = sqrt(t18.x);
    t50 = float(1.0) / _ST_WindGlobal.z;
    t50 = (-t50) * 0.25 + t3.y;
    t50 = max(t50, 0.0);
    t50 = t50 * _ST_WindGlobal.z;
    tb51 = t50!=0.0;
    t4.x = log2(t50);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t50 = (tb51) ? t4.x : t50;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t36.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t36.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t51 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    t50 = t50 * t51;
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t18.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.xz = t0.xw * vec2(0.5, 0.5);
    t1.x = t0.y * _ProjectionParams.x;
    t2.w = t1.x * 0.5;
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t17.yyy * t3.xyz;
    t1.xyz = t2.xyz * t17.xxx + t3.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    t49 = dot(t1.xyz, t1.xyz);
    t49 = inversesqrt(t49);
    t1.xyz = vec3(t49) * t1.xyz;
    t1.w = 1.0;
    t16_14.x = dot(unity_SHAr, t1);
    t16_14.y = dot(unity_SHAg, t1);
    t16_14.z = dot(unity_SHAb, t1);
    t16_2 = t1.yzzx * t1.xyzz;
    t16_15.x = dot(unity_SHBr, t16_2);
    t16_15.y = dot(unity_SHBg, t16_2);
    t16_15.z = dot(unity_SHBb, t16_2);
    t16_62 = t1.y * t1.y;
    t16_62 = t1.x * t1.x + (-t16_62);
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.zw = t0.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_14.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_15;
  highp vec3 rotatedWindVector_16;
  highp vec3 finalPosition_17;
  finalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_17 = (finalPosition_17 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_21;
    tmpvar_21 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_17 = (finalPosition_17 * tmpvar_22);
    finalPosition_17 = (normalize(finalPosition_17) * tmpvar_21);
  } else {
    highp vec3 tmpvar_23;
    tmpvar_23.x = tmpvar_4.w;
    tmpvar_23.y = tmpvar_5.x;
    tmpvar_23.z = tmpvar_5.y;
    finalPosition_17 = mix (finalPosition_17, tmpvar_23, unity_LODFade.xxx);
  };
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = finalPosition_17;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (finalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * rotatedWindVector_16.zxy) - (tmpvar_34.zxy * rotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (rotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    finalPosition_17 = vPos_27;
  };
  finalPosition_17 = (finalPosition_17 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_68;
  tmpvar_68.x = _Object2World[3].x;
  tmpvar_68.y = _Object2World[3].y;
  tmpvar_68.z = _Object2World[3].z;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = finalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = finalPosition_17;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (finalPosition_17 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((rotatedBranchAnchor_15 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    finalPosition_17 = vPos_69;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = finalPosition_17;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp float tmpvar_98;
    tmpvar_98 = (max ((finalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_68.x + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_68.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (finalPosition_17.xz + (rotatedWindVector_16.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    finalPosition_17 = vPos_94;
  };
  tmpvar_13.xyz = finalPosition_17;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_14.x)
   + 
    (v_106.xyz * tmpvar_14.y)
  ) + (v_107.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2>=3.0;
    if(tb52){
        tb52 = t16_2==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t3.xz = t2.xw * vec2(0.5, 0.5);
    t0.x = t2.y * _ProjectionParams.x;
    t3.w = t0.x * 0.5;
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t0.xyw = t34.yyy * t5.xyz;
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    t51 = dot(t0.xyz, t0.xyz);
    t51 = inversesqrt(t51);
    t0.xyz = vec3(t51) * t0.xyz;
    t0.w = 1.0;
    t16_15.x = dot(unity_SHAr, t0);
    t16_15.y = dot(unity_SHAg, t0);
    t16_15.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_16.x = dot(unity_SHBr, t16_3);
    t16_16.y = dot(unity_SHBg, t16_3);
    t16_16.z = dot(unity_SHBb, t16_3);
    t16_66 = t0.y * t0.y;
    t16_66 = t0.x * t0.x + (-t16_66);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_15.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_15;
  highp vec3 rotatedWindVector_16;
  highp vec3 finalPosition_17;
  finalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_17 = (finalPosition_17 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_21;
    tmpvar_21 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_17 = (finalPosition_17 * tmpvar_22);
    finalPosition_17 = (normalize(finalPosition_17) * tmpvar_21);
  } else {
    highp vec3 tmpvar_23;
    tmpvar_23.x = tmpvar_4.w;
    tmpvar_23.y = tmpvar_5.x;
    tmpvar_23.z = tmpvar_5.y;
    finalPosition_17 = mix (finalPosition_17, tmpvar_23, unity_LODFade.xxx);
  };
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = finalPosition_17;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (finalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * rotatedWindVector_16.zxy) - (tmpvar_34.zxy * rotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (rotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    finalPosition_17 = vPos_27;
  };
  finalPosition_17 = (finalPosition_17 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_68;
  tmpvar_68.x = _Object2World[3].x;
  tmpvar_68.y = _Object2World[3].y;
  tmpvar_68.z = _Object2World[3].z;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = finalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = finalPosition_17;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (finalPosition_17 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((rotatedBranchAnchor_15 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    finalPosition_17 = vPos_69;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = finalPosition_17;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp float tmpvar_98;
    tmpvar_98 = (max ((finalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_68.x + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_68.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (finalPosition_17.xz + (rotatedWindVector_16.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    finalPosition_17 = vPos_94;
  };
  tmpvar_13.xyz = finalPosition_17;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_14.x)
   + 
    (v_106.xyz * tmpvar_14.y)
  ) + (v_107.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2>=3.0;
    if(tb52){
        tb52 = t16_2==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t3.xz = t2.xw * vec2(0.5, 0.5);
    t0.x = t2.y * _ProjectionParams.x;
    t3.w = t0.x * 0.5;
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t0.xyw = t34.yyy * t5.xyz;
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    t51 = dot(t0.xyz, t0.xyz);
    t51 = inversesqrt(t51);
    t0.xyz = vec3(t51) * t0.xyz;
    t0.w = 1.0;
    t16_15.x = dot(unity_SHAr, t0);
    t16_15.y = dot(unity_SHAg, t0);
    t16_15.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_16.x = dot(unity_SHBr, t16_3);
    t16_16.y = dot(unity_SHBg, t16_3);
    t16_16.z = dot(unity_SHBb, t16_3);
    t16_66 = t0.y * t0.y;
    t16_66 = t0.x * t0.x + (-t16_66);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_15.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_15;
  highp vec3 rotatedWindVector_16;
  highp vec3 finalPosition_17;
  finalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_17 = (finalPosition_17 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_21;
    tmpvar_21 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_17 = (finalPosition_17 * tmpvar_22);
    finalPosition_17 = (normalize(finalPosition_17) * tmpvar_21);
  } else {
    highp vec3 tmpvar_23;
    tmpvar_23.x = tmpvar_4.w;
    tmpvar_23.y = tmpvar_5.x;
    tmpvar_23.z = tmpvar_5.y;
    finalPosition_17 = mix (finalPosition_17, tmpvar_23, unity_LODFade.xxx);
  };
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = finalPosition_17;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (finalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * rotatedWindVector_16.zxy) - (tmpvar_34.zxy * rotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (rotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    finalPosition_17 = vPos_27;
  };
  finalPosition_17 = (finalPosition_17 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_68;
  tmpvar_68.x = _Object2World[3].x;
  tmpvar_68.y = _Object2World[3].y;
  tmpvar_68.z = _Object2World[3].z;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = finalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = finalPosition_17;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (finalPosition_17 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((rotatedBranchAnchor_15 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    finalPosition_17 = vPos_69;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = finalPosition_17;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp float tmpvar_98;
    tmpvar_98 = (max ((finalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_68.x + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_68.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (finalPosition_17.xz + (rotatedWindVector_16.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    finalPosition_17 = vPos_94;
  };
  tmpvar_13.xyz = finalPosition_17;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_14.x)
   + 
    (v_106.xyz * tmpvar_14.y)
  ) + (v_107.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2>=3.0;
    if(tb52){
        tb52 = t16_2==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t3.xz = t2.xw * vec2(0.5, 0.5);
    t0.x = t2.y * _ProjectionParams.x;
    t3.w = t0.x * 0.5;
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t0.xyw = t34.yyy * t5.xyz;
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    t51 = dot(t0.xyz, t0.xyz);
    t51 = inversesqrt(t51);
    t0.xyz = vec3(t51) * t0.xyz;
    t0.w = 1.0;
    t16_15.x = dot(unity_SHAr, t0);
    t16_15.y = dot(unity_SHAg, t0);
    t16_15.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_16.x = dot(unity_SHBr, t16_3);
    t16_16.y = dot(unity_SHBg, t16_3);
    t16_16.z = dot(unity_SHBb, t16_3);
    t16_66 = t0.y * t0.y;
    t16_66 = t0.x * t0.x + (-t16_66);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_15.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_3.xyz = log2(t16_3.xyz);
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_15;
  highp vec3 rotatedWindVector_16;
  highp vec3 finalPosition_17;
  finalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_17 = (finalPosition_17 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_21;
    tmpvar_21 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_17 = (finalPosition_17 * tmpvar_22);
    finalPosition_17 = (normalize(finalPosition_17) * tmpvar_21);
  } else {
    highp vec3 tmpvar_23;
    tmpvar_23.x = tmpvar_4.w;
    tmpvar_23.y = tmpvar_5.x;
    tmpvar_23.z = tmpvar_5.y;
    finalPosition_17 = mix (finalPosition_17, tmpvar_23, unity_LODFade.xxx);
  };
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = finalPosition_17;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (finalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * rotatedWindVector_16.zxy) - (tmpvar_34.zxy * rotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (rotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    finalPosition_17 = vPos_27;
  };
  finalPosition_17 = (finalPosition_17 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_68;
  tmpvar_68.x = _Object2World[3].x;
  tmpvar_68.y = _Object2World[3].y;
  tmpvar_68.z = _Object2World[3].z;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = finalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = finalPosition_17;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (finalPosition_17 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((rotatedBranchAnchor_15 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    finalPosition_17 = vPos_69;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = finalPosition_17;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp float tmpvar_98;
    tmpvar_98 = (max ((finalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_68.x + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_68.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (finalPosition_17.xz + (rotatedWindVector_16.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    finalPosition_17 = vPos_94;
  };
  tmpvar_13.xyz = finalPosition_17;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_14.x)
   + 
    (v_106.xyz * tmpvar_14.y)
  ) + (v_107.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2>=3.0;
    if(tb52){
        tb52 = t16_2==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t3.xz = t2.xw * vec2(0.5, 0.5);
    t0.x = t2.y * _ProjectionParams.x;
    t3.w = t0.x * 0.5;
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t0.xyw = t34.yyy * t5.xyz;
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    t51 = dot(t0.xyz, t0.xyz);
    t51 = inversesqrt(t51);
    t0.xyz = vec3(t51) * t0.xyz;
    t0.w = 1.0;
    t16_15.x = dot(unity_SHAr, t0);
    t16_15.y = dot(unity_SHAg, t0);
    t16_15.z = dot(unity_SHAb, t0);
    t16_3 = t0.yzzx * t0.xyzz;
    t16_16.x = dot(unity_SHBr, t16_3);
    t16_16.y = dot(unity_SHBg, t16_3);
    t16_16.z = dot(unity_SHBb, t16_3);
    t16_66 = t0.y * t0.y;
    t16_66 = t0.x * t0.x + (-t16_66);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.zw = t2.zw;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = t16_15.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    t16_3.xyz = max(t10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t0.xyz * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_6 = tmpvar_64;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_52;
  xlv_TEXCOORD4 = o_57;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    tb25 = t16_0>=3.0;
    if(tb25){
        tb25 = t16_0==5.0;
        if(tb25){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t25 = dot(t2.xyz, t2.xyz);
            t25 = inversesqrt(t25);
            t2.xyz = vec3(t25) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb26 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            t26 = (-t0.y) * t0.z + t4.x;
            t26 = t4.y * t26 + t4.w;
            t27 = (-t26) + t4.x;
            t26 = t4.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t26 = t26 * t27 + t4.x;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t3.xyz = vec3(t26) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t25 = t4.x * t4.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t25) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = vec2(0.5, 0.5);
    t3.y = _ProjectionParams.x;
    t0.xyz = t2.xyz * t3.xyz;
    t0.w = t0.y * 0.5;
    t4.xy = t0.zz + t0.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t2.xy = t4.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t3.xyz * t0.xyw;
    t1.w = t1.y * 0.5;
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_3 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_3);
    t16_7.y = dot(unity_SHBg, t16_3);
    t16_7.z = dot(unity_SHBb, t16_3);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.xyz = t2.xyz;
    vs_TEXCOORD4.zw = t0.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_0.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_0.xyz = log2(t16_0.xyz);
    t1.xyz = (-t16_0.xyz) + vs_TEXCOORD6.xyz;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_0.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    t16_0.xyz = t1.xyz * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_6 = tmpvar_64;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_52;
  xlv_TEXCOORD4 = o_57;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    tb25 = t16_0>=3.0;
    if(tb25){
        tb25 = t16_0==5.0;
        if(tb25){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t25 = dot(t2.xyz, t2.xyz);
            t25 = inversesqrt(t25);
            t2.xyz = vec3(t25) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb26 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            t26 = (-t0.y) * t0.z + t4.x;
            t26 = t4.y * t26 + t4.w;
            t27 = (-t26) + t4.x;
            t26 = t4.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t26 = t26 * t27 + t4.x;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t3.xyz = vec3(t26) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t25 = t4.x * t4.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t25) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = vec2(0.5, 0.5);
    t3.y = _ProjectionParams.x;
    t0.xyz = t2.xyz * t3.xyz;
    t0.w = t0.y * 0.5;
    t4.xy = t0.zz + t0.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t2.xy = t4.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t3.xyz * t0.xyw;
    t1.w = t1.y * 0.5;
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_3 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_3);
    t16_7.y = dot(unity_SHBg, t16_3);
    t16_7.z = dot(unity_SHBb, t16_3);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.xyz = t2.xyz;
    vs_TEXCOORD4.zw = t0.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_0.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t1.xyz = t16_0.xyz + vs_TEXCOORD6.xyz;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_0.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    t16_0.xyz = t1.xyz * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_6 = tmpvar_65;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_53;
  xlv_TEXCOORD4 = o_58;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb30 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            t30 = (-t2.y) * t2.z + t5.x;
            t30 = t5.y * t30 + t5.w;
            t31 = (-t30) + t5.x;
            t30 = t5.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t30 = t30 * t31 + t5.x;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t4.xyz = vec3(t30) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = vec2(0.5, 0.5);
    t4.y = _ProjectionParams.x;
    t2.xyz = t3.xyz * t4.xyz;
    t2.w = t2.y * 0.5;
    t5.xy = t2.zz + t2.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t3.xy = t5.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t4.xyz * t2.xyw;
    t0.w = t0.y * 0.5;
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_4 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_4);
    t16_8.y = dot(unity_SHBg, t16_4);
    t16_8.z = dot(unity_SHBb, t16_4);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.xyz = t3.xyz;
    vs_TEXCOORD4.zw = t2.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    t16_9 = max(t16_0.z, t16_0.y);
    t16_9 = max(t16_9, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_9 = t16_2.x / t16_9;
    t16_1 = t16_9 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_2.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_2.xyz = log2(t16_2.xyz);
    t1.xyz = (-t16_2.xyz) + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t1.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_6 = tmpvar_65;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_53;
  xlv_TEXCOORD4 = o_58;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_15.w;
  light_3.xyz = (tmpvar_15.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb30 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            t30 = (-t2.y) * t2.z + t5.x;
            t30 = t5.y * t30 + t5.w;
            t31 = (-t30) + t5.x;
            t30 = t5.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t30 = t30 * t31 + t5.x;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t4.xyz = vec3(t30) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = vec2(0.5, 0.5);
    t4.y = _ProjectionParams.x;
    t2.xyz = t3.xyz * t4.xyz;
    t2.w = t2.y * 0.5;
    t5.xy = t2.zz + t2.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t3.xy = t5.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t4.xyz * t2.xyw;
    t0.w = t0.y * 0.5;
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_4 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_4);
    t16_8.y = dot(unity_SHBg, t16_4);
    t16_8.z = dot(unity_SHBb, t16_4);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.xyz = t3.xyz;
    vs_TEXCOORD4.zw = t2.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    t16_9 = max(t16_0.z, t16_0.y);
    t16_9 = max(t16_9, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_9 = t16_2.x / t16_9;
    t16_1 = t16_9 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_2.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t1.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t1.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_6 = tmpvar_65;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_53;
  xlv_TEXCOORD4 = o_58;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb30 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            t30 = (-t2.y) * t2.z + t5.x;
            t30 = t5.y * t30 + t5.w;
            t31 = (-t30) + t5.x;
            t30 = t5.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t30 = t30 * t31 + t5.x;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t4.xyz = vec3(t30) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = vec2(0.5, 0.5);
    t4.y = _ProjectionParams.x;
    t2.xyz = t3.xyz * t4.xyz;
    t2.w = t2.y * 0.5;
    t5.xy = t2.zz + t2.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t3.xy = t5.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t4.xyz * t2.xyw;
    t0.w = t0.y * 0.5;
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_4 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_4);
    t16_8.y = dot(unity_SHBg, t16_4);
    t16_8.z = dot(unity_SHBb, t16_4);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.xyz = t3.xyz;
    vs_TEXCOORD4.zw = t2.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    t16_9 = max(t16_0.z, t16_0.y);
    t16_9 = max(t16_9, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_9 = t16_2.x / t16_9;
    t16_1 = t16_9 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_2.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_2.xyz = log2(t16_2.xyz);
    t1.xyz = (-t16_2.xyz) + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t1.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_65;
  mediump vec4 normal_66;
  normal_66 = tmpvar_64;
  mediump vec3 x2_67;
  mediump vec3 x1_68;
  x1_68.x = dot (unity_SHAr, normal_66);
  x1_68.y = dot (unity_SHAg, normal_66);
  x1_68.z = dot (unity_SHAb, normal_66);
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_69);
  x2_67.y = dot (unity_SHBg, tmpvar_69);
  x2_67.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_65 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + x1_68);
  tmpvar_6 = tmpvar_65;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_53;
  xlv_TEXCOORD4 = o_58;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_15.w;
  light_3.xyz = (tmpvar_15.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb30 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            t30 = (-t2.y) * t2.z + t5.x;
            t30 = t5.y * t30 + t5.w;
            t31 = (-t30) + t5.x;
            t30 = t5.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t30 = t30 * t31 + t5.x;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t4.xyz = vec3(t30) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = vec2(0.5, 0.5);
    t4.y = _ProjectionParams.x;
    t2.xyz = t3.xyz * t4.xyz;
    t2.w = t2.y * 0.5;
    t5.xy = t2.zz + t2.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t3.xy = t5.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t4.xyz * t2.xyw;
    t0.w = t0.y * 0.5;
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_4 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_4);
    t16_8.y = dot(unity_SHBg, t16_4);
    t16_8.z = dot(unity_SHBb, t16_4);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.xyz = t3.xyz;
    vs_TEXCOORD4.zw = t2.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    t16_9 = max(t16_0.z, t16_0.y);
    t16_9 = max(t16_9, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_9 = t16_2.x / t16_9;
    t16_1 = t16_9 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_2.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t1.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t1.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_65;
  tmpvar_65.x = tmpvar_64.x;
  tmpvar_65.y = (tmpvar_64.y * _ProjectionParams.x);
  o_63.xy = (tmpvar_65 + tmpvar_64.w);
  o_63.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = normalize(((
    (v_66.xyz * tmpvar_11.x)
   + 
    (v_67.xyz * tmpvar_11.y)
  ) + (v_68.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_70;
  mediump vec4 normal_71;
  normal_71 = tmpvar_69;
  mediump vec3 x2_72;
  mediump vec3 x1_73;
  x1_73.x = dot (unity_SHAr, normal_71);
  x1_73.y = dot (unity_SHAg, normal_71);
  x1_73.z = dot (unity_SHAb, normal_71);
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_74);
  x2_72.y = dot (unity_SHBg, tmpvar_74);
  x2_72.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_70 = ((x2_72 + (unity_SHC.xyz * 
    ((normal_71.x * normal_71.x) - (normal_71.y * normal_71.y))
  )) + x1_73);
  tmpvar_7 = tmpvar_70;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_58;
  xlv_TEXCOORD4 = o_63;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    tb25 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t10 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t10 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    tb26 = t16_0>=3.0;
    if(tb26){
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb26 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            t26 = (-t0.y) * t0.z + t5.x;
            t26 = t5.y * t26 + t5.w;
            t27 = (-t26) + t5.x;
            t26 = t5.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t0.x * t28;
            t26 = t26 * t27 + t28;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = vec2(0.5, 0.5);
    t3.y = _ProjectionParams.x;
    t0.xyz = t2.xyz * t3.xyz;
    t0.w = t0.y * 0.5;
    t4.xy = t0.zz + t0.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t2.xy = t4.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t3.xyz * t0.xyw;
    t1.w = t1.y * 0.5;
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_3 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_3);
    t16_7.y = dot(unity_SHBg, t16_3);
    t16_7.z = dot(unity_SHBb, t16_3);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.xyz = t2.xyz;
    vs_TEXCOORD4.zw = t0.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_4.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_4.xyz = log2(t16_4.xyz);
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    t16_3.xyz = t1.xyz * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_65;
  tmpvar_65.x = tmpvar_64.x;
  tmpvar_65.y = (tmpvar_64.y * _ProjectionParams.x);
  o_63.xy = (tmpvar_65 + tmpvar_64.w);
  o_63.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = normalize(((
    (v_66.xyz * tmpvar_11.x)
   + 
    (v_67.xyz * tmpvar_11.y)
  ) + (v_68.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_70;
  mediump vec4 normal_71;
  normal_71 = tmpvar_69;
  mediump vec3 x2_72;
  mediump vec3 x1_73;
  x1_73.x = dot (unity_SHAr, normal_71);
  x1_73.y = dot (unity_SHAg, normal_71);
  x1_73.z = dot (unity_SHAb, normal_71);
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_74);
  x2_72.y = dot (unity_SHBg, tmpvar_74);
  x2_72.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_70 = ((x2_72 + (unity_SHC.xyz * 
    ((normal_71.x * normal_71.x) - (normal_71.y * normal_71.y))
  )) + x1_73);
  tmpvar_7 = tmpvar_70;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_58;
  xlv_TEXCOORD4 = o_63;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    tb25 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t10 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t10 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    tb26 = t16_0>=3.0;
    if(tb26){
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb26 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            t26 = (-t0.y) * t0.z + t5.x;
            t26 = t5.y * t26 + t5.w;
            t27 = (-t26) + t5.x;
            t26 = t5.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t0.x * t28;
            t26 = t26 * t27 + t28;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = vec2(0.5, 0.5);
    t3.y = _ProjectionParams.x;
    t0.xyz = t2.xyz * t3.xyz;
    t0.w = t0.y * 0.5;
    t4.xy = t0.zz + t0.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t2.xy = t4.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.xyz = t3.xyz * t0.xyw;
    t1.w = t1.y * 0.5;
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    t1.w = 1.0;
    t16_6.x = dot(unity_SHAr, t1);
    t16_6.y = dot(unity_SHAg, t1);
    t16_6.z = dot(unity_SHAb, t1);
    t16_3 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_3);
    t16_7.y = dot(unity_SHBg, t16_3);
    t16_7.z = dot(unity_SHBb, t16_3);
    t16_30 = t1.y * t1.y;
    t16_30 = t1.x * t1.x + (-t16_30);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    gl_Position = t0;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    vs_TEXCOORD3.xyz = t2.xyz;
    vs_TEXCOORD4.zw = t0.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_4.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    t16_3.xyz = t1.xyz * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_66;
  tmpvar_66.x = tmpvar_65.x;
  tmpvar_66.y = (tmpvar_65.y * _ProjectionParams.x);
  o_64.xy = (tmpvar_66 + tmpvar_65.w);
  o_64.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = normalize(((
    (v_67.xyz * tmpvar_12.x)
   + 
    (v_68.xyz * tmpvar_12.y)
  ) + (v_69.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_71;
  mediump vec4 normal_72;
  normal_72 = tmpvar_70;
  mediump vec3 x2_73;
  mediump vec3 x1_74;
  x1_74.x = dot (unity_SHAr, normal_72);
  x1_74.y = dot (unity_SHAg, normal_72);
  x1_74.z = dot (unity_SHAb, normal_72);
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_75);
  x2_73.y = dot (unity_SHBg, tmpvar_75);
  x2_73.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_71 = ((x2_73 + (unity_SHC.xyz * 
    ((normal_72.x * normal_72.x) - (normal_72.y * normal_72.y))
  )) + x1_74);
  tmpvar_7 = tmpvar_71;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_59;
  xlv_TEXCOORD4 = o_64;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t12 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t12 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    tb30 = t16_2>=3.0;
    if(tb30){
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = vec2(0.5, 0.5);
    t4.y = _ProjectionParams.x;
    t2.xyz = t3.xyz * t4.xyz;
    t2.w = t2.y * 0.5;
    t5.xy = t2.zz + t2.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t3.xy = t5.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t4.xyz * t2.xyw;
    t0.w = t0.y * 0.5;
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_4 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_4);
    t16_8.y = dot(unity_SHBg, t16_4);
    t16_8.z = dot(unity_SHBb, t16_4);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.xyz = t3.xyz;
    vs_TEXCOORD4.zw = t2.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_4.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t16_4.xyz = log2(t16_4.xyz);
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    t16_3.xyz = t1.xyz * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_66;
  tmpvar_66.x = tmpvar_65.x;
  tmpvar_66.y = (tmpvar_65.y * _ProjectionParams.x);
  o_64.xy = (tmpvar_66 + tmpvar_65.w);
  o_64.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = normalize(((
    (v_67.xyz * tmpvar_12.x)
   + 
    (v_68.xyz * tmpvar_12.y)
  ) + (v_69.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_71;
  mediump vec4 normal_72;
  normal_72 = tmpvar_70;
  mediump vec3 x2_73;
  mediump vec3 x1_74;
  x1_74.x = dot (unity_SHAr, normal_72);
  x1_74.y = dot (unity_SHAg, normal_72);
  x1_74.z = dot (unity_SHAb, normal_72);
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_75);
  x2_73.y = dot (unity_SHBg, tmpvar_75);
  x2_73.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_71 = ((x2_73 + (unity_SHC.xyz * 
    ((normal_72.x * normal_72.x) - (normal_72.y * normal_72.y))
  )) + x1_74);
  tmpvar_7 = tmpvar_71;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_59;
  xlv_TEXCOORD4 = o_64;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t12 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t12 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    tb30 = t16_2>=3.0;
    if(tb30){
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = vec2(0.5, 0.5);
    t4.y = _ProjectionParams.x;
    t2.xyz = t3.xyz * t4.xyz;
    t2.w = t2.y * 0.5;
    t5.xy = t2.zz + t2.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t3.xy = t5.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t4.xyz * t2.xyw;
    t0.w = t0.y * 0.5;
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_4 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_4);
    t16_8.y = dot(unity_SHBg, t16_4);
    t16_8.z = dot(unity_SHBb, t16_4);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.xyz = t3.xyz;
    vs_TEXCOORD4.zw = t2.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    t16_4.xyz = max(t10_1.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    t16_3.xyz = t1.xyz * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_66;
  tmpvar_66.x = tmpvar_65.x;
  tmpvar_66.y = (tmpvar_65.y * _ProjectionParams.x);
  o_64.xy = (tmpvar_66 + tmpvar_65.w);
  o_64.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = normalize(((
    (v_67.xyz * tmpvar_12.x)
   + 
    (v_68.xyz * tmpvar_12.y)
  ) + (v_69.xyz * tmpvar_12.z)));
  mediump vec3 tmpvar_71;
  mediump vec4 normal_72;
  normal_72 = tmpvar_70;
  mediump vec3 x2_73;
  mediump vec3 x1_74;
  x1_74.x = dot (unity_SHAr, normal_72);
  x1_74.y = dot (unity_SHAg, normal_72);
  x1_74.z = dot (unity_SHAb, normal_72);
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_75);
  x2_73.y = dot (unity_SHBg, tmpvar_75);
  x2_73.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_71 = ((x2_73 + (unity_SHC.xyz * 
    ((normal_72.x * normal_72.x) - (normal_72.y * normal_72.y))
  )) + x1_74);
  tmpvar_7 = tmpvar_71;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_59;
  xlv_TEXCOORD4 = o_64;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t12 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t12 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    tb30 = t16_2>=3.0;
    if(tb30){
        if(tb28){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t28 = dot(t4.xyz, t4.xyz);
            t28 = inversesqrt(t28);
            t4.xyz = vec3(t28) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb30 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            t30 = (-t2.y) * t2.z + t6.x;
            t30 = t6.y * t30 + t6.w;
            t31 = (-t30) + t6.x;
            t30 = t6.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t2.x * t32;
            t30 = t30 * t31 + t32;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t24.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t24.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t28 = t6.x * t6.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t28) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = vec2(0.5, 0.5);
    t4.y = _ProjectionParams.x;
    t2.xyz = t3.xyz * t4.xyz;
    t2.w = t2.y * 0.5;
    t5.xy = t2.zz + t2.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t3.xy = t5.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.xyz = t4.xyz * t2.xyw;
    t0.w = t0.y * 0.5;
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t27 = dot(t0.xyz, t0.xyz);
    t27 = inversesqrt(t27);
    t0.xyz = vec3(t27) * t0.xyz;
    t0.w = 1.0;
    t16_7.x = dot(unity_SHAr, t0);
    t16_7.y = dot(unity_SHAg, t0);
    t16_7.z = dot(unity_SHAb, t0);
    t16_4 = t0.yzzx * t0.xyzz;
    t16_8.x = dot(unity_SHBr, t16_4);
    t16_8.y = dot(unity_SHBg, t16_4);
    t16_8.z = dot(unity_SHBb, t16_4);
    t16_34 = t0.y * t0.y;
    t16_34 = t0.x * t0.x + (-t16_34);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    gl_Position = t2;
    vs_TEXCOORD1.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD3.xyz = t3.xyz;
    vs_TEXCOORD4.zw = t2.zw;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
u