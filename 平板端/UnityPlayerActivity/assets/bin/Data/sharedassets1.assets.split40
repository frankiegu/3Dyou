4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
mediump float t16_2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
bool tb5;
highp float t6;
bool tb6;
highp vec2 t10;
highp float t15;
highp uint tu15;
highp float t16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6 = dot(t0.xyz, t0.xyz);
    t6 = inversesqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t6 = dot(t1.xzw, t1.xzw);
    t6 = sqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = inversesqrt(t16);
    t3.xyz = vec3(t16) * t3.xyz;
    t10_4.xyz = t1.xyz * t3.xyz;
    t10_4.xyz = t1.zxy * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD3.xyz = t0.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu15) + 0].x;
    tb5 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb5) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb5)) ? t10.xy : t1.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_6 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_27;
  v_27.x = _World2Object[0].x;
  v_27.y = _World2Object[1].x;
  v_27.z = _World2Object[2].x;
  v_27.w = _World2Object[3].x;
  highp vec4 v_28;
  v_28.x = _World2Object[0].y;
  v_28.y = _World2Object[1].y;
  v_28.z = _World2Object[2].y;
  v_28.w = _World2Object[3].y;
  highp vec4 v_29;
  v_29.x = _World2Object[0].z;
  v_29.y = _World2Object[1].z;
  v_29.z = _World2Object[2].z;
  v_29.w = _World2Object[3].z;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(((
    (v_27.xyz * _BillboardNormal.x)
   + 
    (v_28.xyz * _BillboardNormal.y)
  ) + (v_29.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = _Object2World[0].xyz;
  tmpvar_31[1] = _Object2World[1].xyz;
  tmpvar_31[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((tmpvar_31 * _BillboardTangent));
  worldTangent_2 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_35;
  tmpvar_35.x = worldTangent_2.x;
  tmpvar_35.y = tmpvar_34.x;
  tmpvar_35.z = worldNormal_3.x;
  lowp vec3 tmpvar_36;
  tmpvar_36.x = worldTangent_2.y;
  tmpvar_36.y = tmpvar_34.y;
  tmpvar_36.z = worldNormal_3.y;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_2.z;
  tmpvar_37.y = tmpvar_34.z;
  tmpvar_37.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_35;
  xlv_TEXCOORD1 = tmpvar_36;
  xlv_TEXCOORD2 = tmpvar_37;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
mediump float t16_2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
bool tb5;
highp float t6;
bool tb6;
highp vec2 t10;
highp float t15;
highp uint tu15;
highp float t16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6 = dot(t0.xyz, t0.xyz);
    t6 = inversesqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t6 = dot(t1.xzw, t1.xzw);
    t6 = sqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = inversesqrt(t16);
    t3.xyz = vec3(t16) * t3.xyz;
    t10_4.xyz = t1.xyz * t3.xyz;
    t10_4.xyz = t1.zxy * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD3.xyz = t0.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu15) + 0].x;
    tb5 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb5) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb5)) ? t10.xy : t1.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = _Object2World[0].xyz;
  tmpvar_32[1] = _Object2World[1].xyz;
  tmpvar_32[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((tmpvar_32 * _BillboardTangent));
  worldTangent_2 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_36;
  tmpvar_36.x = worldTangent_2.x;
  tmpvar_36.y = tmpvar_35.x;
  tmpvar_36.z = worldNormal_3.x;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_2.y;
  tmpvar_37.y = tmpvar_35.y;
  tmpvar_37.z = worldNormal_3.y;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_2.z;
  tmpvar_38.y = tmpvar_35.z;
  tmpvar_38.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_36;
  xlv_TEXCOORD1 = tmpvar_37;
  xlv_TEXCOORD2 = tmpvar_38;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyw = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t1.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t1.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb18 = t10_1.x<0.0;
    if((int(tb18) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    t16_3.x = max(t16_8.z, t16_8.y);
    t16_3.x = max(t16_8.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = _Object2World[0].xyz;
  tmpvar_32[1] = _Object2World[1].xyz;
  tmpvar_32[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((tmpvar_32 * _BillboardTangent));
  worldTangent_2 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_36;
  tmpvar_36.x = worldTangent_2.x;
  tmpvar_36.y = tmpvar_35.x;
  tmpvar_36.z = worldNormal_3.x;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_2.y;
  tmpvar_37.y = tmpvar_35.y;
  tmpvar_37.z = worldNormal_3.y;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_2.z;
  tmpvar_38.y = tmpvar_35.z;
  tmpvar_38.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_36;
  xlv_TEXCOORD1 = tmpvar_37;
  xlv_TEXCOORD2 = tmpvar_38;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyw = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t1.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t1.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    t16_3 = max(t16_7.z, t16_7.y);
    t16_3 = max(t16_7.x, t16_3);
    t16_2.x = t16_2.x / t16_3;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = _Object2World[0].xyz;
  tmpvar_32[1] = _Object2World[1].xyz;
  tmpvar_32[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((tmpvar_32 * _BillboardTangent));
  worldTangent_2 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_36;
  tmpvar_36.x = worldTangent_2.x;
  tmpvar_36.y = tmpvar_35.x;
  tmpvar_36.z = worldNormal_3.x;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_2.y;
  tmpvar_37.y = tmpvar_35.y;
  tmpvar_37.z = worldNormal_3.y;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_2.z;
  tmpvar_38.y = tmpvar_35.z;
  tmpvar_38.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_36;
  xlv_TEXCOORD1 = tmpvar_37;
  xlv_TEXCOORD2 = tmpvar_38;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyw = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t1.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t1.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb21 = t10_1.x<0.0;
    if((int(tb21) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    t16_3.x = max(t16_9.z, t16_9.y);
    t16_3.x = max(t16_9.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb11 = 0.0<t16_0.z;
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    t10_1.x = (tb11) ? 1.0 : 0.0;
    t10_1.x = t10_4 * t10_1.x;
    t10_1.x = t10_18 * t10_1.x;
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_23 = dot(t10_6.xyz, t4.xyz);
    t16_23 = max(t16_23, 0.0);
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = _Object2World[0].xyz;
  tmpvar_32[1] = _Object2World[1].xyz;
  tmpvar_32[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((tmpvar_32 * _BillboardTangent));
  worldTangent_2 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_36;
  tmpvar_36.x = worldTangent_2.x;
  tmpvar_36.y = tmpvar_35.x;
  tmpvar_36.z = worldNormal_3.x;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_2.y;
  tmpvar_37.y = tmpvar_35.y;
  tmpvar_37.z = worldNormal_3.y;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_2.z;
  tmpvar_38.y = tmpvar_35.z;
  tmpvar_38.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_36;
  xlv_TEXCOORD1 = tmpvar_37;
  xlv_TEXCOORD2 = tmpvar_38;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyw = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t1.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t1.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb18 = t10_1.x<0.0;
    if((int(tb18) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    t16_3.x = max(t16_8.z, t16_8.y);
    t16_3.x = max(t16_8.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_6 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = _Object2World[0].xyz;
  tmpvar_32[1] = _Object2World[1].xyz;
  tmpvar_32[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((tmpvar_32 * _BillboardTangent));
  worldTangent_2 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_36;
  tmpvar_36.x = worldTangent_2.x;
  tmpvar_36.y = tmpvar_35.x;
  tmpvar_36.z = worldNormal_3.x;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_2.y;
  tmpvar_37.y = tmpvar_35.y;
  tmpvar_37.z = worldNormal_3.y;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_2.z;
  tmpvar_38.y = tmpvar_35.z;
  tmpvar_38.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_36;
  xlv_TEXCOORD1 = tmpvar_37;
  xlv_TEXCOORD2 = tmpvar_38;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyw = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t1.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t1.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((v_38.xyz * tmpvar_15.z) + (v_39.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_40;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t6.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t6.y;
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t12.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t12.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t12.x = in_COLOR0.w * 255.0;
    tu12 = uint(t12.x);
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t3.y = t17 * in_TEXCOORD1.y;
    t7 = (-t7) * 0.25 + t3.y;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t17 = log2(t7);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    tb18 = t7!=0.0;
    t7 = (tb18) ? t17 : t7;
    t2.x = t7 * t2.x;
    t7 = in_TEXCOORD0.x + -0.5;
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t11.x = dot(t6.xyz, t6.xyz);
    t11.x = inversesqrt(t11.x);
    t0.xy = t11.xx * t6.xz;
    t0.zw = (-t0.yy);
    t6.x = dot(t0.xz, t0.xw);
    t11.xy = t0.yx * vec2(-1.0, 1.0);
    t6.x = inversesqrt(t6.x);
    t6.xy = t6.xx * t11.xy;
    t3.xz = t6.xy * vec2(t7);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t16 = dot(t4.xyz, t4.xyz);
    t16 = inversesqrt(t16);
    t2.xyw = vec3(t16) * t4.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = sqrt(t16);
    t2.xyw = vec3(t16) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t6.y * _World2Object[0].x;
    t3.y = t6.y * _World2Object[1].x;
    t3.z = t6.y * _World2Object[2].x;
    t4.x = (-t6.x) * _World2Object[0].z;
    t4.y = (-t6.x) * _World2Object[1].z;
    t4.z = (-t6.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = max(abs(t6.y), abs(t6.x));
    t1 = float(1.0) / t1;
    t16 = min(abs(t6.y), abs(t6.x));
    t1 = t1 * t16;
    t16 = t1 * t1;
    t2.x = t16 * 0.0208350997 + -0.0851330012;
    t2.x = t16 * t2.x + 0.180141002;
    t2.x = t16 * t2.x + -0.330299497;
    t16 = t16 * t2.x + 0.999866009;
    t2.x = t16 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb7 = abs(t6.y)<abs(t6.x);
    t2.x = tb7 ? t2.x : float(0.0);
    t1 = t1 * t16 + t2.x;
    tb16 = t6.y<(-t6.y);
    t16 = tb16 ? -3.14159274 : float(0.0);
    t1 = t16 + t1;
    t16 = min(t6.y, (-t6.x));
    t6.x = max(t6.y, (-t6.x));
    tb6 = t6.x>=(-t6.x);
    tb11 = t16<(-t16);
    ti6 = int(uint(tb6) * 0xffffffffu & uint(tb11) * 0xffffffffu);
    t1 = (ti6 != 0) ? (-t1) : t1;
    tb6 = t1<0.0;
    t6.x = tb6 ? 6.28318548 : float(0.0);
    t1 = t6.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    tb6 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb6) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu1 = uint(t1);
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((v_38.xyz * tmpvar_15.z) + (v_39.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_40;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t6.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t6.y;
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t12.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t12.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t12.x = in_COLOR0.w * 255.0;
    tu12 = uint(t12.x);
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t3.y = t17 * in_TEXCOORD1.y;
    t7 = (-t7) * 0.25 + t3.y;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t17 = log2(t7);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    tb18 = t7!=0.0;
    t7 = (tb18) ? t17 : t7;
    t2.x = t7 * t2.x;
    t7 = in_TEXCOORD0.x + -0.5;
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t11.x = dot(t6.xyz, t6.xyz);
    t11.x = inversesqrt(t11.x);
    t0.xy = t11.xx * t6.xz;
    t0.zw = (-t0.yy);
    t6.x = dot(t0.xz, t0.xw);
    t11.xy = t0.yx * vec2(-1.0, 1.0);
    t6.x = inversesqrt(t6.x);
    t6.xy = t6.xx * t11.xy;
    t3.xz = t6.xy * vec2(t7);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t16 = dot(t4.xyz, t4.xyz);
    t16 = inversesqrt(t16);
    t2.xyw = vec3(t16) * t4.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = sqrt(t16);
    t2.xyw = vec3(t16) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t6.y * _World2Object[0].x;
    t3.y = t6.y * _World2Object[1].x;
    t3.z = t6.y * _World2Object[2].x;
    t4.x = (-t6.x) * _World2Object[0].z;
    t4.y = (-t6.x) * _World2Object[1].z;
    t4.z = (-t6.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = max(abs(t6.y), abs(t6.x));
    t1 = float(1.0) / t1;
    t16 = min(abs(t6.y), abs(t6.x));
    t1 = t1 * t16;
    t16 = t1 * t1;
    t2.x = t16 * 0.0208350997 + -0.0851330012;
    t2.x = t16 * t2.x + 0.180141002;
    t2.x = t16 * t2.x + -0.330299497;
    t16 = t16 * t2.x + 0.999866009;
    t2.x = t16 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb7 = abs(t6.y)<abs(t6.x);
    t2.x = tb7 ? t2.x : float(0.0);
    t1 = t1 * t16 + t2.x;
    tb16 = t6.y<(-t6.y);
    t16 = tb16 ? -3.14159274 : float(0.0);
    t1 = t16 + t1;
    t16 = min(t6.y, (-t6.x));
    t6.x = max(t6.y, (-t6.x));
    tb6 = t6.x>=(-t6.x);
    tb11 = t16<(-t16);
    ti6 = int(uint(tb6) * 0xffffffffu & uint(tb11) * 0xffffffffu);
    t1 = (ti6 != 0) ? (-t1) : t1;
    tb6 = t1<0.0;
    t6.x = tb6 ? 6.28318548 : float(0.0);
    t1 = t6.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    tb6 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb6) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu1 = uint(t1);
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_11 = max(t16_11, 0.0);
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((v_38.xyz * tmpvar_15.z) + (v_39.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_40;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t6.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t6.y;
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t12.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t12.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t12.x = in_COLOR0.w * 255.0;
    tu12 = uint(t12.x);
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t3.y = t17 * in_TEXCOORD1.y;
    t7 = (-t7) * 0.25 + t3.y;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t17 = log2(t7);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    tb18 = t7!=0.0;
    t7 = (tb18) ? t17 : t7;
    t2.x = t7 * t2.x;
    t7 = in_TEXCOORD0.x + -0.5;
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t11.x = dot(t6.xyz, t6.xyz);
    t11.x = inversesqrt(t11.x);
    t0.xy = t11.xx * t6.xz;
    t0.zw = (-t0.yy);
    t6.x = dot(t0.xz, t0.xw);
    t11.xy = t0.yx * vec2(-1.0, 1.0);
    t6.x = inversesqrt(t6.x);
    t6.xy = t6.xx * t11.xy;
    t3.xz = t6.xy * vec2(t7);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t16 = dot(t4.xyz, t4.xyz);
    t16 = inversesqrt(t16);
    t2.xyw = vec3(t16) * t4.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = sqrt(t16);
    t2.xyw = vec3(t16) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t6.y * _World2Object[0].x;
    t3.y = t6.y * _World2Object[1].x;
    t3.z = t6.y * _World2Object[2].x;
    t4.x = (-t6.x) * _World2Object[0].z;
    t4.y = (-t6.x) * _World2Object[1].z;
    t4.z = (-t6.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = max(abs(t6.y), abs(t6.x));
    t1 = float(1.0) / t1;
    t16 = min(abs(t6.y), abs(t6.x));
    t1 = t1 * t16;
    t16 = t1 * t1;
    t2.x = t16 * 0.0208350997 + -0.0851330012;
    t2.x = t16 * t2.x + 0.180141002;
    t2.x = t16 * t2.x + -0.330299497;
    t16 = t16 * t2.x + 0.999866009;
    t2.x = t16 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb7 = abs(t6.y)<abs(t6.x);
    t2.x = tb7 ? t2.x : float(0.0);
    t1 = t1 * t16 + t2.x;
    tb16 = t6.y<(-t6.y);
    t16 = tb16 ? -3.14159274 : float(0.0);
    t1 = t16 + t1;
    t16 = min(t6.y, (-t6.x));
    t6.x = max(t6.y, (-t6.x));
    tb6 = t6.x>=(-t6.x);
    tb11 = t16<(-t16);
    ti6 = int(uint(tb6) * 0xffffffffu & uint(tb11) * 0xffffffffu);
    t1 = (ti6 != 0) ? (-t1) : t1;
    tb6 = t1<0.0;
    t6.x = tb6 ? 6.28318548 : float(0.0);
    t1 = t6.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    tb6 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb6) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu1 = uint(t1);
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb9 = 0.0<t16_0.z;
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    t10_1 = (tb9) ? 1.0 : 0.0;
    t10_1 = t10_4 * t10_1;
    t10_1 = t10_14 * t10_1;
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t4.xyz = vec3(t19) * t4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((v_38.xyz * tmpvar_15.z) + (v_39.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_40;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t6.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t6.y;
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t12.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t12.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t12.x = in_COLOR0.w * 255.0;
    tu12 = uint(t12.x);
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t3.y = t17 * in_TEXCOORD1.y;
    t7 = (-t7) * 0.25 + t3.y;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t17 = log2(t7);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    tb18 = t7!=0.0;
    t7 = (tb18) ? t17 : t7;
    t2.x = t7 * t2.x;
    t7 = in_TEXCOORD0.x + -0.5;
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t11.x = dot(t6.xyz, t6.xyz);
    t11.x = inversesqrt(t11.x);
    t0.xy = t11.xx * t6.xz;
    t0.zw = (-t0.yy);
    t6.x = dot(t0.xz, t0.xw);
    t11.xy = t0.yx * vec2(-1.0, 1.0);
    t6.x = inversesqrt(t6.x);
    t6.xy = t6.xx * t11.xy;
    t3.xz = t6.xy * vec2(t7);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t16 = dot(t4.xyz, t4.xyz);
    t16 = inversesqrt(t16);
    t2.xyw = vec3(t16) * t4.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = sqrt(t16);
    t2.xyw = vec3(t16) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t6.y * _World2Object[0].x;
    t3.y = t6.y * _World2Object[1].x;
    t3.z = t6.y * _World2Object[2].x;
    t4.x = (-t6.x) * _World2Object[0].z;
    t4.y = (-t6.x) * _World2Object[1].z;
    t4.z = (-t6.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = max(abs(t6.y), abs(t6.x));
    t1 = float(1.0) / t1;
    t16 = min(abs(t6.y), abs(t6.x));
    t1 = t1 * t16;
    t16 = t1 * t1;
    t2.x = t16 * 0.0208350997 + -0.0851330012;
    t2.x = t16 * t2.x + 0.180141002;
    t2.x = t16 * t2.x + -0.330299497;
    t16 = t16 * t2.x + 0.999866009;
    t2.x = t16 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb7 = abs(t6.y)<abs(t6.x);
    t2.x = tb7 ? t2.x : float(0.0);
    t1 = t1 * t16 + t2.x;
    tb16 = t6.y<(-t6.y);
    t16 = tb16 ? -3.14159274 : float(0.0);
    t1 = t16 + t1;
    t16 = min(t6.y, (-t6.x));
    t6.x = max(t6.y, (-t6.x));
    tb6 = t6.x>=(-t6.x);
    tb11 = t16<(-t16);
    ti6 = int(uint(tb6) * 0xffffffffu & uint(tb11) * 0xffffffffu);
    t1 = (ti6 != 0) ? (-t1) : t1;
    tb6 = t1<0.0;
    t6.x = tb6 ? 6.28318548 : float(0.0);
    t1 = t6.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    tb6 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb6) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu1 = uint(t1);
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_4 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((v_38.xyz * tmpvar_15.z) + (v_39.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_40;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t6.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t6.y;
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t12.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t12.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t12.x = in_COLOR0.w * 255.0;
    tu12 = uint(t12.x);
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t3.y = t17 * in_TEXCOORD1.y;
    t7 = (-t7) * 0.25 + t3.y;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t17 = log2(t7);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    tb18 = t7!=0.0;
    t7 = (tb18) ? t17 : t7;
    t2.x = t7 * t2.x;
    t7 = in_TEXCOORD0.x + -0.5;
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t11.x = dot(t6.xyz, t6.xyz);
    t11.x = inversesqrt(t11.x);
    t0.xy = t11.xx * t6.xz;
    t0.zw = (-t0.yy);
    t6.x = dot(t0.xz, t0.xw);
    t11.xy = t0.yx * vec2(-1.0, 1.0);
    t6.x = inversesqrt(t6.x);
    t6.xy = t6.xx * t11.xy;
    t3.xz = t6.xy * vec2(t7);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t16 = dot(t4.xyz, t4.xyz);
    t16 = inversesqrt(t16);
    t2.xyw = vec3(t16) * t4.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = sqrt(t16);
    t2.xyw = vec3(t16) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t6.y * _World2Object[0].x;
    t3.y = t6.y * _World2Object[1].x;
    t3.z = t6.y * _World2Object[2].x;
    t4.x = (-t6.x) * _World2Object[0].z;
    t4.y = (-t6.x) * _World2Object[1].z;
    t4.z = (-t6.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = max(abs(t6.y), abs(t6.x));
    t1 = float(1.0) / t1;
    t16 = min(abs(t6.y), abs(t6.x));
    t1 = t1 * t16;
    t16 = t1 * t1;
    t2.x = t16 * 0.0208350997 + -0.0851330012;
    t2.x = t16 * t2.x + 0.180141002;
    t2.x = t16 * t2.x + -0.330299497;
    t16 = t16 * t2.x + 0.999866009;
    t2.x = t16 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb7 = abs(t6.y)<abs(t6.x);
    t2.x = tb7 ? t2.x : float(0.0);
    t1 = t1 * t16 + t2.x;
    tb16 = t6.y<(-t6.y);
    t16 = tb16 ? -3.14159274 : float(0.0);
    t1 = t16 + t1;
    t16 = min(t6.y, (-t6.x));
    t6.x = max(t6.y, (-t6.x));
    tb6 = t6.x>=(-t6.x);
    tb11 = t16<(-t16);
    ti6 = int(uint(tb6) * 0xffffffffu & uint(tb11) * 0xffffffffu);
    t1 = (ti6 != 0) ? (-t1) : t1;
    tb6 = t1<0.0;
    t6.x = tb6 ? 6.28318548 : float(0.0);
    t1 = t6.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    tb6 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb6) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu1 = uint(t1);
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_38;
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_15.z) + (v_40.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t0.xy = vec2(t20) * t4.xz;
    t0.zw = (-t0.yy);
    t20 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t20 = inversesqrt(t20);
    t4.xy = vec2(t20) * t4.xy;
    t3.xz = vec2(t8) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t21 = dot(t3.xyz, t3.xyz);
    t21 = sqrt(t21);
    t2.xyw = t2.xyw * vec3(t21);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = t7.y + t7.x;
    t1 = t7.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD3.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t7.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t7.x;
    t7.x = t1 * t1;
    t13.x = t7.x * 0.0208350997 + -0.0851330012;
    t13.x = t7.x * t13.x + 0.180141002;
    t13.x = t7.x * t13.x + -0.330299497;
    t7.x = t7.x * t13.x + 0.999866009;
    t13.x = t7.x * t1;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t4.y)<abs(t4.x);
    t13.x = tb19 ? t13.x : float(0.0);
    t1 = t1 * t7.x + t13.x;
    tb7 = t4.y<(-t4.y);
    t7.x = tb7 ? -3.14159274 : float(0.0);
    t1 = t7.x + t1;
    t7.x = min(t4.y, (-t4.x));
    t13.x = max(t4.y, (-t4.x));
    tb13 = t13.x>=(-t13.x);
    tb7 = t7.x<(-t7.x);
    ti7 = int(uint(tb13) * 0xffffffffu & uint(tb7) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_38;
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_15.z) + (v_40.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t0.xy = vec2(t20) * t4.xz;
    t0.zw = (-t0.yy);
    t20 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t20 = inversesqrt(t20);
    t4.xy = vec2(t20) * t4.xy;
    t3.xz = vec2(t8) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t21 = dot(t3.xyz, t3.xyz);
    t21 = sqrt(t21);
    t2.xyw = t2.xyw * vec3(t21);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = t7.y + t7.x;
    t1 = t7.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD3.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t7.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t7.x;
    t7.x = t1 * t1;
    t13.x = t7.x * 0.0208350997 + -0.0851330012;
    t13.x = t7.x * t13.x + 0.180141002;
    t13.x = t7.x * t13.x + -0.330299497;
    t7.x = t7.x * t13.x + 0.999866009;
    t13.x = t7.x * t1;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t4.y)<abs(t4.x);
    t13.x = tb19 ? t13.x : float(0.0);
    t1 = t1 * t7.x + t13.x;
    tb7 = t4.y<(-t4.y);
    t7.x = tb7 ? -3.14159274 : float(0.0);
    t1 = t7.x + t1;
    t7.x = min(t4.y, (-t4.x));
    t13.x = max(t4.y, (-t4.x));
    tb13 = t13.x>=(-t13.x);
    tb7 = t7.x<(-t7.x);
    ti7 = int(uint(tb13) * 0xffffffffu & uint(tb7) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3 = max(t16_6.z, t16_6.y);
    t16_3 = max(t16_6.x, t16_3);
    t16_2.x = t16_2.x / t16_3;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_38;
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_15.z) + (v_40.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t0.xy = vec2(t20) * t4.xz;
    t0.zw = (-t0.yy);
    t20 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t20 = inversesqrt(t20);
    t4.xy = vec2(t20) * t4.xy;
    t3.xz = vec2(t8) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t21 = dot(t3.xyz, t3.xyz);
    t21 = sqrt(t21);
    t2.xyw = t2.xyw * vec3(t21);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = t7.y + t7.x;
    t1 = t7.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD3.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t7.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t7.x;
    t7.x = t1 * t1;
    t13.x = t7.x * 0.0208350997 + -0.0851330012;
    t13.x = t7.x * t13.x + 0.180141002;
    t13.x = t7.x * t13.x + -0.330299497;
    t7.x = t7.x * t13.x + 0.999866009;
    t13.x = t7.x * t1;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t4.y)<abs(t4.x);
    t13.x = tb19 ? t13.x : float(0.0);
    t1 = t1 * t7.x + t13.x;
    tb7 = t4.y<(-t4.y);
    t7.x = tb7 ? -3.14159274 : float(0.0);
    t1 = t7.x + t1;
    t7.x = min(t4.y, (-t4.x));
    t13.x = max(t4.y, (-t4.x));
    tb13 = t13.x>=(-t13.x);
    tb7 = t7.x<(-t7.x);
    ti7 = int(uint(tb13) * 0xffffffffu & uint(tb7) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb9 = 0.0<t16_0.z;
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    t10_1 = (tb9) ? 1.0 : 0.0;
    t10_1 = t10_4 * t10_1;
    t10_1 = t10_14 * t10_1;
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t4.xyz = vec3(t19) * t4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_38;
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_15.z) + (v_40.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t0.xy = vec2(t20) * t4.xz;
    t0.zw = (-t0.yy);
    t20 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t20 = inversesqrt(t20);
    t4.xy = vec2(t20) * t4.xy;
    t3.xz = vec2(t8) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t21 = dot(t3.xyz, t3.xyz);
    t21 = sqrt(t21);
    t2.xyw = t2.xyw * vec3(t21);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = t7.y + t7.x;
    t1 = t7.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD3.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t7.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t7.x;
    t7.x = t1 * t1;
    t13.x = t7.x * 0.0208350997 + -0.0851330012;
    t13.x = t7.x * t13.x + 0.180141002;
    t13.x = t7.x * t13.x + -0.330299497;
    t7.x = t7.x * t13.x + 0.999866009;
    t13.x = t7.x * t1;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t4.y)<abs(t4.x);
    t13.x = tb19 ? t13.x : float(0.0);
    t1 = t1 * t7.x + t13.x;
    tb7 = t4.y<(-t4.y);
    t7.x = tb7 ? -3.14159274 : float(0.0);
    t1 = t7.x + t1;
    t7.x = min(t4.y, (-t4.x));
    t13.x = max(t4.y, (-t4.x));
    tb13 = t13.x>=(-t13.x);
    tb7 = t7.x<(-t7.x);
    ti7 = int(uint(tb13) * 0xffffffffu & uint(tb7) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_4 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_38;
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_15.z) + (v_40.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t0.xy = vec2(t20) * t4.xz;
    t0.zw = (-t0.yy);
    t20 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t20 = inversesqrt(t20);
    t4.xy = vec2(t20) * t4.xy;
    t3.xz = vec2(t8) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t21 = dot(t3.xyz, t3.xyz);
    t21 = sqrt(t21);
    t2.xyw = t2.xyw * vec3(t21);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = t7.y + t7.x;
    t1 = t7.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD3.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t7.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t7.x;
    t7.x = t1 * t1;
    t13.x = t7.x * 0.0208350997 + -0.0851330012;
    t13.x = t7.x * t13.x + 0.180141002;
    t13.x = t7.x * t13.x + -0.330299497;
    t7.x = t7.x * t13.x + 0.999866009;
    t13.x = t7.x * t1;
    t13.x = t13.x * -2.0 + 1.57079637;
    tb19 = abs(t4.y)<abs(t4.x);
    t13.x = tb19 ? t13.x : float(0.0);
    t1 = t1 * t7.x + t13.x;
    tb7 = t4.y<(-t4.y);
    t7.x = tb7 ? -3.14159274 : float(0.0);
    t1 = t7.x + t1;
    t7.x = min(t4.y, (-t4.x));
    t13.x = max(t4.y, (-t4.x));
    tb13 = t13.x>=(-t13.x);
    tb7 = t7.x<(-t7.x);
    ti7 = int(uint(tb13) * 0xffffffffu & uint(tb7) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_16.z) + (v_40.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * tmpvar_16));
  worldTangent_2 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_2.x;
  tmpvar_46.y = tmpvar_45.x;
  tmpvar_46.z = worldNormal_3.x;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.y;
  tmpvar_47.y = tmpvar_45.y;
  tmpvar_47.z = worldNormal_3.y;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.z;
  tmpvar_48.y = tmpvar_45.z;
  tmpvar_48.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
bool tb8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t7.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t13.x = dot(t7.xyz, t7.xyz);
    t13.x = inversesqrt(t13.x);
    t0.xy = t13.xx * t7.xz;
    t0.zw = (-t0.yy);
    t7.x = dot(t0.xz, t0.xw);
    t13.xy = t0.yx * vec2(-1.0, 1.0);
    t7.x = inversesqrt(t7.x);
    t7.xy = t7.xx * t13.xy;
    t3.xz = t7.xy * vec2(t8);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t2.xyw = vec3(t19) * t4.xyz;
    t19 = dot(t3.xyz, t3.xyz);
    t19 = sqrt(t19);
    t2.xyw = vec3(t19) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t7.y * _World2Object[0].x;
    t3.z = t7.y * _World2Object[1].x;
    t3.x = t7.y * _World2Object[2].x;
    t4.y = (-t7.x) * _World2Object[0].z;
    t4.z = (-t7.x) * _World2Object[1].z;
    t4.x = (-t7.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t4.xyz = t7.yyy * _Object2World[2].yzx;
    t4.xyz = _Object2World[0].yzx * t7.xxx + t4.xyz;
    t1 = dot(t4.xyz, t4.xyz);
    t1 = inversesqrt(t1);
    t4.xyz = vec3(t1) * t4.xyz;
    t10_5.xyz = t3.xyz * t4.xyz;
    t10_5.xyz = t3.zxy * t4.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD2.x = t4.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = max(abs(t7.y), abs(t7.x));
    t1 = float(1.0) / t1;
    t19 = min(abs(t7.y), abs(t7.x));
    t1 = t1 * t19;
    t19 = t1 * t1;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t19 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t7.y)<abs(t7.x);
    t2.x = tb8 ? t2.x : float(0.0);
    t1 = t1 * t19 + t2.x;
    tb19 = t7.y<(-t7.y);
    t19 = tb19 ? -3.14159274 : float(0.0);
    t1 = t19 + t1;
    t19 = min(t7.y, (-t7.x));
    t7.x = max(t7.y, (-t7.x));
    tb7 = t7.x>=(-t7.x);
    tb13 = t19<(-t19);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb13) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb7)) ? t13.xy : t2.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_16.z) + (v_40.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * tmpvar_16));
  worldTangent_2 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_2.x;
  tmpvar_46.y = tmpvar_45.x;
  tmpvar_46.z = worldNormal_3.x;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.y;
  tmpvar_47.y = tmpvar_45.y;
  tmpvar_47.z = worldNormal_3.y;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.z;
  tmpvar_48.y = tmpvar_45.z;
  tmpvar_48.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
bool tb8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t7.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t13.x = dot(t7.xyz, t7.xyz);
    t13.x = inversesqrt(t13.x);
    t0.xy = t13.xx * t7.xz;
    t0.zw = (-t0.yy);
    t7.x = dot(t0.xz, t0.xw);
    t13.xy = t0.yx * vec2(-1.0, 1.0);
    t7.x = inversesqrt(t7.x);
    t7.xy = t7.xx * t13.xy;
    t3.xz = t7.xy * vec2(t8);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t2.xyw = vec3(t19) * t4.xyz;
    t19 = dot(t3.xyz, t3.xyz);
    t19 = sqrt(t19);
    t2.xyw = vec3(t19) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t7.y * _World2Object[0].x;
    t3.z = t7.y * _World2Object[1].x;
    t3.x = t7.y * _World2Object[2].x;
    t4.y = (-t7.x) * _World2Object[0].z;
    t4.z = (-t7.x) * _World2Object[1].z;
    t4.x = (-t7.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t4.xyz = t7.yyy * _Object2World[2].yzx;
    t4.xyz = _Object2World[0].yzx * t7.xxx + t4.xyz;
    t1 = dot(t4.xyz, t4.xyz);
    t1 = inversesqrt(t1);
    t4.xyz = vec3(t1) * t4.xyz;
    t10_5.xyz = t3.xyz * t4.xyz;
    t10_5.xyz = t3.zxy * t4.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD2.x = t4.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = max(abs(t7.y), abs(t7.x));
    t1 = float(1.0) / t1;
    t19 = min(abs(t7.y), abs(t7.x));
    t1 = t1 * t19;
    t19 = t1 * t1;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t19 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t7.y)<abs(t7.x);
    t2.x = tb8 ? t2.x : float(0.0);
    t1 = t1 * t19 + t2.x;
    tb19 = t7.y<(-t7.y);
    t19 = tb19 ? -3.14159274 : float(0.0);
    t1 = t19 + t1;
    t19 = min(t7.y, (-t7.x));
    t7.x = max(t7.y, (-t7.x));
    tb7 = t7.x>=(-t7.x);
    tb13 = t19<(-t19);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb13) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb7)) ? t13.xy : t2.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_3.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_3.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_3.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_14 = dot(t10_3.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_16.z) + (v_40.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * tmpvar_16));
  worldTangent_2 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_2.x;
  tmpvar_46.y = tmpvar_45.x;
  tmpvar_46.z = worldNormal_3.x;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.y;
  tmpvar_47.y = tmpvar_45.y;
  tmpvar_47.z = worldNormal_3.y;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.z;
  tmpvar_48.y = tmpvar_45.z;
  tmpvar_48.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_6.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_5 = tmpvar_23;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
bool tb8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t7.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t13.x = dot(t7.xyz, t7.xyz);
    t13.x = inversesqrt(t13.x);
    t0.xy = t13.xx * t7.xz;
    t0.zw = (-t0.yy);
    t7.x = dot(t0.xz, t0.xw);
    t13.xy = t0.yx * vec2(-1.0, 1.0);
    t7.x = inversesqrt(t7.x);
    t7.xy = t7.xx * t13.xy;
    t3.xz = t7.xy * vec2(t8);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t2.xyw = vec3(t19) * t4.xyz;
    t19 = dot(t3.xyz, t3.xyz);
    t19 = sqrt(t19);
    t2.xyw = vec3(t19) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t7.y * _World2Object[0].x;
    t3.z = t7.y * _World2Object[1].x;
    t3.x = t7.y * _World2Object[2].x;
    t4.y = (-t7.x) * _World2Object[0].z;
    t4.z = (-t7.x) * _World2Object[1].z;
    t4.x = (-t7.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t4.xyz = t7.yyy * _Object2World[2].yzx;
    t4.xyz = _Object2World[0].yzx * t7.xxx + t4.xyz;
    t1 = dot(t4.xyz, t4.xyz);
    t1 = inversesqrt(t1);
    t4.xyz = vec3(t1) * t4.xyz;
    t10_5.xyz = t3.xyz * t4.xyz;
    t10_5.xyz = t3.zxy * t4.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD2.x = t4.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = max(abs(t7.y), abs(t7.x));
    t1 = float(1.0) / t1;
    t19 = min(abs(t7.y), abs(t7.x));
    t1 = t1 * t19;
    t19 = t1 * t1;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t19 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t7.y)<abs(t7.x);
    t2.x = tb8 ? t2.x : float(0.0);
    t1 = t1 * t19 + t2.x;
    tb19 = t7.y<(-t7.y);
    t19 = tb19 ? -3.14159274 : float(0.0);
    t1 = t19 + t1;
    t19 = min(t7.y, (-t7.x));
    t7.x = max(t7.y, (-t7.x));
    tb7 = t7.x>=(-t7.x);
    tb13 = t19<(-t19);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb13) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb7)) ? t13.xy : t2.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
bool tb11;
mediump float t16_18;
lowp float t10_18;
mediump float t16_23;
highp float t25;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb11 = 0.0<t16_0.z;
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    t10_1.x = (tb11) ? 1.0 : 0.0;
    t10_1.x = t10_4 * t10_1.x;
    t10_1.x = t10_18 * t10_1.x;
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_23 = dot(t10_6.xyz, t4.xyz);
    t16_23 = max(t16_23, 0.0);
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_16.z) + (v_40.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * tmpvar_16));
  worldTangent_2 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_2.x;
  tmpvar_46.y = tmpvar_45.x;
  tmpvar_46.z = worldNormal_3.x;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.y;
  tmpvar_47.y = tmpvar_45.y;
  tmpvar_47.z = worldNormal_3.y;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.z;
  tmpvar_48.y = tmpvar_45.z;
  tmpvar_48.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
bool tb8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t7.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t13.x = dot(t7.xyz, t7.xyz);
    t13.x = inversesqrt(t13.x);
    t0.xy = t13.xx * t7.xz;
    t0.zw = (-t0.yy);
    t7.x = dot(t0.xz, t0.xw);
    t13.xy = t0.yx * vec2(-1.0, 1.0);
    t7.x = inversesqrt(t7.x);
    t7.xy = t7.xx * t13.xy;
    t3.xz = t7.xy * vec2(t8);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t2.xyw = vec3(t19) * t4.xyz;
    t19 = dot(t3.xyz, t3.xyz);
    t19 = sqrt(t19);
    t2.xyw = vec3(t19) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t7.y * _World2Object[0].x;
    t3.z = t7.y * _World2Object[1].x;
    t3.x = t7.y * _World2Object[2].x;
    t4.y = (-t7.x) * _World2Object[0].z;
    t4.z = (-t7.x) * _World2Object[1].z;
    t4.x = (-t7.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t4.xyz = t7.yyy * _Object2World[2].yzx;
    t4.xyz = _Object2World[0].yzx * t7.xxx + t4.xyz;
    t1 = dot(t4.xyz, t4.xyz);
    t1 = inversesqrt(t1);
    t4.xyz = vec3(t1) * t4.xyz;
    t10_5.xyz = t3.xyz * t4.xyz;
    t10_5.xyz = t3.zxy * t4.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD2.x = t4.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = max(abs(t7.y), abs(t7.x));
    t1 = float(1.0) / t1;
    t19 = min(abs(t7.y), abs(t7.x));
    t1 = t1 * t19;
    t19 = t1 * t1;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t19 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t7.y)<abs(t7.x);
    t2.x = tb8 ? t2.x : float(0.0);
    t1 = t1 * t19 + t2.x;
    tb19 = t7.y<(-t7.y);
    t19 = tb19 ? -3.14159274 : float(0.0);
    t1 = t19 + t1;
    t19 = min(t7.y, (-t7.x));
    t7.x = max(t7.y, (-t7.x));
    tb7 = t7.x>=(-t7.x);
    tb13 = t19<(-t19);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb13) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb7)) ? t13.xy : t2.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_6 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_16.z) + (v_40.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * tmpvar_16));
  worldTangent_2 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_2.x;
  tmpvar_46.y = tmpvar_45.x;
  tmpvar_46.z = worldNormal_3.x;
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.y;
  tmpvar_47.y = tmpvar_45.y;
  tmpvar_47.z = worldNormal_3.y;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.z;
  tmpvar_48.y = tmpvar_45.z;
  tmpvar_48.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
bool tb8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
bool tb21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t7.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t7.y;
    t7.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t14.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_COLOR0.w * 255.0;
    tu14 = uint(t14.x);
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    t3.y = t20 * in_TEXCOORD1.y;
    t8 = (-t8) * 0.25 + t3.y;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t20 = log2(t8);
    t20 = t20 * _ST_WindGlobal.w;
    t20 = exp2(t20);
    tb21 = t8!=0.0;
    t8 = (tb21) ? t20 : t8;
    t2.x = t8 * t2.x;
    t8 = in_TEXCOORD0.x + -0.5;
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t13.x = dot(t7.xyz, t7.xyz);
    t13.x = inversesqrt(t13.x);
    t0.xy = t13.xx * t7.xz;
    t0.zw = (-t0.yy);
    t7.x = dot(t0.xz, t0.xw);
    t13.xy = t0.yx * vec2(-1.0, 1.0);
    t7.x = inversesqrt(t7.x);
    t7.xy = t7.xx * t13.xy;
    t3.xz = t7.xy * vec2(t8);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t2.xyw = vec3(t19) * t4.xyz;
    t19 = dot(t3.xyz, t3.xyz);
    t19 = sqrt(t19);
    t2.xyw = vec3(t19) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t7.y * _World2Object[0].x;
    t3.z = t7.y * _World2Object[1].x;
    t3.x = t7.y * _World2Object[2].x;
    t4.y = (-t7.x) * _World2Object[0].z;
    t4.z = (-t7.x) * _World2Object[1].z;
    t4.x = (-t7.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t4.xyz = t7.yyy * _Object2World[2].yzx;
    t4.xyz = _Object2World[0].yzx * t7.xxx + t4.xyz;
    t1 = dot(t4.xyz, t4.xyz);
    t1 = inversesqrt(t1);
    t4.xyz = vec3(t1) * t4.xyz;
    t10_5.xyz = t3.xyz * t4.xyz;
    t10_5.xyz = t3.zxy * t4.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD2.x = t4.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = max(abs(t7.y), abs(t7.x));
    t1 = float(1.0) / t1;
    t19 = min(abs(t7.y), abs(t7.x));
    t1 = t1 * t19;
    t19 = t1 * t1;
    t2.x = t19 * 0.0208350997 + -0.0851330012;
    t2.x = t19 * t2.x + 0.180141002;
    t2.x = t19 * t2.x + -0.330299497;
    t19 = t19 * t2.x + 0.999866009;
    t2.x = t19 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb8 = abs(t7.y)<abs(t7.x);
    t2.x = tb8 ? t2.x : float(0.0);
    t1 = t1 * t19 + t2.x;
    tb19 = t7.y<(-t7.y);
    t19 = tb19 ? -3.14159274 : float(0.0);
    t1 = t19 + t1;
    t19 = min(t7.y, (-t7.x));
    t7.x = max(t7.y, (-t7.x));
    tb7 = t7.x>=(-t7.x);
    tb13 = t19<(-t19);
    ti7 = int(uint(tb7) * 0xffffffffu & uint(tb13) * 0xffffffffu);
    t1 = (ti7 != 0) ? (-t1) : t1;
    tb7 = t1<0.0;
    t7.x = tb7 ? 6.28318548 : float(0.0);
    t1 = t7.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    tb7 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb7) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    tu1 = uint(t1);
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb7)) ? t13.xy : t2.xy;
    vs_TEXCOORD5.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * tmpvar_16));
  worldTangent_2 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.x;
  tmpvar_47.y = tmpvar_46.x;
  tmpvar_47.z = worldNormal_3.x;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.y;
  tmpvar_48.y = tmpvar_46.y;
  tmpvar_48.z = worldNormal_3.y;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_2.z;
  tmpvar_49.y = tmpvar_46.z;
  tmpvar_49.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t4.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t23 = dot(t4.xyz, t4.xyz);
    t23 = inversesqrt(t23);
    t0.xy = vec2(t23) * t4.xz;
    t0.zw = (-t0.yy);
    t23 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t23 = inversesqrt(t23);
    t4.xy = vec2(t23) * t4.xy;
    t3.xz = vec2(t9) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = sqrt(t24);
    t2.xyw = t2.xyw * vec3(t24);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t4.y * _World2Object[0].x;
    t3.z = t4.y * _World2Object[1].x;
    t3.x = t4.y * _World2Object[2].x;
    t5.y = (-t4.x) * _World2Object[0].z;
    t5.z = (-t4.x) * _World2Object[1].z;
    t5.x = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1 = dot(t5.xyz, t5.xyz);
    t1 = inversesqrt(t1);
    t5.xyz = vec3(t1) * t5.xyz;
    t10_6.xyz = t3.xyz * t5.xyz;
    t10_6.xyz = t3.zxy * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = t8.y + t8.x;
    t1 = t8.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD5.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t8.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t8.x;
    t8.x = t1 * t1;
    t15.x = t8.x * 0.0208350997 + -0.0851330012;
    t15.x = t8.x * t15.x + 0.180141002;
    t15.x = t8.x * t15.x + -0.330299497;
    t8.x = t8.x * t15.x + 0.999866009;
    t15.x = t8.x * t1;
    t15.x = t15.x * -2.0 + 1.57079637;
    tb22 = abs(t4.y)<abs(t4.x);
    t15.x = tb22 ? t15.x : float(0.0);
    t1 = t1 * t8.x + t15.x;
    tb8 = t4.y<(-t4.y);
    t8.x = tb8 ? -3.14159274 : float(0.0);
    t1 = t8.x + t1;
    t8.x = min(t4.y, (-t4.x));
    t15.x = max(t4.y, (-t4.x));
    tb15 = t15.x>=(-t15.x);
    tb8 = t8.x<(-t8.x);
    ti8 = int(uint(tb15) * 0xffffffffu & uint(tb8) * 0xffffffffu);
    t1 = (ti8 != 0) ? (-t1) : t1;
    tb8 = t1<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1 = t8.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb8) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb18 = t10_1.x<0.0;
    if((int(tb18) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    t16_3.x = max(t16_8.z, t16_8.y);
    t16_3.x = max(t16_8.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * tmpvar_16));
  worldTangent_2 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.x;
  tmpvar_47.y = tmpvar_46.x;
  tmpvar_47.z = worldNormal_3.x;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.y;
  tmpvar_48.y = tmpvar_46.y;
  tmpvar_48.z = worldNormal_3.y;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_2.z;
  tmpvar_49.y = tmpvar_46.z;
  tmpvar_49.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t4.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t23 = dot(t4.xyz, t4.xyz);
    t23 = inversesqrt(t23);
    t0.xy = vec2(t23) * t4.xz;
    t0.zw = (-t0.yy);
    t23 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t23 = inversesqrt(t23);
    t4.xy = vec2(t23) * t4.xy;
    t3.xz = vec2(t9) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = sqrt(t24);
    t2.xyw = t2.xyw * vec3(t24);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t4.y * _World2Object[0].x;
    t3.z = t4.y * _World2Object[1].x;
    t3.x = t4.y * _World2Object[2].x;
    t5.y = (-t4.x) * _World2Object[0].z;
    t5.z = (-t4.x) * _World2Object[1].z;
    t5.x = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1 = dot(t5.xyz, t5.xyz);
    t1 = inversesqrt(t1);
    t5.xyz = vec3(t1) * t5.xyz;
    t10_6.xyz = t3.xyz * t5.xyz;
    t10_6.xyz = t3.zxy * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = t8.y + t8.x;
    t1 = t8.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD5.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t8.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t8.x;
    t8.x = t1 * t1;
    t15.x = t8.x * 0.0208350997 + -0.0851330012;
    t15.x = t8.x * t15.x + 0.180141002;
    t15.x = t8.x * t15.x + -0.330299497;
    t8.x = t8.x * t15.x + 0.999866009;
    t15.x = t8.x * t1;
    t15.x = t15.x * -2.0 + 1.57079637;
    tb22 = abs(t4.y)<abs(t4.x);
    t15.x = tb22 ? t15.x : float(0.0);
    t1 = t1 * t8.x + t15.x;
    tb8 = t4.y<(-t4.y);
    t8.x = tb8 ? -3.14159274 : float(0.0);
    t1 = t8.x + t1;
    t8.x = min(t4.y, (-t4.x));
    t15.x = max(t4.y, (-t4.x));
    tb15 = t15.x>=(-t15.x);
    tb8 = t8.x<(-t8.x);
    ti8 = int(uint(tb15) * 0xffffffffu & uint(tb8) * 0xffffffffu);
    t1 = (ti8 != 0) ? (-t1) : t1;
    tb8 = t1<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1 = t8.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb8) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    t16_3 = max(t16_7.z, t16_7.y);
    t16_3 = max(t16_7.x, t16_3);
    t16_2.x = t16_2.x / t16_3;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * tmpvar_16));
  worldTangent_2 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.x;
  tmpvar_47.y = tmpvar_46.x;
  tmpvar_47.z = worldNormal_3.x;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.y;
  tmpvar_48.y = tmpvar_46.y;
  tmpvar_48.z = worldNormal_3.y;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_2.z;
  tmpvar_49.y = tmpvar_46.z;
  tmpvar_49.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t4.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t23 = dot(t4.xyz, t4.xyz);
    t23 = inversesqrt(t23);
    t0.xy = vec2(t23) * t4.xz;
    t0.zw = (-t0.yy);
    t23 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t23 = inversesqrt(t23);
    t4.xy = vec2(t23) * t4.xy;
    t3.xz = vec2(t9) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = sqrt(t24);
    t2.xyw = t2.xyw * vec3(t24);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t4.y * _World2Object[0].x;
    t3.z = t4.y * _World2Object[1].x;
    t3.x = t4.y * _World2Object[2].x;
    t5.y = (-t4.x) * _World2Object[0].z;
    t5.z = (-t4.x) * _World2Object[1].z;
    t5.x = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1 = dot(t5.xyz, t5.xyz);
    t1 = inversesqrt(t1);
    t5.xyz = vec3(t1) * t5.xyz;
    t10_6.xyz = t3.xyz * t5.xyz;
    t10_6.xyz = t3.zxy * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = t8.y + t8.x;
    t1 = t8.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD5.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t8.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t8.x;
    t8.x = t1 * t1;
    t15.x = t8.x * 0.0208350997 + -0.0851330012;
    t15.x = t8.x * t15.x + 0.180141002;
    t15.x = t8.x * t15.x + -0.330299497;
    t8.x = t8.x * t15.x + 0.999866009;
    t15.x = t8.x * t1;
    t15.x = t15.x * -2.0 + 1.57079637;
    tb22 = abs(t4.y)<abs(t4.x);
    t15.x = tb22 ? t15.x : float(0.0);
    t1 = t1 * t8.x + t15.x;
    tb8 = t4.y<(-t4.y);
    t8.x = tb8 ? -3.14159274 : float(0.0);
    t1 = t8.x + t1;
    t8.x = min(t4.y, (-t4.x));
    t15.x = max(t4.y, (-t4.x));
    tb15 = t15.x>=(-t15.x);
    tb8 = t8.x<(-t8.x);
    ti8 = int(uint(tb15) * 0xffffffffu & uint(tb8) * 0xffffffffu);
    t1 = (ti8 != 0) ? (-t1) : t1;
    tb8 = t1<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1 = t8.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb8) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb21 = t10_1.x<0.0;
    if((int(tb21) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    t16_3.x = max(t16_9.z, t16_9.y);
    t16_3.x = max(t16_9.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb11 = 0.0<t16_0.z;
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    t10_1.x = (tb11) ? 1.0 : 0.0;
    t10_1.x = t10_4 * t10_1.x;
    t10_1.x = t10_18 * t10_1.x;
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_23 = dot(t10_6.xyz, t4.xyz);
    t16_23 = max(t16_23, 0.0);
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * tmpvar_16));
  worldTangent_2 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.x;
  tmpvar_47.y = tmpvar_46.x;
  tmpvar_47.z = worldNormal_3.x;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.y;
  tmpvar_48.y = tmpvar_46.y;
  tmpvar_48.z = worldNormal_3.y;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_2.z;
  tmpvar_49.y = tmpvar_46.z;
  tmpvar_49.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t4.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t23 = dot(t4.xyz, t4.xyz);
    t23 = inversesqrt(t23);
    t0.xy = vec2(t23) * t4.xz;
    t0.zw = (-t0.yy);
    t23 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t23 = inversesqrt(t23);
    t4.xy = vec2(t23) * t4.xy;
    t3.xz = vec2(t9) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = sqrt(t24);
    t2.xyw = t2.xyw * vec3(t24);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t4.y * _World2Object[0].x;
    t3.z = t4.y * _World2Object[1].x;
    t3.x = t4.y * _World2Object[2].x;
    t5.y = (-t4.x) * _World2Object[0].z;
    t5.z = (-t4.x) * _World2Object[1].z;
    t5.x = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1 = dot(t5.xyz, t5.xyz);
    t1 = inversesqrt(t1);
    t5.xyz = vec3(t1) * t5.xyz;
    t10_6.xyz = t3.xyz * t5.xyz;
    t10_6.xyz = t3.zxy * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = t8.y + t8.x;
    t1 = t8.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD5.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t8.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t8.x;
    t8.x = t1 * t1;
    t15.x = t8.x * 0.0208350997 + -0.0851330012;
    t15.x = t8.x * t15.x + 0.180141002;
    t15.x = t8.x * t15.x + -0.330299497;
    t8.x = t8.x * t15.x + 0.999866009;
    t15.x = t8.x * t1;
    t15.x = t15.x * -2.0 + 1.57079637;
    tb22 = abs(t4.y)<abs(t4.x);
    t15.x = tb22 ? t15.x : float(0.0);
    t1 = t1 * t8.x + t15.x;
    tb8 = t4.y<(-t4.y);
    t8.x = tb8 ? -3.14159274 : float(0.0);
    t1 = t8.x + t1;
    t8.x = min(t4.y, (-t4.x));
    t15.x = max(t4.y, (-t4.x));
    tb15 = t15.x>=(-t15.x);
    tb8 = t8.x<(-t8.x);
    ti8 = int(uint(tb15) * 0xffffffffu & uint(tb8) * 0xffffffffu);
    t1 = (ti8 != 0) ? (-t1) : t1;
    tb8 = t1<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1 = t8.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb8) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb18 = t10_1.x<0.0;
    if((int(tb18) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    t16_3.x = max(t16_8.z, t16_8.y);
    t16_3.x = max(t16_8.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_6 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * tmpvar_16));
  worldTangent_2 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_47;
  tmpvar_47.x = worldTangent_2.x;
  tmpvar_47.y = tmpvar_46.x;
  tmpvar_47.z = worldNormal_3.x;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_2.y;
  tmpvar_48.y = tmpvar_46.y;
  tmpvar_48.z = worldNormal_3.y;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_2.z;
  tmpvar_49.y = tmpvar_46.z;
  tmpvar_49.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t4.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t23 = dot(t4.xyz, t4.xyz);
    t23 = inversesqrt(t23);
    t0.xy = vec2(t23) * t4.xz;
    t0.zw = (-t0.yy);
    t23 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t23 = inversesqrt(t23);
    t4.xy = vec2(t23) * t4.xy;
    t3.xz = vec2(t9) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = sqrt(t24);
    t2.xyw = t2.xyw * vec3(t24);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.y = t4.y * _World2Object[0].x;
    t3.z = t4.y * _World2Object[1].x;
    t3.x = t4.y * _World2Object[2].x;
    t5.y = (-t4.x) * _World2Object[0].z;
    t5.z = (-t4.x) * _World2Object[1].z;
    t5.x = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1 = dot(t5.xyz, t5.xyz);
    t1 = inversesqrt(t1);
    t5.xyz = vec3(t1) * t5.xyz;
    t10_6.xyz = t3.xyz * t5.xyz;
    t10_6.xyz = t3.zxy * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.y;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.z = t3.z;
    vs_TEXCOORD2.z = t3.x;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1 = t8.y + t8.x;
    t1 = t8.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD5.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t8.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t8.x;
    t8.x = t1 * t1;
    t15.x = t8.x * 0.0208350997 + -0.0851330012;
    t15.x = t8.x * t15.x + 0.180141002;
    t15.x = t8.x * t15.x + -0.330299497;
    t8.x = t8.x * t15.x + 0.999866009;
    t15.x = t8.x * t1;
    t15.x = t15.x * -2.0 + 1.57079637;
    tb22 = abs(t4.y)<abs(t4.x);
    t15.x = tb22 ? t15.x : float(0.0);
    t1 = t1 * t8.x + t15.x;
    tb8 = t4.y<(-t4.y);
    t8.x = tb8 ? -3.14159274 : float(0.0);
    t1 = t8.x + t1;
    t8.x = min(t4.y, (-t4.x));
    t15.x = max(t4.y, (-t4.x));
    tb15 = t15.x>=(-t15.x);
    tb8 = t8.x<(-t8.x);
    ti8 = int(uint(tb15) * 0xffffffffu & uint(tb8) * 0xffffffffu);
    t1 = (ti8 != 0) ? (-t1) : t1;
    tb8 = t1<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1 = t8.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb8) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_26;
  hPos_26 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_27;
  highp vec4 o_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (hPos_26 * 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = (tmpvar_29.y * _ProjectionParams.x);
  o_28.xy = (tmpvar_30 + tmpvar_29.w);
  o_28.zw = hPos_26.zw;
  highp vec3 tmpvar_31;
  tmpvar_31 = o_28.xyw;
  screenPos_27 = tmpvar_31;
  screenPos_27.xy = (screenPos_27.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_35;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_27;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
highp float t4;
highp vec2 t5;
bool tb5;
highp vec2 t8;
highp float t12;
highp uint tu12;
highp float t13;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t8.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t8.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t4 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t4;
    t4 = float(1.0) / _ST_WindGlobal.z;
    t8.x = in_TEXCOORD0.x + -0.5;
    t12 = in_COLOR0.w * 255.0;
    tu12 = uint(t12);
    t8.x = t8.x * _TreeSize[int(tu12) + 0].x;
    t8.x = t8.x * in_TEXCOORD1.x;
    t1.xyz = t8.xxx * _BillboardTangent.xyzx.xyz;
    t8.x = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t1.w = t8.x * in_TEXCOORD1.y + t1.y;
    t4 = (-t4) * 0.25 + t1.w;
    t4 = max(t4, 0.0);
    t4 = t4 * _ST_WindGlobal.z;
    t8.x = log2(t4);
    t8.x = t8.x * _ST_WindGlobal.w;
    t8.x = exp2(t8.x);
    tb5 = t4!=0.0;
    t4 = (tb5) ? t8.x : t4;
    t0.x = t4 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t5.x = dot(t0.xyz, t0.xyz);
    t5.x = inversesqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t5.x = dot(t1.xzw, t1.xzw);
    t5.x = sqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb5 = 0.0<t16_2;
    t0.xyz = (bool(tb5)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    tb5 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb5) ? t1.x : (-t1.x);
    t12 = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu12 = uint(t12);
    tb1 = _ImageTexCoords[int(tu12) + 0].w<0.0;
    t5.xy = (-_ImageTexCoords[int(tu12) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu12) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu12) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu12) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb1)) ? t5.xy : t3.xy;
    vs_TEXCOORD3.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t12 = t0.y * _ProjectionParams.x;
    t1.w = t12 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t16;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_26;
  hPos_26 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_27;
  highp vec4 o_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (hPos_26 * 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = (tmpvar_29.y * _ProjectionParams.x);
  o_28.xy = (tmpvar_30 + tmpvar_29.w);
  o_28.zw = hPos_26.zw;
  highp vec3 tmpvar_31;
  tmpvar_31 = o_28.xyw;
  screenPos_27 = tmpvar_31;
  screenPos_27.xy = (screenPos_27.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_35;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_27;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
highp float t4;
highp vec2 t5;
bool tb5;
highp vec2 t8;
highp float t12;
highp uint tu12;
highp float t13;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t8.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t8.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t4 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t4;
    t4 = float(1.0) / _ST_WindGlobal.z;
    t8.x = in_TEXCOORD0.x + -0.5;
    t12 = in_COLOR0.w * 255.0;
    tu12 = uint(t12);
    t8.x = t8.x * _TreeSize[int(tu12) + 0].x;
    t8.x = t8.x * in_TEXCOORD1.x;
    t1.xyz = t8.xxx * _BillboardTangent.xyzx.xyz;
    t8.x = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t1.w = t8.x * in_TEXCOORD1.y + t1.y;
    t4 = (-t4) * 0.25 + t1.w;
    t4 = max(t4, 0.0);
    t4 = t4 * _ST_WindGlobal.z;
    t8.x = log2(t4);
    t8.x = t8.x * _ST_WindGlobal.w;
    t8.x = exp2(t8.x);
    tb5 = t4!=0.0;
    t4 = (tb5) ? t8.x : t4;
    t0.x = t4 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t5.x = dot(t0.xyz, t0.xyz);
    t5.x = inversesqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t5.x = dot(t1.xzw, t1.xzw);
    t5.x = sqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb5 = 0.0<t16_2;
    t0.xyz = (bool(tb5)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    tb5 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb5) ? t1.x : (-t1.x);
    t12 = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu12 = uint(t12);
    tb1 = _ImageTexCoords[int(tu12) + 0].w<0.0;
    t5.xy = (-_ImageTexCoords[int(tu12) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu12) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu12) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu12) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb1)) ? t5.xy : t3.xy;
    vs_TEXCOORD3.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t12 = t0.y * _ProjectionParams.x;
    t1.w = t12 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_15;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_4 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_4 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_15 = max(t16_15, 0.0);
    t16_3.xyz = vec3(t16_15) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_26;
  hPos_26 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_27;
  highp vec4 o_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (hPos_26 * 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = (tmpvar_29.y * _ProjectionParams.x);
  o_28.xy = (tmpvar_30 + tmpvar_29.w);
  o_28.zw = hPos_26.zw;
  highp vec3 tmpvar_31;
  tmpvar_31 = o_28.xyw;
  screenPos_27 = tmpvar_31;
  screenPos_27.xy = (screenPos_27.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_35;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_27;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_5.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
highp float t4;
highp vec2 t5;
bool tb5;
highp vec2 t8;
highp float t12;
highp uint tu12;
highp float t13;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t8.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t8.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t4 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t4;
    t4 = float(1.0) / _ST_WindGlobal.z;
    t8.x = in_TEXCOORD0.x + -0.5;
    t12 = in_COLOR0.w * 255.0;
    tu12 = uint(t12);
    t8.x = t8.x * _TreeSize[int(tu12) + 0].x;
    t8.x = t8.x * in_TEXCOORD1.x;
    t1.xyz = t8.xxx * _BillboardTangent.xyzx.xyz;
    t8.x = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t1.w = t8.x * in_TEXCOORD1.y + t1.y;
    t4 = (-t4) * 0.25 + t1.w;
    t4 = max(t4, 0.0);
    t4 = t4 * _ST_WindGlobal.z;
    t8.x = log2(t4);
    t8.x = t8.x * _ST_WindGlobal.w;
    t8.x = exp2(t8.x);
    tb5 = t4!=0.0;
    t4 = (tb5) ? t8.x : t4;
    t0.x = t4 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t5.x = dot(t0.xyz, t0.xyz);
    t5.x = inversesqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t5.x = dot(t1.xzw, t1.xzw);
    t5.x = sqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb5 = 0.0<t16_2;
    t0.xyz = (bool(tb5)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    tb5 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb5) ? t1.x : (-t1.x);
    t12 = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu12 = uint(t12);
    tb1 = _ImageTexCoords[int(tu12) + 0].w<0.0;
    t5.xy = (-_ImageTexCoords[int(tu12) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu12) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu12) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu12) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb1)) ? t5.xy : t3.xy;
    vs_TEXCOORD3.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t12 = t0.y * _ProjectionParams.x;
    t1.w = t12 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_4.xy = t16_0.xy / t16_0.ww;
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    tb6 = 0.0<t16_0.z;
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    t10_2 = (tb6) ? 1.0 : 0.0;
    t10_2 = t10_1 * t10_2;
    t10_2 = t10_11 * t10_2;
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_26;
  hPos_26 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_27;
  highp vec4 o_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (hPos_26 * 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = (tmpvar_29.y * _ProjectionParams.x);
  o_28.xy = (tmpvar_30 + tmpvar_29.w);
  o_28.zw = hPos_26.zw;
  highp vec3 tmpvar_31;
  tmpvar_31 = o_28.xyw;
  screenPos_27 = tmpvar_31;
  screenPos_27.xy = (screenPos_27.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_35;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_27;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
highp float t4;
highp vec2 t5;
bool tb5;
highp vec2 t8;
highp float t12;
highp uint tu12;
highp float t13;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t8.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t8.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t4 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t4;
    t4 = float(1.0) / _ST_WindGlobal.z;
    t8.x = in_TEXCOORD0.x + -0.5;
    t12 = in_COLOR0.w * 255.0;
    tu12 = uint(t12);
    t8.x = t8.x * _TreeSize[int(tu12) + 0].x;
    t8.x = t8.x * in_TEXCOORD1.x;
    t1.xyz = t8.xxx * _BillboardTangent.xyzx.xyz;
    t8.x = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t1.w = t8.x * in_TEXCOORD1.y + t1.y;
    t4 = (-t4) * 0.25 + t1.w;
    t4 = max(t4, 0.0);
    t4 = t4 * _ST_WindGlobal.z;
    t8.x = log2(t4);
    t8.x = t8.x * _ST_WindGlobal.w;
    t8.x = exp2(t8.x);
    tb5 = t4!=0.0;
    t4 = (tb5) ? t8.x : t4;
    t0.x = t4 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t5.x = dot(t0.xyz, t0.xyz);
    t5.x = inversesqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t5.x = dot(t1.xzw, t1.xzw);
    t5.x = sqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb5 = 0.0<t16_2;
    t0.xyz = (bool(tb5)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    tb5 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb5) ? t1.x : (-t1.x);
    t12 = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu12 = uint(t12);
    tb1 = _ImageTexCoords[int(tu12) + 0].w<0.0;
    t5.xy = (-_ImageTexCoords[int(tu12) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu12) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu12) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu12) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb1)) ? t5.xy : t3.xy;
    vs_TEXCOORD3.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t12 = t0.y * _ProjectionParams.x;
    t1.w = t12 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
highp float t16;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    t16_1 = t10_6 * t10_1;
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_26;
  hPos_26 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_27;
  highp vec4 o_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (hPos_26 * 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = (tmpvar_29.y * _ProjectionParams.x);
  o_28.xy = (tmpvar_30 + tmpvar_29.w);
  o_28.zw = hPos_26.zw;
  highp vec3 tmpvar_31;
  tmpvar_31 = o_28.xyw;
  screenPos_27 = tmpvar_31;
  screenPos_27.xy = (screenPos_27.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_35;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_27;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
highp float t4;
highp vec2 t5;
bool tb5;
highp vec2 t8;
highp float t12;
highp uint tu12;
highp float t13;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t8.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t8.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t4 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t4;
    t4 = float(1.0) / _ST_WindGlobal.z;
    t8.x = in_TEXCOORD0.x + -0.5;
    t12 = in_COLOR0.w * 255.0;
    tu12 = uint(t12);
    t8.x = t8.x * _TreeSize[int(tu12) + 0].x;
    t8.x = t8.x * in_TEXCOORD1.x;
    t1.xyz = t8.xxx * _BillboardTangent.xyzx.xyz;
    t8.x = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    t1.w = t8.x * in_TEXCOORD1.y + t1.y;
    t4 = (-t4) * 0.25 + t1.w;
    t4 = max(t4, 0.0);
    t4 = t4 * _ST_WindGlobal.z;
    t8.x = log2(t4);
    t8.x = t8.x * _ST_WindGlobal.w;
    t8.x = exp2(t8.x);
    tb5 = t4!=0.0;
    t4 = (tb5) ? t8.x : t4;
    t0.x = t4 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t5.x = dot(t0.xyz, t0.xyz);
    t5.x = inversesqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t5.x = dot(t1.xzw, t1.xzw);
    t5.x = sqrt(t5.x);
    t0.xyz = t0.xyz * t5.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb5 = 0.0<t16_2;
    t0.xyz = (bool(tb5)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t13 = dot(t1.xyz, t1.xyz);
    t13 = inversesqrt(t13);
    t1.xyz = vec3(t13) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    tb5 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb5) ? t1.x : (-t1.x);
    t12 = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    tu12 = uint(t12);
    tb1 = _ImageTexCoords[int(tu12) + 0].w<0.0;
    t5.xy = (-_ImageTexCoords[int(tu12) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu12) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu12) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu12) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb1)) ? t5.xy : t3.xy;
    vs_TEXCOORD3.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t12 = t0.y * _ProjectionParams.x;
    t1.w = t12 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_26;
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
bool tb5;
highp float t6;
highp vec2 t10;
highp vec2 t11;
highp uint tu11;
highp float t15;
bool tb15;
bool tb16;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t11.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t11.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t15 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t15 = _ST_WindGlobal.y * t15 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t6 = in_TEXCOORD0.x + -0.5;
    t11.x = in_COLOR0.w * 255.0;
    tu11 = uint(t11.x);
    t6 = t6 * _TreeSize[int(tu11) + 0].x;
    t6 = t6 * in_TEXCOORD1.x;
    t2.xyz = vec3(t6) * _BillboardTangent.xyzx.xyz;
    t6 = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    t2.w = t6 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t6 = log2(t1.x);
    t6 = t6 * _ST_WindGlobal.w;
    t6 = exp2(t6);
    tb16 = t1.x!=0.0;
    t1.x = (tb16) ? t6 : t1.x;
    t15 = t15 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t15) + t2.xz;
    t3.y = t2.w;
    t15 = dot(t3.xyz, t3.xyz);
    t15 = inversesqrt(t15);
    t1.xyw = vec3(t15) * t3.xyz;
    t15 = dot(t2.xzw, t2.xzw);
    t15 = sqrt(t15);
    t1.xyw = vec3(t15) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb15 = 0.0<t16_4;
    t1.xyw = (bool(tb15)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t15 = dot(t2.xyz, t2.xyz);
    t15 = inversesqrt(t15);
    t2.xyz = vec3(t15) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    tb5 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb5) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_26;
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
bool tb5;
highp float t6;
highp vec2 t10;
highp vec2 t11;
highp uint tu11;
highp float t15;
bool tb15;
bool tb16;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t11.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t11.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t15 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t15 = _ST_WindGlobal.y * t15 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t6 = in_TEXCOORD0.x + -0.5;
    t11.x = in_COLOR0.w * 255.0;
    tu11 = uint(t11.x);
    t6 = t6 * _TreeSize[int(tu11) + 0].x;
    t6 = t6 * in_TEXCOORD1.x;
    t2.xyz = vec3(t6) * _BillboardTangent.xyzx.xyz;
    t6 = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    t2.w = t6 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t6 = log2(t1.x);
    t6 = t6 * _ST_WindGlobal.w;
    t6 = exp2(t6);
    tb16 = t1.x!=0.0;
    t1.x = (tb16) ? t6 : t1.x;
    t15 = t15 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t15) + t2.xz;
    t3.y = t2.w;
    t15 = dot(t3.xyz, t3.xyz);
    t15 = inversesqrt(t15);
    t1.xyw = vec3(t15) * t3.xyz;
    t15 = dot(t2.xzw, t2.xzw);
    t15 = sqrt(t15);
    t1.xyw = vec3(t15) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb15 = 0.0<t16_4;
    t1.xyw = (bool(tb15)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t15 = dot(t2.xyz, t2.xyz);
    t15 = inversesqrt(t15);
    t2.xyz = vec3(t15) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    tb5 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb5) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4 = max(t16_8.z, t16_8.y);
    t16_4 = max(t16_8.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_26;
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_5 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_22 = texture2D (_LightTexture0, P_23);
  highp vec3 LightCoord_24;
  LightCoord_24 = lightCoord_5.xyz;
  highp float tmpvar_25;
  tmpvar_25 = dot (LightCoord_24, LightCoord_24);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(tmpvar_25));
  mediump float tmpvar_27;
  tmpvar_27 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_26.w);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
bool tb5;
highp float t6;
highp vec2 t10;
highp vec2 t11;
highp uint tu11;
highp float t15;
bool tb15;
bool tb16;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t11.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t11.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t15 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t15 = _ST_WindGlobal.y * t15 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t6 = in_TEXCOORD0.x + -0.5;
    t11.x = in_COLOR0.w * 255.0;
    tu11 = uint(t11.x);
    t6 = t6 * _TreeSize[int(tu11) + 0].x;
    t6 = t6 * in_TEXCOORD1.x;
    t2.xyz = vec3(t6) * _BillboardTangent.xyzx.xyz;
    t6 = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    t2.w = t6 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t6 = log2(t1.x);
    t6 = t6 * _ST_WindGlobal.w;
    t6 = exp2(t6);
    tb16 = t1.x!=0.0;
    t1.x = (tb16) ? t6 : t1.x;
    t15 = t15 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t15) + t2.xz;
    t3.y = t2.w;
    t15 = dot(t3.xyz, t3.xyz);
    t15 = inversesqrt(t15);
    t1.xyw = vec3(t15) * t3.xyz;
    t15 = dot(t2.xzw, t2.xzw);
    t15 = sqrt(t15);
    t1.xyw = vec3(t15) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb15 = 0.0<t16_4;
    t1.xyw = (bool(tb15)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t15 = dot(t2.xyz, t2.xyz);
    t15 = inversesqrt(t15);
    t2.xyz = vec3(t15) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    tb5 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb5) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump vec3 t16_8;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_4.xy = t16_0.xy / t16_0.ww;
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    tb6 = 0.0<t16_0.z;
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    t10_2 = (tb6) ? 1.0 : 0.0;
    t10_2 = t10_1 * t10_2;
    t10_2 = t10_11 * t10_2;
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_26;
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, tmpvar_19).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
bool tb5;
highp float t6;
highp vec2 t10;
highp vec2 t11;
highp uint tu11;
highp float t15;
bool tb15;
bool tb16;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t11.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t11.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t15 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t15 = _ST_WindGlobal.y * t15 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t6 = in_TEXCOORD0.x + -0.5;
    t11.x = in_COLOR0.w * 255.0;
    tu11 = uint(t11.x);
    t6 = t6 * _TreeSize[int(tu11) + 0].x;
    t6 = t6 * in_TEXCOORD1.x;
    t2.xyz = vec3(t6) * _BillboardTangent.xyzx.xyz;
    t6 = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    t2.w = t6 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t6 = log2(t1.x);
    t6 = t6 * _ST_WindGlobal.w;
    t6 = exp2(t6);
    tb16 = t1.x!=0.0;
    t1.x = (tb16) ? t6 : t1.x;
    t15 = t15 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t15) + t2.xz;
    t3.y = t2.w;
    t15 = dot(t3.xyz, t3.xyz);
    t15 = inversesqrt(t15);
    t1.xyw = vec3(t15) * t3.xyz;
    t15 = dot(t2.xzw, t2.xzw);
    t15 = sqrt(t15);
    t1.xyw = vec3(t15) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb15 = 0.0<t16_4;
    t1.xyw = (bool(tb15)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t15 = dot(t2.xyz, t2.xyz);
    t15 = inversesqrt(t15);
    t2.xyz = vec3(t15) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    tb5 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb5) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    t16_1 = t10_6 * t10_1;
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_26;
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, tmpvar_19).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
bool tb5;
highp float t6;
highp vec2 t10;
highp vec2 t11;
highp uint tu11;
highp float t15;
bool tb15;
bool tb16;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t11.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t11.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t15 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t15 = _ST_WindGlobal.y * t15 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t6 = in_TEXCOORD0.x + -0.5;
    t11.x = in_COLOR0.w * 255.0;
    tu11 = uint(t11.x);
    t6 = t6 * _TreeSize[int(tu11) + 0].x;
    t6 = t6 * in_TEXCOORD1.x;
    t2.xyz = vec3(t6) * _BillboardTangent.xyzx.xyz;
    t6 = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    t2.w = t6 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t6 = log2(t1.x);
    t6 = t6 * _ST_WindGlobal.w;
    t6 = exp2(t6);
    tb16 = t1.x!=0.0;
    t1.x = (tb16) ? t6 : t1.x;
    t15 = t15 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t15) + t2.xz;
    t3.y = t2.w;
    t15 = dot(t3.xyz, t3.xyz);
    t15 = inversesqrt(t15);
    t1.xyw = vec3(t15) * t3.xyz;
    t15 = dot(t2.xzw, t2.xzw);
    t15 = sqrt(t15);
    t1.xyw = vec3(t15) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb15 = 0.0<t16_4;
    t1.xyw = (bool(tb15)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t15 = dot(t2.xyz, t2.xyz);
    t15 = inversesqrt(t15);
    t2.xyz = vec3(t15) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    tb5 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb5) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    tu0 = uint(t0.x);
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * _BillboardTangent));
  worldTangent_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_41;
  tmpvar_41.x = worldTangent_2.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = worldNormal_3.x;
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = worldNormal_3.y;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_41;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_43;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
highp vec2 t6;
bool tb6;
highp vec2 t10;
highp float t15;
highp uint tu15;
highp float t16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6.x = dot(t0.xyz, t0.xyz);
    t6.x = inversesqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t6.x = dot(t1.xzw, t1.xzw);
    t6.x = sqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = inversesqrt(t16);
    t3.xyz = vec3(t16) * t3.xyz;
    t10_4.xyz = t1.xyz * t3.xyz;
    t10_4.xyz = t1.zxy * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu15) + 0].x;
    tb6 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb6) ? t1.x : (-t1.x);
    t15 = t1.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu15 = uint(t15);
    tb1 = _ImageTexCoords[int(tu15) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu15) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu15) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu15) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu15) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb1)) ? t6.xy : t3.xy;
    vs_TEXCOORD5.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
highp float t22;
mediump float t16_24;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_7 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_7 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_24 = dot(t10_6.xyz, t1.xyz);
    t16_24 = max(t16_24, 0.0);
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * _BillboardTangent));
  worldTangent_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_41;
  tmpvar_41.x = worldTangent_2.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = worldNormal_3.x;
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = worldNormal_3.y;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_41;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_43;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
highp vec2 t6;
bool tb6;
highp vec2 t10;
highp float t15;
highp uint tu15;
highp float t16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6.x = dot(t0.xyz, t0.xyz);
    t6.x = inversesqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t6.x = dot(t1.xzw, t1.xzw);
    t6.x = sqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = inversesqrt(t16);
    t3.xyz = vec3(t16) * t3.xyz;
    t10_4.xyz = t1.xyz * t3.xyz;
    t10_4.xyz = t1.zxy * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu15) + 0].x;
    tb6 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb6) ? t1.x : (-t1.x);
    t15 = t1.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu15 = uint(t15);
    tb1 = _ImageTexCoords[int(tu15) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu15) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu15) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu15) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu15) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb1)) ? t6.xy : t3.xy;
    vs_TEXCOORD5.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_18 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * _BillboardTangent));
  worldTangent_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_41;
  tmpvar_41.x = worldTangent_2.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = worldNormal_3.x;
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = worldNormal_3.y;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_41;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_43;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_6 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  highp vec3 LightCoord_23;
  LightCoord_23 = lightCoord_6.xyz;
  highp float tmpvar_24;
  tmpvar_24 = dot (LightCoord_23, LightCoord_23);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_25.w);
  atten_5 = tmpvar_26;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
highp vec2 t6;
bool tb6;
highp vec2 t10;
highp float t15;
highp uint tu15;
highp float t16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6.x = dot(t0.xyz, t0.xyz);
    t6.x = inversesqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t6.x = dot(t1.xzw, t1.xzw);
    t6.x = sqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = inversesqrt(t16);
    t3.xyz = vec3(t16) * t3.xyz;
    t10_4.xyz = t1.xyz * t3.xyz;
    t10_4.xyz = t1.zxy * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu15) + 0].x;
    tb6 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb6) ? t1.x : (-t1.x);
    t15 = t1.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu15 = uint(t15);
    tb1 = _ImageTexCoords[int(tu15) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu15) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu15) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu15) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu15) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb1)) ? t6.xy : t3.xy;
    vs_TEXCOORD5.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_7 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_7 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_4.xy = t16_0.xy / t16_0.ww;
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    tb8 = 0.0<t16_0.z;
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    t10_2.x = (tb8) ? 1.0 : 0.0;
    t10_2.x = t10_1 * t10_2.x;
    t10_2.x = t10_15 * t10_2.x;
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_24 = dot(t10_6.xyz, t1.xyz);
    t16_24 = max(t16_24, 0.0);
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * _BillboardTangent));
  worldTangent_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_41;
  tmpvar_41.x = worldTangent_2.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = worldNormal_3.x;
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = worldNormal_3.y;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_41;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_43;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, tmpvar_18).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
highp vec2 t6;
bool tb6;
highp vec2 t10;
highp float t15;
highp uint tu15;
highp float t16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6.x = dot(t0.xyz, t0.xyz);
    t6.x = inversesqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t6.x = dot(t1.xzw, t1.xzw);
    t6.x = sqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = inversesqrt(t16);
    t3.xyz = vec3(t16) * t3.xyz;
    t10_4.xyz = t1.xyz * t3.xyz;
    t10_4.xyz = t1.zxy * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu15) + 0].x;
    tb6 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb6) ? t1.x : (-t1.x);
    t15 = t1.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu15 = uint(t15);
    tb1 = _ImageTexCoords[int(tu15) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu15) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu15) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu15) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu15) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb1)) ? t6.xy : t3.xy;
    vs_TEXCOORD5.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
lowp float t10_8;
highp float t22;
mediump float t16_24;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_7 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_7 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    t10_8 = texture(_LightTexture0, t16_4.xyz).w;
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    t16_1 = t10_8 * t10_1;
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_24 = dot(t10_6.xyz, t1.xyz);
    t16_24 = max(t16_24, 0.0);
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * _BillboardTangent));
  worldTangent_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_41;
  tmpvar_41.x = worldTangent_2.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = worldNormal_3.x;
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = worldNormal_3.y;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_41;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_43;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, tmpvar_18).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
bool tb1;
mediump float t16_2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
highp vec2 t6;
bool tb6;
highp vec2 t10;
highp float t15;
highp uint tu15;
highp float t16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6.x = dot(t0.xyz, t0.xyz);
    t6.x = inversesqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t6.x = dot(t1.xzw, t1.xzw);
    t6.x = sqrt(t6.x);
    t0.xyz = t0.xyz * t6.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.z = t1.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t16 = dot(t3.xyz, t3.xyz);
    t16 = inversesqrt(t16);
    t3.xyz = vec3(t16) * t3.xyz;
    t10_4.xyz = t1.xyz * t3.xyz;
    t10_4.xyz = t1.zxy * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t1.z;
    vs_TEXCOORD2.z = t1.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu15) + 0].x;
    tb6 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb6) ? t1.x : (-t1.x);
    t15 = t1.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu15 = uint(t15);
    tb1 = _ImageTexCoords[int(tu15) + 0].w<0.0;
    t6.xy = (-_ImageTexCoords[int(tu15) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu15) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu15) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu15) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb1)) ? t6.xy : t3.xy;
    vs_TEXCOORD5.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t1.w = t15 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_4.xy;
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_4.xy;
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    t10_1.x = texture(_LightTexture0, t16_4.xy).w;
    t16_4.xyz = t10_1.xxx * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = _Object2World[0].xyz;
  tmpvar_38[1] = _Object2World[1].xyz;
  tmpvar_38[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * _BillboardTangent));
  worldTangent_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.x;
  tmpvar_42.y = tmpvar_41.x;
  tmpvar_42.z = worldNormal_3.x;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.y;
  tmpvar_43.y = tmpvar_41.y;
  tmpvar_43.z = worldNormal_3.y;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_2.z;
  tmpvar_44.y = tmpvar_41.z;
  tmpvar_44.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_42;
  xlv_TEXCOORD1 = tmpvar_43;
  xlv_TEXCOORD2 = tmpvar_44;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(tmpvar_21)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t18 = t0.y * _ProjectionParams.x;
    t1.w = t18 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_7 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_7 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    t16_4.x = max(t16_10.z, t16_10.y);
    t16_4.x = max(t16_10.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_24 = dot(t10_6.xyz, t1.xyz);
    t16_24 = max(t16_24, 0.0);
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = _Object2World[0].xyz;
  tmpvar_38[1] = _Object2World[1].xyz;
  tmpvar_38[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * _BillboardTangent));
  worldTangent_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.x;
  tmpvar_42.y = tmpvar_41.x;
  tmpvar_42.z = worldNormal_3.x;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.y;
  tmpvar_43.y = tmpvar_41.y;
  tmpvar_43.z = worldNormal_3.y;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_2.z;
  tmpvar_44.y = tmpvar_41.z;
  tmpvar_44.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_42;
  xlv_TEXCOORD1 = tmpvar_43;
  xlv_TEXCOORD2 = tmpvar_44;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t18 = t0.y * _ProjectionParams.x;
    t1.w = t18 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    t16_4 = max(t16_9.z, t16_9.y);
    t16_4 = max(t16_9.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = _Object2World[0].xyz;
  tmpvar_38[1] = _Object2World[1].xyz;
  tmpvar_38[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * _BillboardTangent));
  worldTangent_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  lowp vec3 tmpvar_42;
  tmpvar_42.x = worldTangent_2.x;
  tmpvar_42.y = tmpvar_41.x;
  tmpvar_42.z = worldNormal_3.x;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_2.y;
  tmpvar_43.y = tmpvar_41.y;
  tmpvar_43.z = worldNormal_3.y;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_2.z;
  tmpvar_44.y = tmpvar_41.z;
  tmpvar_44.z = worldNormal_3.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_42;
  xlv_TEXCOORD1 = tmpvar_43;
  xlv_TEXCOORD2 = tmpvar_44;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21);
  lightCoord_6 = tmpvar_22;
  lowp vec4 tmpvar_23;
  mediump vec2 P_24;
  P_24 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_23 = texture2D (_LightTexture0, P_24);
  highp vec3 LightCoord_25;
  LightCoord_25 = lightCoord_6.xyz;
  highp float tmpvar_26;
  tmpvar_26 = dot (LightCoord_25, LightCoord_25);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_23.w) * tmpvar_27.w);
  atten_5 = tmpvar_28;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  c_29.w = c_30.w;
  c_29.xyz = c_30.xyz;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
lowp vec3 t10_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.z = t2.y;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t3.xyz = vec3(t18) * t3.xyz;
    t10_5.xyz = t2.xyz * t3.xyz;
    t10_5.xyz = t2.zxy * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.z = t2.z;
    vs_TEXCOORD2.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD4 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD5.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD5.xy = (bool(tb6)) ? t12.xy : t2.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t18 = t0.y * _ProjectionParams.x;
    t1.w = t18 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump vec3 t16_10;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    t16_7 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_7 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    t16_4.x = max(t16_10.z, t16_10.y);
    t16_4.x = max(t16_10.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_4.xy = t16_0.xy / t16_0.ww;
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    tb8 = 0.0<t16_0.z;
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    t10_2.x = (tb8) ? 1.0 : 0.0;
    t10_2.x = t10_1 * t10_2.x;
    t10_2.x = t10_15 * t10_2.x;
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_2.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t16_24 = dot(t10_6.xyz, t1.xyz);
    t16_24 = max(t16_24, 0.0);
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 =