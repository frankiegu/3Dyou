
    t52 = dot(t0.xyw, t0.xyw);
    t52 = inversesqrt(t52);
    t0 = t0 * vec4(t52);
    t6.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t6.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t6.xyz;
    t6.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t6.xyz;
    t52 = dot(t6.xyz, t6.xyz);
    t52 = inversesqrt(t52);
    t6.xyz = vec3(t52) * t6.xyz;
    t52 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_15.xyz = t0.wxy * t6.xyz;
    t10_15.xyz = t0.ywx * t6.yzx + (-t10_15.xyz);
    t10_15.xyz = vec3(t52) * t10_15.xyz;
    t16_2 = t0.ywzx * t0;
    t16_16.x = dot(unity_SHBr, t16_2);
    t16_16.y = dot(unity_SHBg, t16_2);
    t16_16.z = dot(unity_SHBb, t16_2);
    t16_67 = t0.y * t0.y;
    t16_67 = t0.x * t0.x + (-t16_67);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    t2 = (-t5.xxxx) + unity_4LightPosX0;
    t7 = (-t5.yyyy) + unity_4LightPosY0;
    t8 = (-t5.zzzz) + unity_4LightPosZ0;
    t9 = t7 * t7;
    t9 = t2 * t2 + t9;
    t9 = t8 * t8 + t9;
    t7 = t0.yyyy * t7;
    t2 = t2 * t0.xxxx + t7;
    t2 = t8 * t0.wwww + t2;
    t7 = inversesqrt(t9);
    t2 = t2 * t7;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t7 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    t2 = t2 * t7;
    t7.xyz = t2.yyy * unity_LightColor[1].xyz;
    t7.xyz = unity_LightColor[0].xyz * t2.xxx + t7.xyz;
    t7.xyz = unity_LightColor[2].xyz * t2.zzz + t7.xyz;
    t7.xyz = unity_LightColor[3].xyz * t2.www + t7.xyz;
    t7.xyz = t7.xyz + t16_16.xyz;
    t2 = t3.zzzz * _Object2World[1];
    t2 = _Object2World[0] * t3.xxxx + t2;
    t2 = _Object2World[2] * t3.wwww + t2;
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    vs_TEXCOORD0.x = t6.z;
    vs_TEXCOORD0.y = t10_15.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.w = t5.x;
    vs_TEXCOORD1.x = t6.x;
    vs_TEXCOORD1.y = t10_15.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.w = t5.y;
    vs_TEXCOORD2.x = t6.y;
    vs_TEXCOORD2.y = t10_15.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD2.w = t5.z;
    vs_TEXCOORD3.w = _Color.w;
    vs_TEXCOORD7 = t2;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t4.xyz;
    vs_TEXCOORD6.xyz = t7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    t16_4.x = max(t16_9.z, t16_9.y);
    t16_4.x = max(t16_9.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec101 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec101, 0.0);
    t16_4.x = (-_LightShadowData.x) + 1.0;
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t0);
    t16_5.y = dot(unity_SHAg, t0);
    t16_5.z = dot(unity_SHAb, t0);
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  ZWrite Off
  Cull [_Cull]
  Blend One One
  GpuProgramID 83965
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  finalPosition_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = finalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(tmpvar_14)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
highp float t10;
void main()
{
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_9 = max(t16_9, 0.0);
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  finalPosition_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = finalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_7;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    t16_7 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_7 = max(t16_7, 0.0);
    t16_1.xyz = vec3(t16_7) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  finalPosition_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = finalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lightCoord_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  mediump vec2 P_17;
  P_17 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp vec3 LightCoord_18;
  LightCoord_18 = lightCoord_5.xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (LightCoord_18, LightCoord_18);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(tmpvar_19));
  mediump float tmpvar_21;
  tmpvar_21 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_16.w) * tmpvar_20.w);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_10 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_11;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
highp float t14;
void main()
{
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_1.xy = t16_0.xy / t16_0.ww;
    t16_1.xy = t16_1.xy + vec2(0.5, 0.5);
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    tb6 = 0.0<t16_0.z;
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    t10_3 = (tb6) ? 1.0 : 0.0;
    t10_3 = t10_2.x * t10_3;
    t10_3 = t10_10 * t10_3;
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t14 = dot(t2.xyz, t2.xyz);
    t14 = inversesqrt(t14);
    t2.xyz = vec3(t14) * t2.xyz;
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    t16_12 = max(t16_12, 0.0);
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  finalPosition_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = finalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(tmpvar_14)).w * textureCube (_LightTexture0, tmpvar_13).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp float t10_4;
mediump float t16_9;
highp float t10;
void main()
{
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    t10_4 = texture(_LightTexture0, t16_0.xyz).w;
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    t16_1 = t10_4 * t10_1.x;
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t10 = inversesqrt(t10);
    t1.xyz = vec3(t10) * t1.xyz;
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    t16_9 = max(t16_9, 0.0);
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  finalPosition_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = finalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xy;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, tmpvar_13).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_14);
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
void main()
{
    t16_0.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_0.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_0.xy;
    t16_0.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_0.xy;
    t16_0.xy = t16_0.xy + _LightMatrix0[3].xy;
    t10_1.x = texture(_LightTexture0, t16_0.xy).w;
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_9 = max(t16_9, 0.0);
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  tmpvar_8 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2>=3.0;
    if(tb22){
        tb22 = t16_2==5.0;
        if(tb22){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t22 = dot(t3.xyz, t3.xyz);
            t22 = inversesqrt(t22);
            t3.xyz = vec3(t22) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb24 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            t24 = (-t2.y) * t2.z + t5.x;
            t24 = t5.y * t24 + t5.w;
            t25 = (-t24) + t5.x;
            t24 = t5.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t24 = t24 * t25 + t5.x;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t4.xyz = vec3(t24) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t19.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t19.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t22 = t5.x * t5.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t22) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp float t9;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_10 = t16_2.x / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    t0.xyz = vec3(t9) * t0.xyz;
    t16_10 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_10 = max(t16_10, 0.0);
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  tmpvar_8 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2>=3.0;
    if(tb22){
        tb22 = t16_2==5.0;
        if(tb22){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t22 = dot(t3.xyz, t3.xyz);
            t22 = inversesqrt(t22);
            t3.xyz = vec3(t22) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb24 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            t24 = (-t2.y) * t2.z + t5.x;
            t24 = t5.y * t24 + t5.w;
            t25 = (-t24) + t5.x;
            t24 = t5.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t24 = t24 * t25 + t5.x;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t4.xyz = vec3(t24) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t19.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t19.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t22 = t5.x * t5.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t22) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2 = max(t10_0.z, t10_0.y);
    t16_2 = max(t10_0.x, t16_2);
    t16_10 = t16_2 / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    t16_10 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_10 = max(t16_10, 0.0);
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  tmpvar_8 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_15 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_5.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2>=3.0;
    if(tb22){
        tb22 = t16_2==5.0;
        if(tb22){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t22 = dot(t3.xyz, t3.xyz);
            t22 = inversesqrt(t22);
            t3.xyz = vec3(t22) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb24 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            t24 = (-t2.y) * t2.z + t5.x;
            t24 = t5.y * t24 + t5.w;
            t25 = (-t24) + t5.x;
            t24 = t5.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t24 = t24 * t25 + t5.x;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t4.xyz = vec3(t24) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t19.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t19.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t22 = t5.x * t5.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t22) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
mediump float t16_13;
highp float t14;
void main()
{
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_1.xy = t16_0.xy / t16_0.ww;
    t16_1.xy = t16_1.xy + vec2(0.5, 0.5);
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    tb6 = 0.0<t16_0.z;
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    t10_3 = (tb6) ? 1.0 : 0.0;
    t10_3 = t10_2.x * t10_3;
    t10_3 = t10_10 * t10_3;
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_2.xyz;
    t16_12 = max(t16_1.z, t16_1.y);
    t16_12 = max(t16_12, t16_1.x);
    t16_13 = max(t10_2.z, t10_2.y);
    t16_13 = max(t16_13, t10_2.x);
    t16_12 = t16_13 / t16_12;
    t16_2 = t16_12 * 0.5 + 0.5;
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t14 = dot(t2.xyz, t2.xyz);
    t14 = inversesqrt(t14);
    t2.xyz = vec3(t14) * t2.xyz;
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    t16_12 = max(t16_12, 0.0);
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  tmpvar_8 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2>=3.0;
    if(tb22){
        tb22 = t16_2==5.0;
        if(tb22){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t22 = dot(t3.xyz, t3.xyz);
            t22 = inversesqrt(t22);
            t3.xyz = vec3(t22) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb24 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            t24 = (-t2.y) * t2.z + t5.x;
            t24 = t5.y * t24 + t5.w;
            t25 = (-t24) + t5.x;
            t24 = t5.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t24 = t24 * t25 + t5.x;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t4.xyz = vec3(t24) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t19.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t19.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t22 = t5.x * t5.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t22) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp float t10_3;
highp float t9;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_10 = t16_2.x / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    t10_3 = texture(_LightTexture0, t16_2.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_3 * t10_0.x;
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    t0.xyz = vec3(t9) * t0.xyz;
    t16_10 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_10 = max(t16_10, 0.0);
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  tmpvar_8 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2>=3.0;
    if(tb22){
        tb22 = t16_2==5.0;
        if(tb22){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t22 = dot(t3.xyz, t3.xyz);
            t22 = inversesqrt(t22);
            t3.xyz = vec3(t22) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb24 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            t24 = (-t2.y) * t2.z + t5.x;
            t24 = t5.y * t24 + t5.w;
            t25 = (-t24) + t5.x;
            t24 = t5.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t24 = t24 * t25 + t5.x;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t4.xyz = vec3(t24) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t19.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t19.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t22 = t5.x * t5.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t22) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    t16_10 = max(t16_1.z, t16_1.y);
    t16_10 = max(t16_10, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_10 = t16_2.x / t16_10;
    t16_0 = t16_10 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    t16_2.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_2.xy;
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_2.xy;
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    t16_10 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_10 = max(t16_10, 0.0);
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_55;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = _Object2World[0].xyz;
  tmpvar_56[1] = _Object2World[1].xyz;
  tmpvar_56[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize((tmpvar_56 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  lowp vec3 tmpvar_60;
  tmpvar_60.x = worldTangent_4.x;
  tmpvar_60.y = tmpvar_59.x;
  tmpvar_60.z = worldNormal_5.x;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.y;
  tmpvar_61.y = tmpvar_59.y;
  tmpvar_61.z = worldNormal_5.y;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.z;
  tmpvar_62.y = tmpvar_59.z;
  tmpvar_62.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_60;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_62;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2>=3.0;
    if(tb25){
        tb25 = t16_2==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb27 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            t27 = (-t2.y) * t2.z + t5.x;
            t27 = t5.y * t27 + t5.w;
            t28 = (-t27) + t5.x;
            t27 = t5.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_19;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    t16_19 = max(t16_1.z, t16_1.y);
    t16_19 = max(t16_19, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_19 = t16_2.x / t16_19;
    t16_0 = t16_19 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    t16_19 = dot(t10_5.xyz, t0.xyz);
    t16_19 = max(t16_19, 0.0);
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_55;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = _Object2World[0].xyz;
  tmpvar_56[1] = _Object2World[1].xyz;
  tmpvar_56[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize((tmpvar_56 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  lowp vec3 tmpvar_60;
  tmpvar_60.x = worldTangent_4.x;
  tmpvar_60.y = tmpvar_59.x;
  tmpvar_60.z = worldNormal_5.x;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.y;
  tmpvar_61.y = tmpvar_59.y;
  tmpvar_61.z = worldNormal_5.y;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.z;
  tmpvar_62.y = tmpvar_59.z;
  tmpvar_62.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_60;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_62;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2>=3.0;
    if(tb25){
        tb25 = t16_2==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb27 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            t27 = (-t2.y) * t2.z + t5.x;
            t27 = t5.y * t27 + t5.w;
            t28 = (-t27) + t5.x;
            t27 = t5.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    t16_16 = max(t16_1.z, t16_1.y);
    t16_16 = max(t16_16, t16_1.x);
    t16_2 = max(t10_0.z, t10_0.y);
    t16_2 = max(t10_0.x, t16_2);
    t16_16 = t16_2 / t16_16;
    t16_0 = t16_16 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_3.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    t16_16 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_16 = max(t16_16, 0.0);
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_55;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = _Object2World[0].xyz;
  tmpvar_56[1] = _Object2World[1].xyz;
  tmpvar_56[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize((tmpvar_56 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  lowp vec3 tmpvar_60;
  tmpvar_60.x = worldTangent_4.x;
  tmpvar_60.y = tmpvar_59.x;
  tmpvar_60.z = worldNormal_5.x;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.y;
  tmpvar_61.y = tmpvar_59.y;
  tmpvar_61.z = worldNormal_5.y;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.z;
  tmpvar_62.y = tmpvar_59.z;
  tmpvar_62.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_60;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_62;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_15 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_6.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_5 = tmpvar_24;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2>=3.0;
    if(tb25){
        tb25 = t16_2==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb27 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            t27 = (-t2.y) * t2.z + t5.x;
            t27 = t5.y * t27 + t5.w;
            t28 = (-t27) + t5.x;
            t27 = t5.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec3 t10_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
bool tb8;
mediump float t16_14;
lowp float t10_14;
mediump float t16_18;
mediump float t16_19;
highp float t20;
void main()
{
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_1.xy = t16_0.xy / t16_0.ww;
    t16_1.xy = t16_1.xy + vec2(0.5, 0.5);
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    tb8 = 0.0<t16_0.z;
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    t10_3.x = (tb8) ? 1.0 : 0.0;
    t10_3.x = t10_2.x * t10_3.x;
    t10_3.x = t10_14 * t10_3.x;
    t16_0.xyz = t10_3.xxx * _LightColor0.xyz;
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_2.xyz;
    t16_18 = max(t16_1.z, t16_1.y);
    t16_18 = max(t16_18, t16_1.x);
    t16_19 = max(t10_2.z, t10_2.y);
    t16_19 = max(t16_19, t10_2.x);
    t16_18 = t16_19 / t16_18;
    t16_2 = t16_18 * 0.5 + 0.5;
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    t2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t20 = dot(t2.xyz, t2.xyz);
    t20 = inversesqrt(t20);
    t2.xyz = vec3(t20) * t2.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_3.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    t16_18 = dot(t10_5.xyz, t2.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_55;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = _Object2World[0].xyz;
  tmpvar_56[1] = _Object2World[1].xyz;
  tmpvar_56[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize((tmpvar_56 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  lowp vec3 tmpvar_60;
  tmpvar_60.x = worldTangent_4.x;
  tmpvar_60.y = tmpvar_59.x;
  tmpvar_60.z = worldNormal_5.x;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.y;
  tmpvar_61.y = tmpvar_59.y;
  tmpvar_61.z = worldNormal_5.y;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.z;
  tmpvar_62.y = tmpvar_59.z;
  tmpvar_62.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_60;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_62;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2>=3.0;
    if(tb25){
        tb25 = t16_2==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb27 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            t27 = (-t2.y) * t2.z + t5.x;
            t27 = t5.y * t27 + t5.w;
            t28 = (-t27) + t5.x;
            t27 = t5.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_19;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    t16_19 = max(t16_1.z, t16_1.y);
    t16_19 = max(t16_19, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_19 = t16_2.x / t16_19;
    t16_0 = t16_19 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    t10_6 = texture(_LightTexture0, t16_2.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_6 * t10_0.x;
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_4.xyz = t10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    t16_19 = dot(t10_5.xyz, t0.xyz);
    t16_19 = max(t16_19, 0.0);
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_55;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = _Object2World[0].xyz;
  tmpvar_56[1] = _Object2World[1].xyz;
  tmpvar_56[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize((tmpvar_56 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  lowp vec3 tmpvar_60;
  tmpvar_60.x = worldTangent_4.x;
  tmpvar_60.y = tmpvar_59.x;
  tmpvar_60.z = worldNormal_5.x;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.y;
  tmpvar_61.y = tmpvar_59.y;
  tmpvar_61.z = worldNormal_5.y;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.z;
  tmpvar_62.y = tmpvar_59.z;
  tmpvar_62.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_60;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_62;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2>=3.0;
    if(tb25){
        tb25 = t16_2==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb27 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            t27 = (-t2.y) * t2.z + t5.x;
            t27 = t5.y * t27 + t5.w;
            t28 = (-t27) + t5.x;
            t27 = t5.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    t16_16 = max(t16_1.z, t16_1.y);
    t16_16 = max(t16_16, t16_1.x);
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_16 = t16_2.x / t16_16;
    t16_0 = t16_16 * 0.5 + 0.5;
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    t16_2.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_2.xy;
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_2.xy;
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_3.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    t16_16 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_16 = max(t16_16, 0.0);
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    SV_Target0.xyz = t16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    finalPosition_13 = vPos_18;
  };
  highp vec3 tmpvar_22;
  tmpvar_22.x = _Object2World[3].x;
  tmpvar_22.y = _Object2World[3].y;
  tmpvar_22.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = finalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = finalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (finalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((rotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    finalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = finalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_22.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_22.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    finalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    finalPosition_13 = vPos_18;
  };
  highp vec3 tmpvar_22;
  tmpvar_22.x = _Object2World[3].x;
  tmpvar_22.y = _Object2World[3].y;
  tmpvar_22.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = finalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = finalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (finalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((rotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    finalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = finalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_22.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_22.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    finalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_11 = max(t16_11, 0.0);
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    finalPosition_13 = vPos_18;
  };
  highp vec3 tmpvar_22;
  tmpvar_22.x = _Object2World[3].x;
  tmpvar_22.y = _Object2World[3].y;
  tmpvar_22.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = finalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = finalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (finalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((rotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    finalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = finalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_22.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_22.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    finalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb9 = 0.0<t16_0.z;
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    t10_1 = (tb9) ? 1.0 : 0.0;
    t10_1 = t10_4 * t10_1;
    t10_1 = t10_14 * t10_1;
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t4.xyz = vec3(t19) * t4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    finalPosition_13 = vPos_18;
  };
  highp vec3 tmpvar_22;
  tmpvar_22.x = _Object2World[3].x;
  tmpvar_22.y = _Object2World[3].y;
  tmpvar_22.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = finalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = finalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (finalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((rotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    finalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = finalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_22.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_22.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    finalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_4 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    finalPosition_13 = vPos_18;
  };
  highp vec3 tmpvar_22;
  tmpvar_22.x = _Object2World[3].x;
  tmpvar_22.y = _Object2World[3].y;
  tmpvar_22.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = finalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = finalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (finalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((rotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    finalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = finalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_22.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_22.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    finalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t2.x = _World2Object[0].y;
    t2.y = _World2Object[1].y;
    t2.z = _World2Object[2].y;
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t10 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t10 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    tb24 = t16_2>=3.0;
    if(tb24){
        if(tb22){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t22 = dot(t4.xyz, t4.xyz);
            t22 = inversesqrt(t22);
            t4.xyz = vec3(t22) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb24 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            t24 = (-t2.y) * t2.z + t6.x;
            t24 = t6.y * t24 + t6.w;
            t25 = (-t24) + t6.x;
            t24 = t6.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            t26 = t2.x * t26;
            t24 = t24 * t25 + t26;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t5.xyz = vec3(t24) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t20.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t22 = t6.x * t6.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t22) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t10 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t10 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    tb24 = t16_2>=3.0;
    if(tb24){
        if(tb22){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t22 = dot(t4.xyz, t4.xyz);
            t22 = inversesqrt(t22);
            t4.xyz = vec3(t22) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb24 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            t24 = (-t2.y) * t2.z + t6.x;
            t24 = t6.y * t24 + t6.w;
            t25 = (-t24) + t6.x;
            t24 = t6.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            t26 = t2.x * t26;
            t24 = t24 * t25 + t26;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t5.xyz = vec3(t24) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t20.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t22 = t6.x * t6.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t22) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3 = max(t16_6.z, t16_6.y);
    t16_3 = max(t16_6.x, t16_3);
    t16_2.x = t16_2.x / t16_3;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t10 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t10 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    tb24 = t16_2>=3.0;
    if(tb24){
        if(tb22){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t22 = dot(t4.xyz, t4.xyz);
            t22 = inversesqrt(t22);
            t4.xyz = vec3(t22) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb24 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            t24 = (-t2.y) * t2.z + t6.x;
            t24 = t6.y * t24 + t6.w;
            t25 = (-t24) + t6.x;
            t24 = t6.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            t26 = t2.x * t26;
            t24 = t24 * t25 + t26;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t5.xyz = vec3(t24) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t20.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t22 = t6.x * t6.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t22) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb9 = 0.0<t16_0.z;
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    t10_1 = (tb9) ? 1.0 : 0.0;
    t10_1 = t10_4 * t10_1;
    t10_1 = t10_14 * t10_1;
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t19 = dot(t4.xyz, t4.xyz);
    t19 = inversesqrt(t19);
    t4.xyz = vec3(t19) * t4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t10 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t10 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    tb24 = t16_2>=3.0;
    if(tb24){
        if(tb22){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t22 = dot(t4.xyz, t4.xyz);
            t22 = inversesqrt(t22);
            t4.xyz = vec3(t22) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb24 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            t24 = (-t2.y) * t2.z + t6.x;
            t24 = t6.y * t24 + t6.w;
            t25 = (-t24) + t6.x;
            t24 = t6.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            t26 = t2.x * t26;
            t24 = t24 * t25 + t26;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t5.xyz = vec3(t24) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t20.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t22 = t6.x * t6.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t22) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_4 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t7.x = t0.x + _Object2World[3].z;
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    t7.y = t14.x + in_NORMAL0.x;
    t7.xy = fract(t7.xy);
    t7.x = t7.y * 0.5 + t7.x;
    t7.x = t7.x + -0.300000012;
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t14.x = dot(t3.xyz, t3.xyz);
    t14.x = inversesqrt(t14.x);
    t14.xy = t14.xx * t3.xz;
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, vec2(bvec2(tb7)));
    tb22 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t10 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t10 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    tb24 = t16_2>=3.0;
    if(tb24){
        if(tb22){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t22 = dot(t4.xyz, t4.xyz);
            t22 = inversesqrt(t22);
            t4.xyz = vec3(t22) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t22 = t0.x + _ST_WindBranch.x;
            t2.x = t22 + in_TEXCOORD0.w;
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t24 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t24 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb24 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            t24 = (-t2.y) * t2.z + t6.x;
            t24 = t6.y * t24 + t6.w;
            t25 = (-t24) + t6.x;
            t24 = t6.y * t25 + t24;
            t24 = t24 * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            t26 = t2.x * t26;
            t24 = t24 * t25 + t26;
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t24 = t24 * t25;
            t5.xyz = vec3(t24) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t20.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t22 = t6.x * t6.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t24 = t2.w * _ST_WindVector.w;
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t22) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t22 = (-t0.x) + t6.x;
            t0.x = t6.y * t22 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t22 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t5.x;
            t0.x = t0.x * t22 + t24;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t22 = float(1.0) / _ST_WindGlobal.z;
    t22 = (-t22) * 0.25 + t3.y;
    t22 = max(t22, 0.0);
    t22 = t22 * _ST_WindGlobal.z;
    tb24 = t22!=0.0;
    t4.x = log2(t22);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t22 = (tb24) ? t4.x : t22;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t24 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    t22 = t22 * t24;
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    t4.y = t3.y;
    t14.x = dot(t4.xyz, t4.xyz);
    t14.x = inversesqrt(t14.x);
    t4.xyz = t14.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t21 = dot(t0.xyz, t0.xyz);
    t21 = inversesqrt(t21);
    t0.xyz = vec3(t21) * t0.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb12 = t10_1<0.0;
    if((int(tb12) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    t16_3.x = max(t16_6.z, t16_6.y);
    t16_3.x = max(t16_6.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp float tangentSign_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_12.x)
   + 
    (v_59.xyz * tmpvar_12.y)
  ) + (v_60.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = (((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx)) * tangentSign_4);
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_5.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = worldNormal_6.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = worldNormal_6.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t11 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t11 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    tb27 = t16_2>=3.0;
    if(tb27){
        if(tb25){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t25 = dot(t4.xyz, t4.xyz);
            t25 = inversesqrt(t25);
            t4.xyz = vec3(t25) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb27 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            t27 = (-t2.y) * t2.z + t6.x;
            t27 = t6.y * t27 + t6.w;
            t28 = (-t27) + t6.x;
            t27 = t6.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            t29 = t2.x * t29;
            t27 = t27 * t28 + t29;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t5.xyz = vec3(t27) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t22.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t22.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t25 = t6.x * t6.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t25) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb18 = t10_1.x<0.0;
    if((int(tb18) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    t16_3.x = max(t16_8.z, t16_8.y);
    t16_3.x = max(t16_8.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp float tangentSign_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_12.x)
   + 
    (v_59.xyz * tmpvar_12.y)
  ) + (v_60.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = (((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx)) * tangentSign_4);
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_5.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = worldNormal_6.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = worldNormal_6.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t11 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t11 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    tb27 = t16_2>=3.0;
    if(tb27){
        if(tb25){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t25 = dot(t4.xyz, t4.xyz);
            t25 = inversesqrt(t25);
            t4.xyz = vec3(t25) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb27 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            t27 = (-t2.y) * t2.z + t6.x;
            t27 = t6.y * t27 + t6.w;
            t28 = (-t27) + t6.x;
            t27 = t6.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            t29 = t2.x * t29;
            t27 = t27 * t28 + t29;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t5.xyz = vec3(t27) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t22.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t22.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t25 = t6.x * t6.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t25) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    t16_3 = max(t16_7.z, t16_7.y);
    t16_3 = max(t16_7.x, t16_3);
    t16_2.x = t16_2.x / t16_3;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp float tangentSign_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_12.x)
   + 
    (v_59.xyz * tmpvar_12.y)
  ) + (v_60.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = (((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx)) * tangentSign_4);
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_5.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = worldNormal_6.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = worldNormal_6.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t11 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t11 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    tb27 = t16_2>=3.0;
    if(tb27){
        if(tb25){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t25 = dot(t4.xyz, t4.xyz);
            t25 = inversesqrt(t25);
            t4.xyz = vec3(t25) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb27 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            t27 = (-t2.y) * t2.z + t6.x;
            t27 = t6.y * t27 + t6.w;
            t28 = (-t27) + t6.x;
            t27 = t6.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            t29 = t2.x * t29;
            t27 = t27 * t28 + t29;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t5.xyz = vec3(t27) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t22.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t22.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t25 = t6.x * t6.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t25) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb21 = t10_1.x<0.0;
    if((int(tb21) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    t16_3.x = max(t16_9.z, t16_9.y);
    t16_3.x = max(t16_9.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    t16_0 = t16_0 + _LightMatrix0[3];
    t16_3.xy = t16_0.xy / t16_0.ww;
    t16_3.xy = t16_3.xy + vec2(0.5, 0.5);
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    tb11 = 0.0<t16_0.z;
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    t10_1.x = (tb11) ? 1.0 : 0.0;
    t10_1.x = t10_4 * t10_1.x;
    t10_1.x = t10_18 * t10_1.x;
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_23 = dot(t10_6.xyz, t4.xyz);
    t16_23 = max(t16_23, 0.0);
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp float tangentSign_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_12.x)
   + 
    (v_59.xyz * tmpvar_12.y)
  ) + (v_60.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = (((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx)) * tangentSign_4);
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_5.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = worldNormal_6.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = worldNormal_6.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t11 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t11 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    tb27 = t16_2>=3.0;
    if(tb27){
        if(tb25){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t25 = dot(t4.xyz, t4.xyz);
            t25 = inversesqrt(t25);
            t4.xyz = vec3(t25) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb27 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            t27 = (-t2.y) * t2.z + t6.x;
            t27 = t6.y * t27 + t6.w;
            t28 = (-t27) + t6.x;
            t27 = t6.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            t29 = t2.x * t29;
            t27 = t27 * t28 + t29;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t5.xyz = vec3(t27) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t22.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t22.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t25 = t6.x * t6.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t25) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb18 = t10_1.x<0.0;
    if((int(tb18) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    t16_3.x = max(t16_8.z, t16_8.y);
    t16_3.x = max(t16_8.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    t16_0 = t10_6 * t10_0.x;
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    t18 = dot(t0.xyz, t0.xyz);
    t18 = inversesqrt(t18);
    t0.xyz = vec3(t18) * t0.xyz;
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_20 = dot(t10_5.xyz, t0.xyz);
    t16_20 = max(t16_20, 0.0);
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp float tangentSign_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_12.x)
   + 
    (v_59.xyz * tmpvar_12.y)
  ) + (v_60.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = (((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx)) * tangentSign_4);
  lowp vec3 tmpvar_66;
  tmpvar_66.x = worldTangent_5.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = worldNormal_6.x;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = worldNormal_6.y;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t11 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t11 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    tb27 = t16_2>=3.0;
    if(tb27){
        if(tb25){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t25 = dot(t4.xyz, t4.xyz);
            t25 = inversesqrt(t25);
            t4.xyz = vec3(t25) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb27 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            t27 = (-t2.y) * t2.z + t6.x;
            t27 = t6.y * t27 + t6.w;
            t28 = (-t27) + t6.x;
            t27 = t6.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            t29 = t2.x * t29;
            t27 = t27 * t28 + t29;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t5.xyz = vec3(t27) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t22.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t22.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t25 = t6.x * t6.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t25) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.y = _World2Object[0].x;
    t0.z = _World2Object[1].x;
    t0.x = _World2Object[2].x;
    t3.y = _World2Object[0].y;
    t3.z = _World2Object[1].y;
    t3.x = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.y = _World2Object[0].z;
    t3.z = _World2Object[1].z;
    t3.x = _World2Object[2].z;
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t3.xyz = vec3(t24) * t3.xyz;
    t24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t0.xyz * t3.xyz;
    t10_7.xyz = t0.zxy * t3.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t24) * t10_7.xyz;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t0.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t0.z;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t0.x;
    vs_TEXCOORD4.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  finalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_17;
    tmpvar_17 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_18[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_18[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_13 = (finalPosition_13 * tmpvar_18);
    finalPosition_13 = (normalize(finalPosition_13) * tmpvar_17);
  };
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_14 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = finalPosition_13;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (finalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * rotatedWindVector_12.zxy) - (tmpvar_29.zxy * rotatedWindVector_12.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (rotatedWindVector_12, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_10 = vDirection_23;
    finalPosition_13 = vPos_22;
  };
  finalPosition_13 = (finalPosition_13 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_63;
  tmpvar_63.x = _Object2World[3].x;
  tmpvar_63.y = _Object2World[3].y;
  tmpvar_63.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = finalPosition_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = finalPosition_13;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_63.x + tmpvar_63.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (finalPosition_13 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((rotatedBranchAnchor_11 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_63.x + tmpvar_63.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    finalPosition_13 = vPos_64;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = finalPosition_13;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_93;
    tmpvar_93 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_63.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_63.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    finalPosition_13 = vPos_89;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_10.x)
   + 
    (v_98.xyz * tmpvar_10.y)
  ) + (v_99.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = dot(t3.xyz, t3.xyz);
    t43 = sqrt(t43);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t4.xyz;
        } else {
            t15.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t15.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb44 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            t44 = (-t0.y) * t0.z + t6.x;
            t44 = t6.y * t44 + t6.w;
            t45 = (-t44) + t6.x;
            t44 = t6.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t5.xyz = vec3(t44) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t6.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t6.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t5.x = t16.x + in_TEXCOORD0.w;
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t16.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t5.y) * t5.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t5.x;
            t16.x = t16.x * t44 + t45;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t3.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb45 = t44!=0.0;
    t4.x = log2(t44);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t44 = (tb45) ? t4.x : t44;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t32.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t32.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t45 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    t44 = t44 * t45;
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t15.yyy * t3.xyz;
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    t43 = dot(t1.xyz, t1.xyz);
    t43 = inversesqrt(t43);
    t1.xyz = vec3(t43) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    t12 = dot(t0.xyz, t0.xyz);
    t12 = inversesqrt(t12);
    t0.xyz = vec3(t12) * t0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  finalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_17;
    tmpvar_17 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_18[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_18[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_13 = (finalPosition_13 * tmpvar_18);
    finalPosition_13 = (normalize(finalPosition_13) * tmpvar_17);
  };
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_14 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = finalPosition_13;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (finalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * rotatedWindVector_12.zxy) - (tmpvar_29.zxy * rotatedWindVector_12.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (rotatedWindVector_12, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_10 = vDirection_23;
    finalPosition_13 = vPos_22;
  };
  finalPosition_13 = (finalPosition_13 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_63;
  tmpvar_63.x = _Object2World[3].x;
  tmpvar_63.y = _Object2World[3].y;
  tmpvar_63.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = finalPosition_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = finalPosition_13;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_63.x + tmpvar_63.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (finalPosition_13 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((rotatedBranchAnchor_11 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_63.x + tmpvar_63.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    finalPosition_13 = vPos_64;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = finalPosition_13;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_93;
    tmpvar_93 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_63.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_63.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    finalPosition_13 = vPos_89;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_10.x)
   + 
    (v_98.xyz * tmpvar_10.y)
  ) + (v_99.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = dot(t3.xyz, t3.xyz);
    t43 = sqrt(t43);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t4.xyz;
        } else {
            t15.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t15.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb44 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            t44 = (-t0.y) * t0.z + t6.x;
            t44 = t6.y * t44 + t6.w;
            t45 = (-t44) + t6.x;
            t44 = t6.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t5.xyz = vec3(t44) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t6.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t6.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t5.x = t16.x + in_TEXCOORD0.w;
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t16.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t5.y) * t5.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t5.x;
            t16.x = t16.x * t44 + t45;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t3.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb45 = t44!=0.0;
    t4.x = log2(t44);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t44 = (tb45) ? t4.x : t44;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t32.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t32.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t45 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    t44 = t44 * t45;
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t15.yyy * t3.xyz;
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    t43 = dot(t1.xyz, t1.xyz);
    t43 = inversesqrt(t43);
    t1.xyz = vec3(t43) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_11 = max(t16_11, 0.0);
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  finalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_17;
    tmpvar_17 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_18[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_18[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_13 = (finalPosition_13 * tmpvar_18);
    finalPosition_13 = (normalize(finalPosition_13) * tmpvar_17);
  };
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_14 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = finalPosition_13;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (finalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * rotatedWindVector_12.zxy) - (tmpvar_29.zxy * rotatedWindVector_12.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (rotatedWindVector_12, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_10 = vDirection_23;
    finalPosition_13 = vPos_22;
  };
  finalPosition_13 = (finalPosition_13 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_63;
  tmpvar_63.x = _Object2World[3].x;
  tmpvar_63.y = _Object2World[3].y;
  tmpvar_63.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = finalPosition_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = finalPosition_13;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_63.x + tmpvar_63.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (finalPosition_13 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((rotatedBranchAnchor_11 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_63.x + tmpvar_63.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    finalPosition_13 = vPos_64;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = finalPosition_13;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_93;
    tmpvar_93 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_63.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_63.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    finalPosition_13 = vPos_89;
  };
  tmpvar_9.xyz = finalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_10.x)
   + 
    (v_98.xyz * tmpvar_10.y)
  ) + (v_99.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = dot(t3.xyz, t3.xyz);
    t43 = sqrt(t43);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t4.xyz;
        } else {
            t15.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t15.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb44 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            t44 = (-t0.y) * t0.z + t6.x;
            t44 = t6.y * t44 + t6.w;
            t45 = (-t44) + t6.x;
            t44 = t6.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t5.xyz = vec3(t44) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t6.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t6.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t5.x = t16.x + in_TEXCOORD0.w;
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t16.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t5.y) * t5.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t5.x;
            t16.x = t16.x * t44 + t45;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t3.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb45 = t44!=0.0;
    t4.x = log2(t44);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    