nalPosition_14;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_64.x + tmpvar_64.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (finalPosition_14 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((rotatedBranchAnchor_12 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_64.x + tmpvar_64.y));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    finalPosition_14 = vPos_65;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = finalPosition_14;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_94;
    tmpvar_94 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_64.x + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_64.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    finalPosition_14 = vPos_90;
  };
  tmpvar_10.xyz = finalPosition_14;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_11.x)
   + 
    (v_105.xyz * tmpvar_11.y)
  ) + (v_106.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_107;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_4;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_99;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_110 + (unity_SHC.xyz * (
    (normal_109.x * normal_109.x)
   - 
    (normal_109.y * normal_109.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t31 = dot(t2.xyz, t2.xyz);
    t31 = inversesqrt(t31);
    t2.xyz = vec3(t31) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb31 = in_COLOR0.w==0.0;
    t46 = dot(t3.xyz, t3.xyz);
    t46 = sqrt(t46);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t47 = dot(t4.xyz, t4.xyz);
    t47 = inversesqrt(t47);
    t4.xyz = vec3(t47) * t4.xyz;
    t4.xyz = vec3(t46) * t4.xyz;
    t3.xyz = (bool(tb31)) ? t4.xyz : t3.xyz;
    tb31 = t16_0.x<5.0;
    ti16 = int(uint(tb31) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti16))!=uint(0u)){
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb31 = t16_0.x==4.0;
        tb46 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t16.x = t16.x + t4.x;
        t16.x = t16.x + 0.5;
        t16.x = fract(t16.x);
        t16.x = t16.x * 2.0 + -1.0;
        t47 = abs(t16.x) * abs(t16.x);
        t16.x = -abs(t16.x) * 2.0 + 3.0;
        t16.x = t47 * t16.x + -0.5;
        t16.x = dot(t16.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t16.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb31){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t47 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t47);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t36.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t36.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t47 = dot(t3.xyz, t3.xyz);
            t47 = sqrt(t47);
            t48 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t48 = t48 * t5.x;
            t5.x = sin(t48);
            t7.x = cos(t48);
            t48 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t48);
            t22.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t22.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t22.y);
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            t11.z = t8.w * t4.z + t22.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t48 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t17.x = dot(t2.xyz, t4.xyz);
            t17.x = max(t17.x, -1.0);
            t17.x = min(t17.x, 1.0);
            t7.w = t17.x + t7.y;
            t48 = dot(t7.xzw, t7.xzw);
            t48 = inversesqrt(t48);
            t4.xyz = vec3(t48) * t7.zxw;
            t48 = -abs(t17.x) + 1.0;
            t48 = sqrt(t48);
            t5.x = abs(t17.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t17.x) + -0.212114394;
            t5.x = t5.x * abs(t17.x) + 1.57072878;
            t35 = t48 * t5.x;
            t35 = t35 * -2.0 + 3.14159274;
            tb17 = t17.x<(-t17.x);
            t17.x = tb17 ? t35 : float(0.0);
            t17.x = t5.x * t48 + t17.x;
            t48 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t16.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t46 = t5.z * t5.z;
            t46 = t46 * t5.x + 1.0;
            t46 = t46 * 0.5;
            t46 = clamp(t46, 0.0, 1.0);
            t46 = log2(t46);
            t31 = t46 * t16.y;
            t31 = exp2(t31);
            t46 = t5.y * t48;
            t46 = t17.x * t5.w + t46;
            t16.x = t16.x * t31 + t46;
            t16.x = t16.x * in_TEXCOORD2.x;
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            t16.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t31 = t4.x * t4.x;
            t8.w = t31 * t16.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t17.x = dot(t4.xyz, t4.xyz);
            t17.x = inversesqrt(t17.x);
            t4.xyz = t17.xxx * t4.xyz;
            t3.xyz = vec3(t47) * t4.xyz;
        } else {
            t16.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t16.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb17 = t16_0.x>=3.0;
    if(tb17){
        tb17 = t16_0.x==5.0;
        if(tb17){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t17.x = dot(t4.xyz, t4.xyz);
            t17.x = inversesqrt(t17.x);
            t4.xyz = t17.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t17.x = _Object2World[3].y + _Object2World[3].x;
            t17.x = t17.x + _ST_WindBranch.x;
            t0.x = t17.x + in_TEXCOORD0.w;
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t47 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t47 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb47 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            t47 = (-t0.y) * t0.z + t6.x;
            t47 = t6.y * t47 + t6.w;
            t48 = (-t47) + t6.x;
            t47 = t6.y * t48 + t47;
            t47 = t47 * _ST_WindBranchTwitch.x;
            t48 = (-_ST_WindVector.w) + 1.0;
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            t49 = t0.x * t49;
            t47 = t47 * t48 + t49;
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t47 = t47 * t48;
            t5.xyz = vec3(t47) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t17.x * 0.100000001 + in_TEXCOORD0.w;
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t17.x * 0.100000001 + in_TEXCOORD0.w;
            t17.xz = t6.xy + vec2(0.5, 0.5);
            t17.xz = fract(t17.xz);
            t17.xz = t17.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t17.xz) * abs(t17.xz);
            t17.xz = -abs(t17.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t17.xz = t6.xy * t17.xz + vec2(-0.5, -0.5);
            t17.xz = t17.xz + t17.xz;
            t17.xz = t17.xz * t17.xz;
            t17.x = t17.x * t17.z;
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            t47 = t0.w * _ST_WindVector.w;
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t17.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t17.x = _Object2World[3].y + _Object2World[3].x;
            t17.x = t17.x + _ST_WindBranch.x;
            t5.x = t17.x + in_TEXCOORD0.w;
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t17.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb17 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            t48 = (-t5.y) * t5.z + t17.x;
            t48 = t17.z * t48 + t0.w;
            t17.x = t17.x + (-t48);
            t17.x = t17.z * t17.x + t48;
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            t47 = (-_ST_WindVector.w) + 1.0;
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            t48 = t48 * t5.x;
            t17.x = t17.x * t47 + t48;
            t4.xyz = t17.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t17.x = dot(t3.xyz, t3.xyz);
    t17.x = sqrt(t17.x);
    t47 = float(1.0) / _ST_WindGlobal.z;
    t47 = (-t47) * 0.25 + t3.y;
    t47 = max(t47, 0.0);
    t47 = t47 * _ST_WindGlobal.z;
    tb48 = t47!=0.0;
    t4.x = log2(t47);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t47 = (tb48) ? t4.x : t47;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t34.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t34.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t48 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    t47 = t47 * t48;
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t17.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t1.x = t3.y * _ProjectionParams.x;
    t4.w = t1.x * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t16.yyy * t4.xyz;
    t1.xyz = t2.xyz * t16.xxx + t4.xyz;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.z = _World2Object[2].z;
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    t46 = dot(t1.xyz, t1.xyz);
    t46 = inversesqrt(t46);
    t1.xyz = vec3(t46) * t1.xyz;
    t16_0 = t1.yzzx * t1.xyzz;
    t16_14.x = dot(unity_SHBr, t16_0);
    t16_14.y = dot(unity_SHBg, t16_0);
    t16_14.z = dot(unity_SHBb, t16_0);
    t16_59 = t1.y * t1.y;
    t16_59 = t1.x * t1.x + (-t16_59);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t3.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  finalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_19;
    tmpvar_19 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_15 = (finalPosition_15 * tmpvar_20);
    finalPosition_15 = (normalize(finalPosition_15) * tmpvar_19);
  };
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_16 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = finalPosition_15;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (finalPosition_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * rotatedWindVector_14.zxy) - (tmpvar_31.zxy * rotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (rotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_12 = vDirection_25;
    finalPosition_15 = vPos_24;
  };
  finalPosition_15 = (finalPosition_15 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_65;
  tmpvar_65.x = _Object2World[3].x;
  tmpvar_65.y = _Object2World[3].y;
  tmpvar_65.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = finalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = finalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_65.x + tmpvar_65.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (finalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((rotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_65.x + tmpvar_65.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    finalPosition_15 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = finalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_65.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_65.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    finalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = finalPosition_15;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_12.x)
   + 
    (v_106.xyz * tmpvar_12.y)
  ) + (v_107.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_108;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_4;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_100;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t16.x = t0.x + _Object2World[3].z;
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    t16.y = t32.x + in_NORMAL0.x;
    t16.xy = fract(t16.xy);
    t16.x = t16.y * 0.5 + t16.x;
    t16.x = t16.x + -0.300000012;
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t48 = dot(t3.xyz, t3.xyz);
    t48 = inversesqrt(t48);
    t3.xyz = vec3(t48) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb16.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb48 = in_COLOR0.w==0.0;
    t49 = dot(t4.xyz, t4.xyz);
    t49 = sqrt(t49);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t51 = dot(t5.xyz, t5.xyz);
    t51 = inversesqrt(t51);
    t5.xyz = vec3(t51) * t5.xyz;
    t5.xyz = vec3(t49) * t5.xyz;
    t4.xyz = (bool(tb48)) ? t5.xyz : t4.xyz;
    tb48 = t16_2.x<5.0;
    ti32 = int(uint(tb48) * 0xffffffffu & uint(tb16.y) * 0xffffffffu);
    if((uint(ti32))!=uint(0u)){
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb48 = t16_2.x==4.0;
        tb49 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t32.x = t32.x + t5.x;
        t32.x = t32.x + 0.5;
        t32.x = fract(t32.x);
        t32.x = t32.x * 2.0 + -1.0;
        t51 = abs(t32.x) * abs(t32.x);
        t32.x = -abs(t32.x) * 2.0 + 3.0;
        t32.x = t51 * t32.x + -0.5;
        t32.x = dot(t32.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t32.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb48){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t32.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t32.x);
            t32.xy = t8.xy + vec2(0.5, 0.5);
            t32.xy = fract(t32.xy);
            t32.xy = t32.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t32.xy) * abs(t32.xy);
            t32.xy = -abs(t32.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t32.xy = t8.xy * t32.xy + vec2(-0.5, -0.5);
            t32.xy = t32.xy + t32.xy;
            t49 = dot(t4.xyz, t4.xyz);
            t49 = sqrt(t49);
            t51 = t32.x * t32.x + t32.y;
            t52 = t6.z * in_TEXCOORD2.x;
            t51 = t51 * t52;
            t6.x = sin(t51);
            t8.x = cos(t51);
            t51 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t51);
            t24.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t24.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t24.y);
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            t12.z = t9.w * t5.z + t24.y;
            t52 = t5.z * t5.z;
            t12.w = t52 * t51 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t19 = dot(t3.xyz, t5.xyz);
            t19 = max(t19, -1.0);
            t19 = min(t19, 1.0);
            t8.w = t19 + t8.y;
            t51 = dot(t8.xzw, t8.xzw);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t8.zxw;
            t51 = -abs(t19) + 1.0;
            t51 = sqrt(t51);
            t52 = abs(t19) * -0.0187292993 + 0.0742610022;
            t52 = t52 * abs(t19) + -0.212114394;
            t52 = t52 * abs(t19) + 1.57072878;
            t6.x = t51 * t52;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb19 = t19<(-t19);
            t19 = tb19 ? t6.x : float(0.0);
            t19 = t52 * t51 + t19;
            t32.x = (-t32.y) * t32.y + t32.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t39.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t48 = t6.z * t6.z;
            t48 = t48 * t6.x + 1.0;
            t48 = t48 * 0.5;
            t48 = clamp(t48, 0.0, 1.0);
            t48 = log2(t48);
            t48 = t48 * t7.y;
            t48 = exp2(t48);
            t32.x = t6.y * t32.x;
            t32.x = t19 * t6.w + t32.x;
            t32.x = t7.x * t48 + t32.x;
            t32.x = t32.x * in_TEXCOORD2.x;
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            t32.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t48 = t5.x * t5.x;
            t9.w = t48 * t32.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t51 = dot(t5.xyz, t5.xyz);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t5.xyz;
            t4.xyz = vec3(t49) * t5.xyz;
        } else {
            t32.xy = in_NORMAL0.xy;
            t19 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t32.xy = in_NORMAL0.xy;
        t19 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb49 = t16_2.x>=3.0;
    if(tb49){
        tb49 = t16_2.x==5.0;
        if(tb49){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t49 = dot(t5.xyz, t5.xyz);
            t49 = inversesqrt(t49);
            t5.xyz = vec3(t49) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t49 = t0.x + _ST_WindBranch.x;
            t2.x = t49 + in_TEXCOORD0.w;
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t51 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t51 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb51 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            t51 = (-t2.y) * t2.z + t7.x;
            t51 = t7.y * t51 + t7.w;
            t52 = (-t51) + t7.x;
            t51 = t7.y * t52 + t51;
            t51 = t51 * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            t53 = t2.x * t53;
            t51 = t51 * t52 + t53;
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t51 = t51 * t52;
            t6.xyz = vec3(t51) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t49 * 0.100000001 + in_TEXCOORD0.w;
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t49 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t39.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t49 = t7.x * t7.y;
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            t51 = t2.w * _ST_WindVector.w;
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t49) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t49 = (-t0.x) + t7.x;
            t0.x = t7.y * t49 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t49 = (-_ST_WindVector.w) + 1.0;
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            t51 = t51 * t6.x;
            t0.x = t0.x * t49 + t51;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t49 = float(1.0) / _ST_WindGlobal.z;
    t49 = (-t49) * 0.25 + t4.y;
    t49 = max(t49, 0.0);
    t49 = t49 * _ST_WindGlobal.z;
    tb51 = t49!=0.0;
    t52 = log2(t49);
    t52 = t52 * _ST_WindGlobal.w;
    t52 = exp2(t52);
    t49 = (tb51) ? t52 : t49;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t37.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t37.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t51 = t5.y * t5.y + t5.x;
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t51 = _ST_WindGlobal.y * t51 + t52;
    t49 = t49 * t51;
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    t5.y = t4.y;
    t49 = dot(t5.xyz, t5.xyz);
    t49 = inversesqrt(t49);
    t3.xzw = vec3(t49) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    t5.xz = t4.xz * vec2(0.5, 0.5);
    t0.x = t4.y * _ProjectionParams.x;
    t5.w = t0.x * 0.5;
    t0.xy = t5.zz + t5.xw;
    t0.xy = t0.xy * _ScreenParams.xy;
    t4.xy = t0.xy * vec2(0.25, 0.25);
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t5.x = _World2Object[0].x;
    t5.y = _World2Object[1].x;
    t5.z = _World2Object[2].x;
    t6.x = _World2Object[0].y;
    t6.y = _World2Object[1].y;
    t6.z = _World2Object[2].y;
    t0.xyw = t32.yyy * t6.xyz;
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    t48 = dot(t0.xyz, t0.xyz);
    t48 = inversesqrt(t48);
    t0.xyz = vec3(t48) * t0.xyz;
    t16_2 = t0.yzzx * t0.xyzz;
    t16_15.x = dot(unity_SHBr, t16_2);
    t16_15.y = dot(unity_SHBg, t16_2);
    t16_15.z = dot(unity_SHBb, t16_2);
    t16_63 = t0.y * t0.y;
    t16_63 = t0.x * t0.x + (-t16_63);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t4.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  finalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_19;
    tmpvar_19 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_15 = (finalPosition_15 * tmpvar_20);
    finalPosition_15 = (normalize(finalPosition_15) * tmpvar_19);
  };
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_16 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = finalPosition_15;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (finalPosition_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * rotatedWindVector_14.zxy) - (tmpvar_31.zxy * rotatedWindVector_14.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (rotatedWindVector_14, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_12 = vDirection_25;
    finalPosition_15 = vPos_24;
  };
  finalPosition_15 = (finalPosition_15 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_65;
  tmpvar_65.x = _Object2World[3].x;
  tmpvar_65.y = _Object2World[3].y;
  tmpvar_65.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = finalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = finalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_65.x + tmpvar_65.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (finalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((rotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_65.x + tmpvar_65.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    finalPosition_15 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = finalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_65.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_65.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    finalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = finalPosition_15;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_12.x)
   + 
    (v_106.xyz * tmpvar_12.y)
  ) + (v_107.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_108;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_4;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_100;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_111 + (unity_SHC.xyz * (
    (normal_110.x * normal_110.x)
   - 
    (normal_110.y * normal_110.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t16.x = t0.x + _Object2World[3].z;
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    t16.y = t32.x + in_NORMAL0.x;
    t16.xy = fract(t16.xy);
    t16.x = t16.y * 0.5 + t16.x;
    t16.x = t16.x + -0.300000012;
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t48 = dot(t3.xyz, t3.xyz);
    t48 = inversesqrt(t48);
    t3.xyz = vec3(t48) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb16.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb48 = in_COLOR0.w==0.0;
    t49 = dot(t4.xyz, t4.xyz);
    t49 = sqrt(t49);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t51 = dot(t5.xyz, t5.xyz);
    t51 = inversesqrt(t51);
    t5.xyz = vec3(t51) * t5.xyz;
    t5.xyz = vec3(t49) * t5.xyz;
    t4.xyz = (bool(tb48)) ? t5.xyz : t4.xyz;
    tb48 = t16_2.x<5.0;
    ti32 = int(uint(tb48) * 0xffffffffu & uint(tb16.y) * 0xffffffffu);
    if((uint(ti32))!=uint(0u)){
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb48 = t16_2.x==4.0;
        tb49 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t32.x = t32.x + t5.x;
        t32.x = t32.x + 0.5;
        t32.x = fract(t32.x);
        t32.x = t32.x * 2.0 + -1.0;
        t51 = abs(t32.x) * abs(t32.x);
        t32.x = -abs(t32.x) * 2.0 + 3.0;
        t32.x = t51 * t32.x + -0.5;
        t32.x = dot(t32.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t32.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb48){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t32.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t32.x);
            t32.xy = t8.xy + vec2(0.5, 0.5);
            t32.xy = fract(t32.xy);
            t32.xy = t32.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t32.xy) * abs(t32.xy);
            t32.xy = -abs(t32.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t32.xy = t8.xy * t32.xy + vec2(-0.5, -0.5);
            t32.xy = t32.xy + t32.xy;
            t49 = dot(t4.xyz, t4.xyz);
            t49 = sqrt(t49);
            t51 = t32.x * t32.x + t32.y;
            t52 = t6.z * in_TEXCOORD2.x;
            t51 = t51 * t52;
            t6.x = sin(t51);
            t8.x = cos(t51);
            t51 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t51);
            t24.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t24.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t24.y);
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            t12.z = t9.w * t5.z + t24.y;
            t52 = t5.z * t5.z;
            t12.w = t52 * t51 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t19 = dot(t3.xyz, t5.xyz);
            t19 = max(t19, -1.0);
            t19 = min(t19, 1.0);
            t8.w = t19 + t8.y;
            t51 = dot(t8.xzw, t8.xzw);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t8.zxw;
            t51 = -abs(t19) + 1.0;
            t51 = sqrt(t51);
            t52 = abs(t19) * -0.0187292993 + 0.0742610022;
            t52 = t52 * abs(t19) + -0.212114394;
            t52 = t52 * abs(t19) + 1.57072878;
            t6.x = t51 * t52;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb19 = t19<(-t19);
            t19 = tb19 ? t6.x : float(0.0);
            t19 = t52 * t51 + t19;
            t32.x = (-t32.y) * t32.y + t32.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t39.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t48 = t6.z * t6.z;
            t48 = t48 * t6.x + 1.0;
            t48 = t48 * 0.5;
            t48 = clamp(t48, 0.0, 1.0);
            t48 = log2(t48);
            t48 = t48 * t7.y;
            t48 = exp2(t48);
            t32.x = t6.y * t32.x;
            t32.x = t19 * t6.w + t32.x;
            t32.x = t7.x * t48 + t32.x;
            t32.x = t32.x * in_TEXCOORD2.x;
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            t32.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t48 = t5.x * t5.x;
            t9.w = t48 * t32.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t51 = dot(t5.xyz, t5.xyz);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t5.xyz;
            t4.xyz = vec3(t49) * t5.xyz;
        } else {
            t32.xy = in_NORMAL0.xy;
            t19 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t32.xy = in_NORMAL0.xy;
        t19 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb49 = t16_2.x>=3.0;
    if(tb49){
        tb49 = t16_2.x==5.0;
        if(tb49){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t49 = dot(t5.xyz, t5.xyz);
            t49 = inversesqrt(t49);
            t5.xyz = vec3(t49) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t49 = t0.x + _ST_WindBranch.x;
            t2.x = t49 + in_TEXCOORD0.w;
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t51 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t51 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb51 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            t51 = (-t2.y) * t2.z + t7.x;
            t51 = t7.y * t51 + t7.w;
            t52 = (-t51) + t7.x;
            t51 = t7.y * t52 + t51;
            t51 = t51 * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            t53 = t2.x * t53;
            t51 = t51 * t52 + t53;
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t51 = t51 * t52;
            t6.xyz = vec3(t51) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t49 * 0.100000001 + in_TEXCOORD0.w;
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t49 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t39.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t49 = t7.x * t7.y;
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            t51 = t2.w * _ST_WindVector.w;
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t49) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t49 = (-t0.x) + t7.x;
            t0.x = t7.y * t49 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t49 = (-_ST_WindVector.w) + 1.0;
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            t51 = t51 * t6.x;
            t0.x = t0.x * t49 + t51;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t49 = float(1.0) / _ST_WindGlobal.z;
    t49 = (-t49) * 0.25 + t4.y;
    t49 = max(t49, 0.0);
    t49 = t49 * _ST_WindGlobal.z;
    tb51 = t49!=0.0;
    t52 = log2(t49);
    t52 = t52 * _ST_WindGlobal.w;
    t52 = exp2(t52);
    t49 = (tb51) ? t52 : t49;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t37.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t37.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t51 = t5.y * t5.y + t5.x;
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t51 = _ST_WindGlobal.y * t51 + t52;
    t49 = t49 * t51;
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    t5.y = t4.y;
    t49 = dot(t5.xyz, t5.xyz);
    t49 = inversesqrt(t49);
    t3.xzw = vec3(t49) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    t5.xz = t4.xz * vec2(0.5, 0.5);
    t0.x = t4.y * _ProjectionParams.x;
    t5.w = t0.x * 0.5;
    t0.xy = t5.zz + t5.xw;
    t0.xy = t0.xy * _ScreenParams.xy;
    t4.xy = t0.xy * vec2(0.25, 0.25);
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t5.x = _World2Object[0].x;
    t5.y = _World2Object[1].x;
    t5.z = _World2Object[2].x;
    t6.x = _World2Object[0].y;
    t6.y = _World2Object[1].y;
    t6.z = _World2Object[2].y;
    t0.xyw = t32.yyy * t6.xyz;
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    t48 = dot(t0.xyz, t0.xyz);
    t48 = inversesqrt(t48);
    t0.xyz = vec3(t48) * t0.xyz;
    t16_2 = t0.yzzx * t0.xyzz;
    t16_15.x = dot(unity_SHBr, t16_2);
    t16_15.y = dot(unity_SHBg, t16_2);
    t16_15.z = dot(unity_SHBb, t16_2);
    t16_63 = t0.y * t0.y;
    t16_63 = t0.x * t0.x + (-t16_63);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t4.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    SV_Target2.w = 1.0;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp float tangentSign_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_14;
  highp vec3 rotatedWindVector_15;
  highp vec3 finalPosition_16;
  finalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_20;
    tmpvar_20 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_16 = (finalPosition_16 * tmpvar_21);
    finalPosition_16 = (normalize(finalPosition_16) * tmpvar_20);
  };
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = finalPosition_16;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (finalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * rotatedWindVector_15.zxy) - (tmpvar_32.zxy * rotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (rotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_13 = vDirection_26;
    finalPosition_16 = vPos_25;
  };
  finalPosition_16 = (finalPosition_16 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_66;
  tmpvar_66.x = _Object2World[3].x;
  tmpvar_66.y = _Object2World[3].y;
  tmpvar_66.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = finalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = finalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_66.x + tmpvar_66.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (finalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((rotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_66.x + tmpvar_66.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    finalPosition_16 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = finalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((finalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_66.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_66.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (finalPosition_16.xz + (rotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    finalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = finalPosition_16;
  highp vec4 hPos_100;
  hPos_100 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_101;
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (hPos_100 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = hPos_100.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  screenPos_101 = tmpvar_105;
  screenPos_101.xy = (screenPos_101.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_13.x)
   + 
    (v_108.xyz * tmpvar_13.y)
  ) + (v_109.xyz * tmpvar_13.z)));
  worldNormal_6 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_4 = tmpvar_113;
  lowp vec3 tmpvar_114;
  tmpvar_114 = (((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx)) * tangentSign_4);
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.x;
  tmpvar_115.y = tmpvar_114.x;
  tmpvar_115.z = worldNormal_6.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.y;
  tmpvar_116.y = tmpvar_114.y;
  tmpvar_116.z = worldNormal_6.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_5.z;
  tmpvar_117.y = tmpvar_114.z;
  tmpvar_117.z = worldNormal_6.z;
  tmpvar_117.w = tmpvar_106.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_6;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_101;
  xlv_TEXCOORD7 = tmpvar_8;
  xlv_TEXCOORD8 = (x2_120 + (unity_SHC.xyz * (
    (normal_119.x * normal_119.x)
   - 
    (normal_119.y * normal_119.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = dot(t4.xyz, t4.xyz);
    t52 = sqrt(t52);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t5.xyz, t5.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t5.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2.x<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2.x==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2.x>=3.0;
    if(tb52){
        tb52 = t16_2.x==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    t5.xz = t4.xz * vec2(0.5, 0.5);
    t0.x = t4.y * _ProjectionParams.x;
    t5.w = t0.x * 0.5;
    t0.xy = t5.zz + t5.xw;
    t0.xy = t0.xy * _ScreenParams.xy;
    t4.xy = t0.xy * vec2(0.25, 0.25);
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.zw = _World2Object[2].yy;
    t5 = t34.yyyy * t5;
    t0 = t2 * t34.xxxx + t5;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.zw = _World2Object[2].zz;
    t0 = t2 * vec4(t20) + t0;
    t52 = dot(t0.xyw, t0.xyw);
    t52 = inversesqrt(t52);
    t0 = t0 * vec4(t52);
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t5.xyz = vec3(t52) * t5.xyz;
    t52 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_15.xyz = t0.wxy * t5.xyz;
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    t10_15.xyz = vec3(t52) * t10_15.xyz;
    t16_2 = t0.ywzx * t0;
    t16_16.x = dot(unity_SHBr, t16_2);
    t16_16.y = dot(unity_SHBg, t16_2);
    t16_16.z = dot(unity_SHBb, t16_2);
    t16_67 = t0.y * t0.y;
    t16_67 = t0.x * t0.x + (-t16_67);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD0.y = t10_15.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.w = t3.x;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD1.y = t10_15.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.w = t3.z;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD2.y = t10_15.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD2.w = t3.w;
    vs_TEXCOORD3.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t4.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.xyz = exp2((-t16_3.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp float tangentSign_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_14;
  highp vec3 rotatedWindVector_15;
  highp vec3 finalPosition_16;
  finalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_20;
    tmpvar_20 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_16 = (finalPosition_16 * tmpvar_21);
    finalPosition_16 = (normalize(finalPosition_16) * tmpvar_20);
  };
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = finalPosition_16;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (finalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * rotatedWindVector_15.zxy) - (tmpvar_32.zxy * rotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (rotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_13 = vDirection_26;
    finalPosition_16 = vPos_25;
  };
  finalPosition_16 = (finalPosition_16 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_66;
  tmpvar_66.x = _Object2World[3].x;
  tmpvar_66.y = _Object2World[3].y;
  tmpvar_66.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = finalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = finalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_66.x + tmpvar_66.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (finalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((rotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_66.x + tmpvar_66.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    finalPosition_16 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = finalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (finalPosition_16, finalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((finalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_66.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_66.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (finalPosition_16.xz + (rotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    finalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = finalPosition_16;
  highp vec4 hPos_100;
  hPos_100 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_101;
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (hPos_100 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = hPos_100.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  screenPos_101 = tmpvar_105;
  screenPos_101.xy = (screenPos_101.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_13.x)
   + 
    (v_108.xyz * tmpvar_13.y)
  ) + (v_109.xyz * tmpvar_13.z)));
  worldNormal_6 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_4 = tmpvar_113;
  lowp vec3 tmpvar_114;
  tmpvar_114 = (((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx)) * tangentSign_4);
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.x;
  tmpvar_115.y = tmpvar_114.x;
  tmpvar_115.z = worldNormal_6.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.y;
  tmpvar_116.y = tmpvar_114.y;
  tmpvar_116.z = worldNormal_6.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_5.z;
  tmpvar_117.y = tmpvar_114.z;
  tmpvar_117.z = worldNormal_6.z;
  tmpvar_117.w = tmpvar_106.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_6;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_101;
  xlv_TEXCOORD7 = tmpvar_8;
  xlv_TEXCOORD8 = (x2_120 + (unity_SHC.xyz * (
    (normal_119.x * normal_119.x)
   - 
    (normal_119.y * normal_119.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = dot(t4.xyz, t4.xyz);
    t52 = sqrt(t52);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t5.xyz, t5.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t5.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2.x<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2.x==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2.x>=3.0;
    if(tb52){
        tb52 = t16_2.x==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    t5.xz = t4.xz * vec2(0.5, 0.5);
    t0.x = t4.y * _ProjectionParams.x;
    t5.w = t0.x * 0.5;
    t0.xy = t5.zz + t5.xw;
    t0.xy = t0.xy * _ScreenParams.xy;
    t4.xy = t0.xy * vec2(0.25, 0.25);
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.zw = _World2Object[2].yy;
    t5 = t34.yyyy * t5;
    t0 = t2 * t34.xxxx + t5;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.zw = _World2Object[2].zz;
    t0 = t2 * vec4(t20) + t0;
    t52 = dot(t0.xyw, t0.xyw);
    t52 = inversesqrt(t52);
    t0 = t0 * vec4(t52);
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t5.xyz = vec3(t52) * t5.xyz;
    t52 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_15.xyz = t0.wxy * t5.xyz;
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    t10_15.xyz = vec3(t52) * t10_15.xyz;
    t16_2 = t0.ywzx * t0;
    t16_16.x = dot(unity_SHBr, t16_2);
    t16_16.y = dot(unity_SHBg, t16_2);
    t16_16.z = dot(unity_SHBb, t16_2);
    t16_67 = t0.y * t0.y;
    t16_67 = t0.x * t0.x + (-t16_67);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD0.y = t10_15.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.w = t3.x;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD1.y = t10_15.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.w = t3.z;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD2.y = t10_15.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD2.w = t3.w;
    vs_TEXCOORD3.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t4.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    t16_4.x = max(t16_8.z, t16_8.y);
    t16_4.x = max(t16_8.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.w = 1.0;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t10_2.xyz = t0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = t10_2.xyz;
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 336943
Program "vp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_3;
  highp vec3 rotatedWindVector_4;
  highp vec3 finalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  finalPosition_5 = tmpvar_6;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    rotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((rotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    finalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = finalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (finalPosition_5, finalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((finalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (finalPosition_5.xz + (rotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    finalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = finalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    tb19 = unity_LightShadowBias.z!=0.0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t20 = dot(t3.xyz, t3.xyz);
    t20 = inversesqrt(t20);
    t3.xyz = vec3(t20) * t3.xyz;
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t4.xyz = vec3(t20) * t4.xyz;
    t20 = dot(t3.xyz, t4.xyz);
    t20 = (-t20) * t20 + 1.0;
    t20 = sqrt(t20);
    t20 = t20 * unity_LightShadowBias.z;
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    t0 = t2.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (bool(tb19)) ? t0 : t2;
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = t0.z + t1.x;
    t7.x = max((-t0.w), t1.x);
    t7.x = (-t1.x) + t7.x;
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    gl_Position.xyw = t0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_3;
  highp vec3 rotatedWindVector_4;
  highp vec3 finalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  finalPosition_5 = tmpvar_6;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    rotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((rotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    finalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = finalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (finalPosition_5, finalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((finalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (finalPosition_5.xz + (rotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    finalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = finalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  finalPosition_9 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_11 == 5.0)) {
    highp vec3 vPos_14;
    vPos_14 = tmpvar_10;
    highp float fOffset_15;
    fOffset_15 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_15 = 0.75;
    };
    highp vec4 tmpvar_16;
    tmpvar_16.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_16.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_15);
    highp vec4 tmpvar_17;
    tmpvar_17 = abs(((
      fract((tmpvar_16 + 0.5))
     * 2.0) - 1.0));
    vPos_14 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_17 * tmpvar_17)
       * 
        (3.0 - (2.0 * tmpvar_17))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    finalPosition_9 = vPos_14;
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = finalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = finalPosition_9;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (finalPosition_9 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_9 = vPos_19;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_9;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_9 = vPos_44;
  };
  tmpvar_5.xyz = finalPosition_9;
  highp vec3 vertex_52;
  vertex_52 = tmpvar_5.xyz;
  highp vec4 clipPos_53;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_52;
    highp vec3 tmpvar_55;
    tmpvar_55 = (_Object2World * tmpvar_54).xyz;
    highp vec4 v_56;
    v_56.x = _World2Object[0].x;
    v_56.y = _World2Object[1].x;
    v_56.z = _World2Object[2].x;
    v_56.w = _World2Object[3].x;
    highp vec4 v_57;
    v_57.x = _World2Object[0].y;
    v_57.y = _World2Object[1].y;
    v_57.z = _World2Object[2].y;
    v_57.w = _World2Object[3].y;
    highp vec4 v_58;
    v_58.x = _World2Object[0].z;
    v_58.y = _World2Object[1].z;
    v_58.z = _World2Object[2].z;
    v_58.w = _World2Object[3].z;
    highp vec3 tmpvar_59;
    tmpvar_59 = normalize(((
      (v_56.xyz * tmpvar_6.x)
     + 
      (v_57.xyz * tmpvar_6.y)
    ) + (v_58.xyz * tmpvar_6.z)));
    highp float tmpvar_60;
    tmpvar_60 = dot (tmpvar_59, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_55 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_61;
    tmpvar_61.w = 1.0;
    tmpvar_61.xyz = (tmpvar_55 - (tmpvar_59 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_60 * tmpvar_60)))
    )));
    clipPos_53 = (unity_MatrixVP * tmpvar_61);
  } else {
    highp vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vertex_52;
    clipPos_53 = (glstate_matrix_mvp * tmpvar_62);
  };
  highp vec4 clipPos_63;
  clipPos_63.xyw = clipPos_53.xyw;
  clipPos_63.z = (clipPos_53.z + clamp ((unity_LightShadowBias.x / clipPos_53.w), 0.0, 1.0));
  clipPos_63.z = mix (clipPos_63.z, max (clipPos_63.z, -(clipPos_53.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_63;
  xlv_TEXCOORD1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    tb19 = unity_LightShadowBias.z!=0.0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t20 = dot(t3.xyz, t3.xyz);
    t20 = inversesqrt(t20);
    t3.xyz = vec3(t20) * t3.xyz;
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t4.xyz = vec3(t20) * t4.xyz;
    t20 = dot(t3.xyz, t4.xyz);
    t20 = (-t20) * t20 + 1.0;
    t20 = sqrt(t20);
    t20 = t20 * unity_LightShadowBias.z;
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    t0 = t2.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (bool(tb19)) ? t0 : t2;
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = t0.z + t1.x;
    t7.x = max((-t0.w), t1.x);
    t7.x = (-t1.x) + t7.x;
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    gl_Position.xyw = t0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_3;
  tmpvar_3 = tmpvar_2.xy;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_5;
  highp vec3 rotatedWindVector_6;
  highp vec3 finalPosition_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_1.xyz;
  finalPosition_7 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    rotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_9 == 5.0)) {
    highp vec3 vPos_12;
    vPos_12 = tmpvar_8;
    highp float fOffset_13;
    fOffset_13 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_13 = 0.75;
    };
    highp vec4 tmpvar_14;
    tmpvar_14.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_14.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_13);
    highp vec4 tmpvar_15;
    tmpvar_15 = abs(((
      fract((tmpvar_14 + 0.5))
     * 2.0) - 1.0));
    vPos_12 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_15 * tmpvar_15)
       * 
        (3.0 - (2.0 * tmpvar_15))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    finalPosition_7 = vPos_12;
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = finalPosition_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = finalPosition_7;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (finalPosition_7 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_7 = vPos_17;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_7;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_7, finalPosition_7));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_7.xz + (rotatedWindVector_6.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_7 = vPos_42;
  };
  tmpvar_4.xyz = finalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  finalPosition_9 = tmpvar_1.xyz;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_13;
    tmpvar_13 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_14[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_14[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_9 = (finalPosition_9 * tmpvar_14);
    finalPosition_9 = (normalize(finalPosition_9) * tmpvar_13);
  };
  if (((tmpvar_10 > 1.0) && (tmpvar_10 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_10 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = finalPosition_9;
    highp vec3 vDirection_19;
    vDirection_19 = tmpvar_2;
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_17) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_15);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (finalPosition_9 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_19 = tmpvar_2;
    vPos_18 = vPos_22;
    if (isBestWind_16) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_17) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp float fOsc_34;
      highp vec3 vOriginPos_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_26 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_26 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_26 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_26 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      vOriginPos_35 = vPos_22;
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_25.yzx * rotatedWindVector_8.zxy) - (tmpvar_25.zxy * rotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (rotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_33);
      vAxis_33 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      fOsc_34 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_50;
        fTime_50 = (tmpvar_30.z + tmpvar_37);
        highp vec4 tmpvar_51;
        tmpvar_51.zw = vec2(0.0, 0.0);
        tmpvar_51.x = fTime_50;
        tmpvar_51.y = (0.87 * fTime_50);
        highp vec4 tmpvar_52;
        highp vec4 tmpvar_53;
        tmpvar_53 = abs(((
          fract((tmpvar_51 + 0.5))
         * 2.0) - 1.0));
        tmpvar_52 = (((
          (tmpvar_53 * tmpvar_53)
         * 
          (3.0 - (2.0 * tmpvar_53))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_52.x * tmpvar_52.y) * tmpvar_52.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_54;
      fAngle_54 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_29)
       + 
        (fOsc_34 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_55;
      vSinCos_55.x = sin(fAngle_54);
      vSinCos_55.y = cos(fAngle_54);
      highp float tmpvar_56;
      tmpvar_56 = (1.0 - vSinCos_55.y);
      highp mat3 tmpvar_57;
      tmpvar_57[0].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_55.y);
      tmpvar_57[0].y = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[0].z = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[1].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[1].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_55.y);
      tmpvar_57[1].z = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[2].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].z = (((tmpvar_56 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_55.y);
      highp mat3 tmpvar_58;
      tmpvar_58 = (tmpvar_45 * tmpvar_57);
      vOriginPos_35 = (normalize((tmpvar_58 * vPos_22)) * tmpvar_41);
      vDirection_19 = (tmpvar_58 * _glesNormal);
      vPos_18 = vOriginPos_35;
    };
    tmpvar_6 = vDirection_19;
    finalPosition_9 = vPos_18;
  };
  finalPosition_9 = (finalPosition_9 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_59;
  tmpvar_59.x = _Object2World[3].x;
  tmpvar_59.y = _Object2World[3].y;
  tmpvar_59.z = _Object2World[3].z;
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_60;
    vPos_60 = finalPosition_9;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_61;
      vPos_61 = finalPosition_9;
      highp float fTime_62;
      highp float fAdherenceScale_63;
      highp vec3 vWindVector_64;
      vWindVector_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_62 = (_ST_WindBranch.x + (tmpvar_59.x + tmpvar_59.y));
      highp vec4 vOscillations_65;
      highp float fOscillation_66;
      fOscillation_66 = 1.0;
      highp float fAmount_67;
      highp float fTarget_68;
      highp vec4 tmpvar_69;
      tmpvar_69.x = (fTime_62 + _glesMultiTexCoord0.w);
      tmpvar_69.y = ((fTime_62 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_69.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_62 + _glesMultiTexCoord0.w));
      tmpvar_69.w = ((fTime_62 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_70;
      tmpvar_70 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      vOscillations_65 = (((
        (tmpvar_70 * tmpvar_70)
       * 
        (3.0 - (2.0 * tmpvar_70))
      ) - 0.5) * 2.0);
      highp float tmpvar_71;
      tmpvar_71 = (vOscillations_65.y * vOscillations_65.z);
      fTarget_68 = 1.0;
      fAmount_67 = tmpvar_71;
      if ((tmpvar_71 < 0.0)) {
        fTarget_68 = -1.0;
        fAmount_67 = -(tmpvar_71);
      };
      fOscillation_66 = (((
        mix (mix (tmpvar_71, fTarget_68, fAmount_67), fTarget_68, fAmount_67)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_65.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_66 = (fOscillation_66 * (1.0 + (vOscillations_65.w * _ST_WindBranchWhip.x)));
      vPos_61 = (finalPosition_9 + ((vWindVector_64 * fOscillation_66) * _ST_WindBranch.y));
      highp vec4 tmpvar_72;
      tmpvar_72.zw = vec2(0.0, 0.0);
      tmpvar_72.x = ((fTime_62 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_72.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_73;
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      tmpvar_73 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((tmpvar_73.x * tmpvar_73.y) * (
        (tmpvar_73.x * tmpvar_73.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_65.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_61 = (vPos_61 + ((
        ((rotatedBranchAnchor_7 - vPos_61) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_60 = vPos_61;
    } else {
      highp vec3 vPos_75;
      vPos_75 = vPos_60;
      highp float fTime_76;
      highp vec3 vWindVector_77;
      vWindVector_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_76 = (_ST_WindBranch.x + (tmpvar_59.x + tmpvar_59.y));
      highp vec4 vOscillations_78;
      highp float fOscillation_79;
      fOscillation_79 = 1.0;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (fTime_76 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((fTime_76 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_76 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_78 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_78.y * vOscillations_78.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      fOscillation_79 = (((
        mix (mix (tmpvar_84, fTarget_81, fAmount_80), fTarget_81, fAmount_80)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_78.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_75 = (vPos_60 + ((vWindVector_77 * fOscillation_79) * _ST_WindBranch.y));
      vPos_60 = vPos_75;
    };
    finalPosition_9 = vPos_60;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = finalPosition_9;
    highp float fMoveAmount_86;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_89;
    tmpvar_89 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_59.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_59.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    fMoveAmount_86 = ((_ST_WindGlobal.y * (tmpvar_91.x + 
      (tmpvar_91.y * tmpvar_91.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_86 = (fMoveAmount_86 * fAdjust_87);
    vPos_85.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_86));
    vPos_85 = (normalize(vPos_85) * fLength_88);
    finalPosition_9 = vPos_85;
  };
  tmpvar_5.xyz = finalPosition_9;
  highp vec3 vertex_93;
  vertex_93 = tmpvar_5.xyz;
  highp vec4 clipPos_94;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_95;
    tmpvar_95.w = 1.0;
    tmpvar_95.xyz = vertex_93;
    highp vec3 tmpvar_96;
    tmpvar_96 = (_Object2World * tmpvar_95).xyz;
    highp vec4 v_97;
    v_97.x = _World2Object[0].x;
    v_97.y = _World2Object[1].x;
    v_97.z = _World2Object[2].x;
    v_97.w = _World2Object[3].x;
    highp vec4 v_98;
    v_98.x = _World2Object[0].y;
    v_98.y = _World2Object[1].y;
    v_98.z = _World2Object[2].y;
    v_98.w = _World2Object[3].y;
    highp vec4 v_99;
    v_99.x = _World2Object[0].z;
    v_99.y = _World2Object[1].z;
    v_99.z = _World2Object[2].z;
    v_99.w = _World2Object[3].z;
    highp vec3 tmpvar_100;
    tmpvar_100 = normalize(((
      (v_97.xyz * tmpvar_6.x)
     + 
      (v_98.xyz * tmpvar_6.y)
    ) + (v_99.xyz * tmpvar_6.z)));
    highp float tmpvar_101;
    tmpvar_101 = dot (tmpvar_100, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_96 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = (tmpvar_96 - (tmpvar_100 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_101 * tmpvar_101)))
    )));
    clipPos_94 = (unity_MatrixVP * tmpvar_102);
  } else {
    highp vec4 tmpvar_103;
    tmpvar_103.w = 1.0;
    tmpvar_103.xyz = vertex_93;
    clipPos_94 = (glstate_matrix_mvp * tmpvar_103);
  };
  highp vec4 clipPos_104;
  clipPos_104.xyw = clipPos_94.xyw;
  clipPos_104.z = (clipPos_94.z + clamp ((unity_LightShadowBias.x / clipPos_94.w), 0.0, 1.0));
  clipPos_104.z = mix (clipPos_104.z, max (clipPos_104.z, -(clipPos_94.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_104;
  xlv_TEXCOORD1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp float t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = dot(t3.xyz, t3.xyz);
    t43 = sqrt(t43);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t4.xyz;
        } else {
            t15.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t15.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb44 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            t44 = (-t0.y) * t0.z + t6.x;
            t44 = t6.y * t44 + t6.w;
            t45 = (-t44) + t6.x;
            t44 = t6.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t5.xyz = vec3(t44) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t6.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t6.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t5.x = t16.x + in_TEXCOORD0.w;
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t16.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t5.y) * t5.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t5.x;
            t16.x = t16.x * t44 + t45;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t3.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb45 = t44!=0.0;
    t4.x = log2(t44);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t44 = (tb45) ? t4.x : t44;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t32.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t32.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t45 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    t44 = t44 * t45;
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    tb1.x = unity_LightShadowBias.z!=0.0;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t15.yyy * t5.xyz;
    t4.xyz = t4.xyz * t15.xxx + t5.xyz;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t15.xyz = t5.xyz * t15.zzz + t4.xyz;
    t44 = dot(t15.xyz, t15.xyz);
    t44 = inversesqrt(t44);
    t15.xyz = t15.xyz * vec3(t44);
    t4.xyz = (-t3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t44 = dot(t15.xyz, t4.xyz);
    t44 = (-t44) * t44 + 1.0;
    t44 = sqrt(t44);
    t44 = t44 * unity_LightShadowBias.z;
    t15.xyz = (-t15.xyz) * vec3(t44) + t3.xyz;
    t0 = t15.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t15.xxxx + t0;
    t0 = unity_MatrixVP[2] * t15.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (tb1.x) ? t0 : t2;
    t1 = unity_LightShadowBias.x / t0.w;
    t1 = clamp(t1, 0.0, 1.0);
    t1 = t0.z + t1;
    t15.x = max((-t0.w), t1);
    t15.x = (-t1) + t15.x;
    gl_Position.z = unity_LightShadowBias.y * t15.x + t1;
    gl_Position.xyw = t0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_3;
  tmpvar_3 = tmpvar_2.xy;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_5;
  highp vec3 rotatedWindVector_6;
  highp vec3 finalPosition_7;
  finalPosition_7 = tmpvar_1.xyz;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    rotatedWindVector_6 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_5 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_7 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_11;
    tmpvar_11 = sqrt(dot (finalPosition_7, finalPosition_7));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_12[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_12[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_7 = (finalPosition_7 * tmpvar_12);
    finalPosition_7 = (normalize(finalPosition_7) * tmpvar_11);
  };
  if (((tmpvar_8 > 1.0) && (tmpvar_8 < 5.0))) {
    highp float tmpvar_13;
    tmpvar_13 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_14;
    isBestWind_14 = (tmpvar_8 == 4.0);
    bool bLeaf2_15;
    bLeaf2_15 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_16;
    vPos_16 = finalPosition_7;
    highp float tmpvar_17;
    if (bLeaf2_15) {
      tmpvar_17 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_17 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_18;
    if (bLeaf2_15) {
      tmpvar_18 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_18 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_19;
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (tmpvar_17 + tmpvar_13);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (finalPosition_7 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_18 * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_16 = vPos_19;
    if (isBestWind_14) {
      highp vec3 tmpvar_22;
      tmpvar_22 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_23;
      if (bLeaf2_15) {
        tmpvar_23 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_23 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_24;
      if (bLeaf2_15) {
        tmpvar_24 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_24 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_25;
      if (bLeaf2_15) {
        tmpvar_25 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_26;
      if (bLeaf2_15) {
        tmpvar_26 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_27;
      if (bLeaf2_15) {
        tmpvar_27 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_27 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_28;
      if (bLeaf2_15) {
        tmpvar_28 = bool(1);
      } else {
        tmpvar_28 = bool(1);
      };
      highp float fTwitch_29;
      highp vec3 vAxis_30;
      highp float fOsc_31;
      highp vec3 vOriginPos_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_34;
      tmpvar_34 = ((tmpvar_33.x + tmpvar_33.y) + tmpvar_33.z);
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_23 + tmpvar_34);
      tmpvar_35.y = ((tmpvar_23 * 0.75) - tmpvar_34);
      tmpvar_35.z = ((tmpvar_23 * 0.01) + tmpvar_34);
      tmpvar_35.w = (tmpvar_23 + tmpvar_34);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      vOriginPos_32 = vPos_19;
      highp float tmpvar_38;
      tmpvar_38 = sqrt(dot (vPos_19, vPos_19));
      highp float fAngle_39;
      fAngle_39 = ((_glesMultiTexCoord2.x * tmpvar_25) * (tmpvar_36.x + (tmpvar_36.y * tmpvar_36.y)));
      highp vec2 vSinCos_40;
      vSinCos_40.x = sin(fAngle_39);
      vSinCos_40.y = cos(fAngle_39);
      highp float tmpvar_41;
      tmpvar_41 = (1.0 - vSinCos_40.y);
      highp mat3 tmpvar_42;
      tmpvar_42[0].x = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.x) + vSinCos_40.y);
      tmpvar_42[0].y = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.y) + (vSinCos_40.x * tmpvar_22.z));
      tmpvar_42[0].z = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.z) - (vSinCos_40.x * tmpvar_22.y));
      tmpvar_42[1].x = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.y) - (vSinCos_40.x * tmpvar_22.z));
      tmpvar_42[1].y = (((tmpvar_41 * tmpvar_22.y) * tmpvar_22.y) + vSinCos_40.y);
      tmpvar_42[1].z = (((tmpvar_41 * tmpvar_22.y) * tmpvar_22.z) + (vSinCos_40.x * tmpvar_22.x));
      tmpvar_42[2].x = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.z) + (vSinCos_40.x * tmpvar_22.y));
      tmpvar_42[2].y = (((tmpvar_41 * tmpvar_22.y) * tmpvar_22.z) - (vSinCos_40.x * tmpvar_22.x));
      tmpvar_42[2].z = (((tmpvar_41 * tmpvar_22.z) * tmpvar_22.z) + vSinCos_40.y);
      highp vec3 tmpvar_43;
      tmpvar_43 = ((tmpvar_22.yzx * rotatedWindVector_6.zxy) - (tmpvar_22.zxy * rotatedWindVector_6.yzx));
      vAxis_30.xz = tmpvar_43.xz;
      highp float tmpvar_44;
      tmpvar_44 = clamp (dot (rotatedWindVector_6, tmpvar_22), -1.0, 1.0);
      vAxis_30.y = (tmpvar_43.y + tmpvar_44);
      highp vec3 tmpvar_45;
      tmpvar_45 = normalize(vAxis_30);
      vAxis_30 = tmpvar_45;
      highp float tmpvar_46;
      tmpvar_46 = (1.570796 - (sign(tmpvar_44) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_44))) * (1.570796 + (abs(tmpvar_44) * (-0.2146018 + 
          (abs(tmpvar_44) * (0.08656672 + (abs(tmpvar_44) * -0.03102955)))
        ))))
      )));
      fOsc_31 = (tmpvar_36.y - (tmpvar_36.x * tmpvar_36.x));
      fTwitch_29 = 0.0;
      if (tmpvar_28) {
        highp float fTime_47;
        fTime_47 = (tmpvar_27.z + tmpvar_34);
        highp vec4 tmpvar_48;
        tmpvar_48.zw = vec2(0.0, 0.0);
        tmpvar_48.x = fTime_47;
        tmpvar_48.y = (0.87 * fTime_47);
        highp vec4 tmpvar_49;
        highp vec4 tmpvar_50;
        tmpvar_50 = abs(((
          fract((tmpvar_48 + 0.5))
         * 2.0) - 1.0));
        tmpvar_49 = (((
          (tmpvar_50 * tmpvar_50)
         * 
          (3.0 - (2.0 * tmpvar_50))
        ) - 0.5) * 2.0);
        fTwitch_29 = (tmpvar_27.x * pow (clamp (
          ((((tmpvar_49.x * tmpvar_49.y) * tmpvar_49.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_27.y));
      };
      highp float fAngle_51;
      fAngle_51 = (_glesMultiTexCoord2.x * ((
        (tmpvar_46 * tmpvar_26)
       + 
        (fOsc_31 * tmpvar_24)
      ) + fTwitch_29));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.y) + (vSinCos_52.x * tmpvar_45.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.z) - (vSinCos_52.x * tmpvar_45.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.y) - (vSinCos_52.x * tmpvar_45.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_45.y) * tmpvar_45.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_45.y) * tmpvar_45.z) + (vSinCos_52.x * tmpvar_45.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.z) + (vSinCos_52.x * tmpvar_45.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_45.y) * tmpvar_45.z) - (vSinCos_52.x * tmpvar_45.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_45.z) * tmpvar_45.z) + vSinCos_52.y);
      vOriginPos_32 = (normalize((
        (tmpvar_42 * tmpvar_54)
       * vPos_19)) * tmpvar_38);
      vPos_16 = vOriginPos_32;
    };
    finalPosition_7 = vPos_16;
  };
  finalPosition_7 = (finalPosition_7 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_55;
  tmpvar_55.x = _Object2World[3].x;
  tmpvar_55.y = _Object2World[3].y;
  tmpvar_55.z = _Object2World[3].z;
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_56;
    vPos_56 = finalPosition_7;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_57;
      vPos_57 = finalPosition_7;
      highp float fTime_58;
      highp float fAdherenceScale_59;
      highp vec3 vWindVector_60;
      vWindVector_60 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_58 = (_ST_WindBranch.x + (tmpvar_55.x + tmpvar_55.y));
      highp vec4 vOscillations_61;
      highp float fOscillation_62;
      fOscillation_62 = 1.0;
      highp float fAmount_63;
      highp float fTarget_64;
      highp vec4 tmpvar_65;
      tmpvar_65.x = (fTime_58 + _glesMultiTexCoord0.w);
      tmpvar_65.y = ((fTime_58 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_65.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_58 + _glesMultiTexCoord0.w));
      tmpvar_65.w = ((fTime_58 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_66;
      tmpvar_66 = abs(((
        fract((tmpvar_65 + 0.5))
       * 2.0) - 1.0));
      vOscillations_61 = (((
        (tmpvar_66 * tmpvar_66)
       * 
        (3.0 - (2.0 * tmpvar_66))
      ) - 0.5) * 2.0);
      highp float tmpvar_67;
      tmpvar_67 = (vOscillations_61.y * vOscillations_61.z);
      fTarget_64 = 1.0;
      fAmount_63 = tmpvar_67;
      if ((tmpvar_67 < 0.0)) {
        fTarget_64 = -1.0;
        fAmount_63 = -(tmpvar_67);
      };
      fOscillation_62 = (((
        mix (mix (tmpvar_67, fTarget_64, fAmount_63), fTarget_64, fAmount_63)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_61.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_62 = (fOscillation_62 * (1.0 + (vOscillations_61.w * _ST_WindBranchWhip.x)));
      vPos_57 = (finalPosition_7 + ((vWindVector_60 * fOscillation_62) * _ST_WindBranch.y));
      highp vec4 tmpvar_68;
      tmpvar_68.zw = vec2(0.0, 0.0);
      tmpvar_68.x = ((fTime_58 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_68.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_69;
      highp vec4 tmpvar_70;
      tmpvar_70 = abs(((
        fract((tmpvar_68 + 0.5))
       * 2.0) - 1.0));
      tmpvar_69 = (((
        (tmpvar_70 * tmpvar_70)
       * 
        (3.0 - (2.0 * tmpvar_70))
      ) - 0.5) * 2.0);
      fAdherenceScale_59 = (1.0 - ((tmpvar_69.x * tmpvar_69.y) * (
        (tmpvar_69.x * tmpvar_69.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_59 = (fAdherenceScale_59 + ((vOscillations_61.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_57 = (vPos_57 + ((
        ((rotatedBranchAnchor_5 - vPos_57) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_59) * _glesMultiTexCoord0.z));
      vPos_56 = vPos_57;
    } else {
      highp vec3 vPos_71;
      vPos_71 = vPos_56;
      highp float fTime_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_55.x + tmpvar_55.y));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.w = 0.0;
      tmpvar_78.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_71 = (vPos_56 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      vPos_56 = vPos_71;
    };
    finalPosition_7 = vPos_56;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_81;
    vPos_81 = finalPosition_7;
    highp float fMoveAmount_82;
    highp float fAdjust_83;
    highp float fLength_84;
    fLength_84 = sqrt(dot (finalPosition_7, finalPosition_7));
    highp float tmpvar_85;
    tmpvar_85 = (max ((finalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_83 = tmpvar_85;
    if ((tmpvar_85 != 0.0)) {
      fAdjust_83 = pow (tmpvar_85, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_86;
    tmpvar_86.zw = vec2(0.0, 0.0);
    tmpvar_86.x = (tmpvar_55.x + _ST_WindGlobal.x);
    tmpvar_86.y = (tmpvar_55.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_87;
    highp vec4 tmpvar_88;
    tmpvar_88 = abs(((
      fract((tmpvar_86 + 0.5))
     * 2.0) - 1.0));
    tmpvar_87 = (((
      (tmpvar_88 * tmpvar_88)
     * 
      (3.0 - (2.0 * tmpvar_88))
    ) - 0.5) * 2.0);
    fMoveAmount_82 = ((_ST_WindGlobal.y * (tmpvar_87.x + 
      (tmpvar_87.y * tmpvar_87.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_82 = (fMoveAmount_82 * fAdjust_83);
    vPos_81.xz = (finalPosition_7.xz + (rotatedWindVector_6.xz * fMoveAmount_82));
    vPos_81 = (normalize(vPos_81) * fLength_84);
    finalPosition_7 = vPos_81;
  };
  tmpvar_4.xyz = finalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp float t17;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t31;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
highp float t46;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = dot(t3.xyz, t3.xyz);
    t43 = sqrt(t43);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t15.x = dot(t4.xyz, t4.xyz);
            t15.x = inversesqrt(t15.x);
            t15.xyz = t15.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t15.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t15.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t16.x = dot(t3.xyz, t3.xyz);
            t16.x = inversesqrt(t16.x);
            t3.xyz = t16.xxx * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb44 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb44)) ? t5.xy : t5.zw;
            t44 = (-t0.y) * t0.z + t5.x;
            t44 = t5.y * t44 + t5.w;
            t45 = (-t44) + t5.x;
            t44 = t5.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t4.xyz = vec3(t44) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t15.xyz;
            t5.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t5.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t5.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t5.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = t16.xxx * t3.xyz;
            t15.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t4.x = t16.x + in_TEXCOORD0.w;
            t4.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t16.x * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t4.y) * t4.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t4.x;
            t16.x = t16.x * t44 + t45;
            t3.xyz = t16.xxx * t3.xyz;
            t15.xyz = t3.xyz * _ST_WindBranch.yyy + t15.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t15.xyz, t15.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t15.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb3 = t44!=0.0;
    t17 = log2(t44);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    t44 = (tb3) ? t17 : t44;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t31.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t31.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t17 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t17;
    t44 = t44 * t3.x;
    t3.xz = t2.xz * vec2(t44) + t15.xz;
    t3.y = t15.y;
    t2.x = dot(t3.xyz, t3.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t3.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t1.xyz = (tb1.x) ? t2.xyz : t15.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_3;
  highp vec3 rotatedWindVector_4;
  highp vec3 finalPosition_5;
  finalPosition_5 = tmpvar_1.xyz;
  mediump float tmpvar_6;
  tmpvar_6 = (_WindQuality * _WindEnabled);
  if ((tmpvar_6 > 0.0)) {
    highp mat3 tmpvar_7;
    tmpvar_7[0] = _World2Object[0].xyz;
    tmpvar_7[1] = _World2Object[1].xyz;
    tmpvar_7[2] = _World2Object[2].xyz;
    rotatedWindVector_4 = normalize((tmpvar_7 * _ST_WindVector.xyz));
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_3 = (normalize((tmpvar_8 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_5 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  if ((tmpvar_6 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_9;
    if ((tmpvar_6 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_9;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_9 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((rotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    finalPosition_5 = vPos_11;
  };
  if ((tmpvar_6 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = finalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (finalPosition_5, finalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((finalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (finalPosition_5.xz + (rotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    finalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = finalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    tb19 = unity_LightShadowBias.z!=0.0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t20 = dot(t3.xyz, t3.xyz);
    t20 = inversesqrt(t20);
    t3.xyz = vec3(t20) * t3.xyz;
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t4.xyz = vec3(t20) * t4.xyz;
    t20 = dot(t3.xyz, t4.xyz);
    t20 = (-t20) * t20 + 1.0;
    t20 = sqrt(t20);
    t20 = t20 * unity_LightShadowBias.z;
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    t0 = t2.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (bool(tb19)) ? t0 : t2;
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = t0.z + t1.x;
    t7.x = max((-t0.w), t1.x);
    t7.x = (-t1.x) + t7.x;
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    gl_Position.xyw = t0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_3;
  highp vec3 rotatedWindVector_4;
  highp vec3 finalPosition_5;
  finalPosition_5 = tmpvar_1.xyz;
  mediump float tmpvar_6;
  tmpvar_6 = (_WindQuality * _WindEnabled);
  if ((tmpvar_6 > 0.0)) {
    highp mat3 tmpvar_7;
    tmpvar_7[0] = _World2Object[0].xyz;
    tmpvar_7[1] = _World2Object[1].xyz;
    tmpvar_7[2] = _World2Object[2].xyz;
    rotatedWindVector_4 = normalize((tmpvar_7 * _ST_WindVector.xyz));
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_3 = (normalize((tmpvar_8 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_5 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  if ((tmpvar_6 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_9;
    if ((tmpvar_6 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_9;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_9 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((rotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    finalPosition_5 = vPos_11;
  };
  if ((tmpvar_6 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = finalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (finalPosition_5, finalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((finalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (finalPosition_5.xz + (rotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    finalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = finalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  finalPosition_9 = tmpvar_1.xyz;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_9 = tmpvar_13;
  if ((tmpvar_10 == 5.0)) {
    highp vec3 vPos_14;
    vPos_14 = tmpvar_13;
    highp float fOffset_15;
    fOffset_15 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_15 = 0.75;
    };
    highp vec4 tmpvar_16;
    tmpvar_16.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_16.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_15);
    highp vec4 tmpvar_17;
    tmpvar_17 = abs(((
      fract((tmpvar_16 + 0.5))
     * 2.0) - 1.0));
    vPos_14 = (tmpvar_13 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_17 * tmpvar_17)
       * 
        (3.0 - (2.0 * tmpvar_17))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    finalPosition_9 = vPos_14;
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = finalPosition_9;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = finalPosition_9;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (finalPosition_9 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_9 = vPos_19;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_9;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_9 = vPos_44;
  };
  tmpvar_5.xyz = finalPosition_9;
  highp vec3 vertex_52;
  vertex_52 = tmpvar_5.xyz;
  highp vec4 clipPos_53;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_52;
    highp vec3 tmpvar_55;
    tmpvar_55 = (_Object2World * tmpvar_54).xyz;
    highp vec4 v_56;
    v_56.x = _World2Object[0].x;
    v_56.y = _World2Object[1].x;
    v_56.z = _World2Object[2].x;
    v_56.w = _World2Object[3].x;
    highp vec4 v_57;
    v_57.x = _World2Object[0].y;
    v_57.y = _World2Object[1].y;
    v_57.z = _World2Object[2].y;
    v_57.w = _World2Object[3].y;
    highp vec4 v_58;
    v_58.x = _World2Object[0].z;
    v_58.y = _World2Object[1].z;
    v_58.z = _World2Object[2].z;
    v_58.w = _World2Object[3].z;
    highp vec3 tmpvar_59;
    tmpvar_59 = normalize(((
      (v_56.xyz * tmpvar_6.x)
     + 
      (v_57.xyz * tmpvar_6.y)
    ) + (v_58.xyz * tmpvar_6.z)));
    highp float tmpvar_60;
    tmpvar_60 = dot (tmpvar_59, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_55 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_61;
    tmpvar_61.w = 1.0;
    tmpvar_61.xyz = (tmpvar_55 - (tmpvar_59 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_60 * tmpvar_60)))
    )));
    clipPos_53 = (unity_MatrixVP * tmpvar_61);
  } else {
    highp vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vertex_52;
    clipPos_53 = (glstate_matrix_mvp * tmpvar_62);
  };
  highp vec4 clipPos_63;
  clipPos_63.xyw = clipPos_53.xyw;
  clipPos_63.z = (clipPos_53.z + clamp ((unity_LightShadowBias.x / clipPos_53.w), 0.0, 1.0));
  clipPos_63.z = mix (clipPos_63.z, max (clipPos_63.z, -(clipPos_53.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_63;
  xlv_TEXCOORD1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb19 = t16_0==5.0;
    tb20 = in_TEXCOORD0.x<0.5;
    t20 = tb20 ? 0.75 : float(0.0);
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t20 = t3.x * _ST_WindFrondRipple.z + t20;
    t20 = t20 + 0.5;
    t20 = fract(t20);
    t20 = t20 * 2.0 + -1.0;
    t3.x = abs(t20) * abs(t20);
    t20 = -abs(t20) * 2.0 + 3.0;
    t20 = t3.x * t20 + -0.5;
    t20 = t20 * in_TEXCOORD2.y;
    t20 = dot(_ST_WindFrondRipple.yy, vec2(t20));
    t3.xyz = vec3(t20) * in_NORMAL0.xyz + t2.xyz;
    t2.xyz = (bool(tb19)) ? t3.xyz : t2.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    tb19 = unity_LightShadowBias.z!=0.0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t20 = dot(t3.xyz, t3.xyz);
    t20 = inversesqrt(t20);
    t3.xyz = vec3(t20) * t3.xyz;
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t4.xyz = vec3(t20) * t4.xyz;
    t20 = dot(t3.xyz, t4.xyz);
    t20 = (-t20) * t20 + 1.0;
    t20 = sqrt(t20);
    t20 = t20 * unity_LightShadowBias.z;
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    t0 = t2.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (bool(tb19)) ? t0 : t2;
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = t0.z + t1.x;
    t7.x = max((-t0.w), t1.x);
    t7.x = (-t1.x) + t7.x;
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    gl_Position.xyw = t0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_3;
  tmpvar_3 = tmpvar_2.xy;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_5;
  highp vec3 rotatedWindVector_6;
  highp vec3 finalPosition_7;
  finalPosition_7 = tmpvar_1.xyz;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    rotatedWindVector_6 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_5 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_11;
  tmpvar_11 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_7 = tmpvar_11;
  if ((tmpvar_8 == 5.0)) {
    highp vec3 vPos_12;
    vPos_12 = tmpvar_11;
    highp float fOffset_13;
    fOffset_13 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_13 = 0.75;
    };
    highp vec4 tmpvar_14;
    tmpvar_14.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_14.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_13);
    highp vec4 tmpvar_15;
    tmpvar_15 = abs(((
      fract((tmpvar_14 + 0.5))
     * 2.0) - 1.0));
    vPos_12 = (tmpvar_11 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_15 * tmpvar_15)
       * 
        (3.0 - (2.0 * tmpvar_15))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    finalPosition_7 = vPos_12;
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = finalPosition_7;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = finalPosition_7;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (finalPosition_7 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_7 = vPos_17;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_7;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_7, finalPosition_7));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_7.xz + (rotatedWindVector_6.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_7 = vPos_42;
  };
  tmpvar_4.xyz = finalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb19 = t16_0==5.0;
    tb20 = in_TEXCOORD0.x<0.5;
    t20 = tb20 ? 0.75 : float(0.0);
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t20 = t3.x * _ST_WindFrondRipple.z + t20;
    t20 = t20 + 0.5;
    t20 = fract(t20);
    t20 = t20 * 2.0 + -1.0;
    t3.x = abs(t20) * abs(t20);
    t20 = -abs(t20) * 2.0 + 3.0;
    t20 = t3.x * t20 + -0.5;
    t20 = t20 * in_TEXCOORD2.y;
    t20 = dot(_ST_WindFrondRipple.yy, vec2(t20));
    t3.xyz = vec3(t20) * in_NORMAL0.xyz + t2.xyz;
    t2.xyz = (bool(tb19)) ? t3.xyz : t2.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_6;
  tmpvar_6 = tmpvar_3.xy;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  finalPosition_11 = tmpvar_1.xyz;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_11 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_11 = (finalPosition_11 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_15;
    tmpvar_15 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_16[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_16[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_11 = (finalPosition_11 * tmpvar_16);
    finalPosition_11 = (normalize(finalPosition_11) * tmpvar_15);
  } else {
    highp vec3 tmpvar_17;
    tmpvar_17.x = tmpvar_4.w;
    tmpvar_17.y = tmpvar_5.x;
    tmpvar_17.z = tmpvar_5.y;
    finalPosition_11 = mix (finalPosition_11, tmpvar_17, unity_LODFade.xxx);
  };
  if (((tmpvar_12 > 1.0) && (tmpvar_12 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_12 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = finalPosition_11;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (finalPosition_11 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * rotatedWindVector_10.zxy) - (tmpvar_28.zxy * rotatedWindVector_10.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (rotatedWindVector_10, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_8 = vDirection_22;
    finalPosition_11 = vPos_21;
  };
  finalPosition_11 = (finalPosition_11 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_62;
  tmpvar_62.x = _Object2World[3].x;
  tmpvar_62.y = _Object2World[3].y;
  tmpvar_62.z = _Object2World[3].z;
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = finalPosition_11;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = finalPosition_11;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_62.x + tmpvar_62.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (finalPosition_11 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((rotatedBranchAnchor_9 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_62.x + tmpvar_62.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    finalPosition_11 = vPos_63;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = finalPosition_11;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_92;
    tmpvar_92 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_62.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_62.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    finalPosition_11 = vPos_88;
  };
  tmpvar_7.xyz = finalPosition_11;
  highp vec3 vertex_96;
  vertex_96 = tmpvar_7.xyz;
  highp vec4 clipPos_97;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_98;
    tmpvar_98.w = 1.0;
    tmpvar_98.xyz = vertex_96;
    highp vec3 tmpvar_99;
    tmpvar_99 = (_Object2World * tmpvar_98).xyz;
    highp vec4 v_100;
    v_100.x = _World2Object[0].x;
    v_100.y = _World2Object[1].x;
    v_100.z = _World2Object[2].x;
    v_100.w = _World2Object[3].x;
    highp vec4 v_101;
    v_101.x = _World2Object[0].y;
    v_101.y = _World2Object[1].y;
    v_101.z = _World2Object[2].y;
    v_101.w = _World2Object[3].y;
    highp vec4 v_102;
    v_102.x = _World2Object[0].z;
    v_102.y = _World2Object[1].z;
    v_102.z = _World2Object[2].z;
    v_102.w = _World2Object[3].z;
    highp vec3 tmpvar_103;
    tmpvar_103 = normalize(((
      (v_100.xyz * tmpvar_8.x)
     + 
      (v_101.xyz * tmpvar_8.y)
    ) + (v_102.xyz * tmpvar_8.z)));
    highp float tmpvar_104;
    tmpvar_104 = dot (tmpvar_103, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_99 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_105;
    tmpvar_105.w = 1.0;
    tmpvar_105.xyz = (tmpvar_99 - (tmpvar_103 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_104 * tmpvar_104)))
    )));
    clipPos_97 = (unity_MatrixVP * tmpvar_105);
  } else {
    highp vec4 tmpvar_106;
    tmpvar_106.w = 1.0;
    tmpvar_106.xyz = vertex_96;
    clipPos_97 = (glstate_matrix_mvp * tmpvar_106);
  };
  highp vec4 clipPos_107;
  clipPos_107.xyw = clipPos_97.xyw;
  clipPos_107.z = (clipPos_97.z + clamp ((unity_LightShadowBias.x / clipPos_97.w), 0.0, 1.0));
  clipPos_107.z = mix (clipPos_107.z, max (clipPos_107.z, -(clipPos_97.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_107;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp float t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = in_TEXCOORD1.w + -1.0;
    t43 = unity_LODFade.x * t43 + 1.0;
    t4.xyz = vec3(t43) * t3.xyz;
    t43 = dot(t4.xyz, t4.xyz);
    t43 = sqrt(t43);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t5.xyz, t5.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t5.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t5.x = in_TEXCOORD1.w;
    t5.yz = in_TEXCOORD3.xy;
    t5.xyz = (-t3.xyz) + t5.xyz;
    t3.xyz = unity_LODFade.xxx * t5.xyz + t3.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t4.xyz;
        } else {
            t15.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t15.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb44 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            t44 = (-t0.y) * t0.z + t6.x;
            t44 = t6.y * t44 + t6.w;
            t45 = (-t44) + t6.x;
            t44 = t6.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t5.xyz = vec3(t44) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t6.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t6.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t5.x = t16.x + in_TEXCOORD0.w;
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t16.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t5.y) * t5.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t5.x;
            t16.x = t16.x * t44 + t45;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t3.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb45 = t44!=0.0;
    t4.x = log2(t44);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t44 = (tb45) ? t4.x : t44;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t32.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t32.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t45 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    t44 = t44 * t45;
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    tb1.x = unity_LightShadowBias.z!=0.0;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t15.yyy * t5.xyz;
    t4.xyz = t4.xyz * t15.xxx + t5.xyz;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t15.xyz = t5.xyz * t15.zzz + t4.xyz;
    t44 = dot(t15.xyz, t15.xyz);
    t44 = inversesqrt(t44);
    t15.xyz = t15.xyz * vec3(t44);
    t4.xyz = (-t3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t44 = dot(t15.xyz, t4.xyz);
    t44 = (-t44) * t44 + 1.0;
    t44 = sqrt(t44);
    t44 = t44 * unity_LightShadowBias.z;
    t15.xyz = (-t15.xyz) * vec3(t44) + t3.xyz;
    t0 = t15.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t15.xxxx + t0;
    t0 = unity_MatrixVP[2] * t15.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (tb1.x) ? t0 : t2;
    t1 = unity_LightShadowBias.x / t0.w;
    t1 = clamp(t1, 0.0, 1.0);
    t1 = t0.z + t1;
    t15.x = max((-t0.w), t1);
    t15.x = (-t1) + t15.x;
    gl_Position.z = unity_LightShadowBias.y * t15.x + t1;
    gl_Position.xyw = t0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_5;
  tmpvar_5 = tmpvar_2.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  finalPosition_9 = tmpvar_1.xyz;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_9 = (finalPosition_9 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_13;
    tmpvar_13 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_14[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_14[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_9 = (finalPosition_9 * tmpvar_14);
    finalPosition_9 = (normalize(finalPosition_9) * tmpvar_13);
  } else {
    highp vec3 tmpvar_15;
    tmpvar_15.x = tmpvar_3.w;
    tmpvar_15.y = tmpvar_4.x;
    tmpvar_15.z = tmpvar_4.y;
    finalPosition_9 = mix (finalPosition_9, tmpvar_15, unity_LODFade.xxx);
  };
  if (((tmpvar_10 > 1.0) && (tmpvar_10 < 5.0))) {
    highp float tmpvar_16;
    tmpvar_16 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_17;
    isBestWind_17 = (tmpvar_10 == 4.0);
    bool bLeaf2_18;
    bLeaf2_18 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_19;
    vPos_19 = finalPosition_9;
    highp float tmpvar_20;
    if (bLeaf2_18) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_18) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_16);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (finalPosition_9 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_19 = vPos_22;
    if (isBestWind_17) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_18) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_18) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_18) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_18) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_18) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_18) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp float fOsc_34;
      highp vec3 vOriginPos_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_26 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_26 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_26 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_26 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      vOriginPos_35 = vPos_22;
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_25.yzx * rotatedWindVector_8.zxy) - (tmpvar_25.zxy * rotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (rotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_33);
      vAxis_33 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      fOsc_34 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_50;
        fTime_50 = (tmpvar_30.z + tmpvar_37);
        highp vec4 tmpvar_51;
        tmpvar_51.zw = vec2(0.0, 0.0);
        tmpvar_51.x = fTime_50;
        tmpvar_51.y = (0.87 * fTime_50);
        highp vec4 tmpvar_52;
        highp vec4 tmpvar_53;
        tmpvar_53 = abs(((
          fract((tmpvar_51 + 0.5))
         * 2.0) - 1.0));
        tmpvar_52 = (((
          (tmpvar_53 * tmpvar_53)
         * 
          (3.0 - (2.0 * tmpvar_53))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_52.x * tmpvar_52.y) * tmpvar_52.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_54;
      fAngle_54 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_29)
       + 
        (fOsc_34 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_55;
      vSinCos_55.x = sin(fAngle_54);
      vSinCos_55.y = cos(fAngle_54);
      highp float tmpvar_56;
      tmpvar_56 = (1.0 - vSinCos_55.y);
      highp mat3 tmpvar_57;
      tmpvar_57[0].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_55.y);
      tmpvar_57[0].y = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[0].z = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[1].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[1].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_55.y);
      tmpvar_57[1].z = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[2].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].z = (((tmpvar_56 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_55.y);
      vOriginPos_35 = (normalize((
        (tmpvar_45 * tmpvar_57)
       * vPos_22)) * tmpvar_41);
      vPos_19 = vOriginPos_35;
    };
    finalPosition_9 = vPos_19;
  };
  finalPosition_9 = (finalPosition_9 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_58;
  tmpvar_58.x = _Object2World[3].x;
  tmpvar_58.y = _Object2World[3].y;
  tmpvar_58.z = _Object2World[3].z;
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_59;
    vPos_59 = finalPosition_9;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_60;
      vPos_60 = finalPosition_9;
      highp float fTime_61;
      highp float fAdherenceScale_62;
      highp vec3 vWindVector_63;
      vWindVector_63 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_61 = (_ST_WindBranch.x + (tmpvar_58.x + tmpvar_58.y));
      highp vec4 vOscillations_64;
      highp float fOscillation_65;
      fOscillation_65 = 1.0;
      highp float fAmount_66;
      highp float fTarget_67;
      highp vec4 tmpvar_68;
      tmpvar_68.x = (fTime_61 + _glesMultiTexCoord0.w);
      tmpvar_68.y = ((fTime_61 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_68.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_61 + _glesMultiTexCoord0.w));
      tmpvar_68.w = ((fTime_61 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_69;
      tmpvar_69 = abs(((
        fract((tmpvar_68 + 0.5))
       * 2.0) - 1.0));
      vOscillations_64 = (((
        (tmpvar_69 * tmpvar_69)
       * 
        (3.0 - (2.0 * tmpvar_69))
      ) - 0.5) * 2.0);
      highp float tmpvar_70;
      tmpvar_70 = (vOscillations_64.y * vOscillations_64.z);
      fTarget_67 = 1.0;
      fAmount_66 = tmpvar_70;
      if ((tmpvar_70 < 0.0)) {
        fTarget_67 = -1.0;
        fAmount_66 = -(tmpvar_70);
      };
      fOscillation_65 = (((
        mix (mix (tmpvar_70, fTarget_67, fAmount_66), fTarget_67, fAmount_66)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_64.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_65 = (fOscillation_65 * (1.0 + (vOscillations_64.w * _ST_WindBranchWhip.x)));
      vPos_60 = (finalPosition_9 + ((vWindVector_63 * fOscillation_65) * _ST_WindBranch.y));
      highp vec4 tmpvar_71;
      tmpvar_71.zw = vec2(0.0, 0.0);
      tmpvar_71.x = ((fTime_61 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_71.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_72;
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      tmpvar_72 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      fAdherenceScale_62 = (1.0 - ((tmpvar_72.x * tmpvar_72.y) * (
        (tmpvar_72.x * tmpvar_72.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_62 = (fAdherenceScale_62 + ((vOscillations_64.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_60 = (vPos_60 + ((
        ((rotatedBranchAnchor_7 - vPos_60) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_62) * _glesMultiTexCoord0.z));
      vPos_59 = vPos_60;
    } else {
      highp vec3 vPos_74;
      vPos_74 = vPos_59;
      highp float fTime_75;
      highp vec3 vWindVector_76;
      vWindVector_76 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_75 = (_ST_WindBranch.x + (tmpvar_58.x + tmpvar_58.y));
      highp vec4 vOscillations_77;
      highp float fOscillation_78;
      fOscillation_78 = 1.0;
      highp float fAmount_79;
      highp float fTarget_80;
      highp vec4 tmpvar_81;
      tmpvar_81.w = 0.0;
      tmpvar_81.x = (fTime_75 + _glesMultiTexCoord0.w);
      tmpvar_81.y = ((fTime_75 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_81.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_75 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      vOscillations_77 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      highp float tmpvar_83;
      tmpvar_83 = (vOscillations_77.y * vOscillations_77.z);
      fTarget_80 = 1.0;
      fAmount_79 = tmpvar_83;
      if ((tmpvar_83 < 0.0)) {
        fTarget_80 = -1.0;
        fAmount_79 = -(tmpvar_83);
      };
      fOscillation_78 = (((
        mix (mix (tmpvar_83, fTarget_80, fAmount_79), fTarget_80, fAmount_79)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_77.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_74 = (vPos_59 + ((vWindVector_76 * fOscillation_78) * _ST_WindBranch.y));
      vPos_59 = vPos_74;
    };
    finalPosition_9 = vPos_59;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_84;
    vPos_84 = finalPosition_9;
    highp float fMoveAmount_85;
    highp float fAdjust_86;
    highp float fLength_87;
    fLength_87 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_88;
    tmpvar_88 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_86 = tmpvar_88;
    if ((tmpvar_88 != 0.0)) {
      fAdjust_86 = pow (tmpvar_88, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_89;
    tmpvar_89.zw = vec2(0.0, 0.0);
    tmpvar_89.x = (tmpvar_58.x + _ST_WindGlobal.x);
    tmpvar_89.y = (tmpvar_58.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_90;
    highp vec4 tmpvar_91;
    tmpvar_91 = abs(((
      fract((tmpvar_89 + 0.5))
     * 2.0) - 1.0));
    tmpvar_90 = (((
      (tmpvar_91 * tmpvar_91)
     * 
      (3.0 - (2.0 * tmpvar_91))
    ) - 0.5) * 2.0);
    fMoveAmount_85 = ((_ST_WindGlobal.y * (tmpvar_90.x + 
      (tmpvar_90.y * tmpvar_90.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_85 = (fMoveAmount_85 * fAdjust_86);
    vPos_84.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_85));
    vPos_84 = (normalize(vPos_84) * fLength_87);
    finalPosition_9 = vPos_84;
  };
  tmpvar_6.xyz = finalPosition_9;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_6).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp float t17;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t31;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
highp float t46;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = in_TEXCOORD1.w + -1.0;
    t43 = unity_LODFade.x * t43 + 1.0;
    t4.xyz = vec3(t43) * t3.xyz;
    t43 = dot(t4.xyz, t4.xyz);
    t43 = sqrt(t43);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t5.xyz, t5.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t5.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t5.x = in_TEXCOORD1.w;
    t5.yz = in_TEXCOORD3.xy;
    t5.xyz = (-t3.xyz) + t5.xyz;
    t3.xyz = unity_LODFade.xxx * t5.xyz + t3.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t15.x = dot(t4.xyz, t4.xyz);
            t15.x = inversesqrt(t15.x);
            t15.xyz = t15.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t15.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t15.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t16.x = dot(t3.xyz, t3.xyz);
            t16.x = inversesqrt(t16.x);
            t3.xyz = t16.xxx * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb44 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb44)) ? t5.xy : t5.zw;
            t44 = (-t0.y) * t0.z + t5.x;
            t44 = t5.y * t44 + t5.w;
            t45 = (-t44) + t5.x;
            t44 = t5.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t4.xyz = vec3(t44) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t15.xyz;
            t5.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t5.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t5.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t5.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = t16.xxx * t3.xyz;
            t15.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t4.x = t16.x + in_TEXCOORD0.w;
            t4.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t16.x * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t4.y) * t4.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t4.x;
            t16.x = t16.x * t44 + t45;
            t3.xyz = t16.xxx * t3.xyz;
            t15.xyz = t3.xyz * _ST_WindBranch.yyy + t15.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t15.xyz, t15.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t15.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb3 = t44!=0.0;
    t17 = log2(t44);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    t44 = (tb3) ? t17 : t44;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t31.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t31.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t17 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t17;
    t44 = t44 * t3.x;
    t3.xz = t2.xz * vec2(t44) + t15.xz;
    t3.y = t15.y;
    t2.x = dot(t3.xyz, t3.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t3.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t1.xyz = (tb1.x) ? t2.xyz : t15.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_3;
  highp vec3 rotatedWindVector_4;
  highp vec3 finalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  finalPosition_5 = tmpvar_6;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    rotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((rotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    finalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = finalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (finalPosition_5, finalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((finalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (finalPosition_5.xz + (rotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    finalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = finalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (clipPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = clipPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_55;
  xlv_TEXCOORD2 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    tb19 = unity_LightShadowBias.z!=0.0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t20 = dot(t3.xyz, t3.xyz);
    t20 = inversesqrt(t20);
    t3.xyz = vec3(t20) * t3.xyz;
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t4.xyz = vec3(t20) * t4.xyz;
    t20 = dot(t3.xyz, t4.xyz);
    t20 = (-t20) * t20 + 1.0;
    t20 = sqrt(t20);
    t20 = t20 * unity_LightShadowBias.z;
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    t0 = t2.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (bool(tb19)) ? t0 : t2;
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = t0.z + t1.x;
    t7.x = max((-t0.w), t1.x);
    t7.x = (-t1.x) + t7.x;
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t7.x = t0.y * _ProjectionParams.x;
    t1.w = t7.x * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t1.xy = t1.xy * vec2(0.25, 0.25);
    gl_Position.xyw = t0.xyw;
    t1.z = t0.w;
    vs_TEXCOORD2.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    t16_2 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_2 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_4;
  highp vec3 rotatedWindVector_5;
  highp vec3 finalPosition_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_1.xyz;
  finalPosition_6 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    rotatedWindVector_5 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_4 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_5 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_4 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_12;
    vPos_12 = tmpvar_7;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_13;
      vPos_13 = tmpvar_7;
      highp float fTime_14;
      highp float fAdherenceScale_15;
      highp vec3 vWindVector_16;
      vWindVector_16 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_14 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_17;
      highp float fOscillation_18;
      fOscillation_18 = 1.0;
      highp float fAmount_19;
      highp float fTarget_20;
      highp vec4 tmpvar_21;
      tmpvar_21.x = (fTime_14 + _glesMultiTexCoord0.w);
      tmpvar_21.y = ((fTime_14 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_21.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_14 + _glesMultiTexCoord0.w));
      tmpvar_21.w = ((fTime_14 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_22;
      tmpvar_22 = abs(((
        fract((tmpvar_21 + 0.5))
       * 2.0) - 1.0));
      vOscillations_17 = (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0);
      highp float tmpvar_23;
      tmpvar_23 = (vOscillations_17.y * vOscillations_17.z);
      fTarget_20 = 1.0;
      fAmount_19 = tmpvar_23;
      if ((tmpvar_23 < 0.0)) {
        fTarget_20 = -1.0;
        fAmount_19 = -(tmpvar_23);
      };
      fOscillation_18 = (((
        mix (mix (tmpvar_23, fTarget_20, fAmount_19), fTarget_20, fAmount_19)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_17.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_18 = (fOscillation_18 * (1.0 + (vOscillations_17.w * _ST_WindBranchWhip.x)));
      vPos_13 = (_glesVertex.xyz + ((vWindVector_16 * fOscillation_18) * _ST_WindBranch.y));
      highp vec4 tmpvar_24;
      tmpvar_24.zw = vec2(0.0, 0.0);
      tmpvar_24.x = ((fTime_14 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_24.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_25;
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      tmpvar_25 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      fAdherenceScale_15 = (1.0 - ((tmpvar_25.x * tmpvar_25.y) * (
        (tmpvar_25.x * tmpvar_25.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_15 = (fAdherenceScale_15 + ((vOscillations_17.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_13 = (vPos_13 + ((
        ((rotatedBranchAnchor_4 - vPos_13) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_15) * _glesMultiTexCoord0.z));
      vPos_12 = vPos_13;
    } else {
      highp vec3 vPos_27;
      vPos_27 = vPos_12;
      highp float fTime_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_27 = (vPos_12 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      vPos_12 = vPos_27;
    };
    finalPosition_6 = vPos_12;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_37;
    vPos_37 = finalPosition_6;
    highp float fMoveAmount_38;
    highp float fAdjust_39;
    highp float fLength_40;
    fLength_40 = sqrt(dot (finalPosition_6, finalPosition_6));
    highp float tmpvar_41;
    tmpvar_41 = (max ((finalPosition_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_39 = tmpvar_41;
    if ((tmpvar_41 != 0.0)) {
      fAdjust_39 = pow (tmpvar_41, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_42.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_43;
    highp vec4 tmpvar_44;
    tmpvar_44 = abs(((
      fract((tmpvar_42 + 0.5))
     * 2.0) - 1.0));
    tmpvar_43 = (((
      (tmpvar_44 * tmpvar_44)
     * 
      (3.0 - (2.0 * tmpvar_44))
    ) - 0.5) * 2.0);
    fMoveAmount_38 = ((_ST_WindGlobal.y * (tmpvar_43.x + 
      (tmpvar_43.y * tmpvar_43.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_38 = (fMoveAmount_38 * fAdjust_39);
    vPos_37.xz = (finalPosition_6.xz + (rotatedWindVector_5.xz * fMoveAmount_38));
    vPos_37 = (normalize(vPos_37) * fLength_40);
    finalPosition_6 = vPos_37;
  };
  tmpvar_3.xyz = finalPosition_6;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_45;
  highp vec4 o_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48.x = tmpvar_47.x;
  tmpvar_48.y = (tmpvar_47.y * _ProjectionParams.x);
  o_46.xy = (tmpvar_48 + tmpvar_47.w);
  o_46.zw = tmpvar_2.zw;
  highp vec3 tmpvar_49;
  tmpvar_49 = o_46.xyw;
  screenPos_45 = tmpvar_49;
  screenPos_45.xy = (screenPos_45.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_3).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD2 = screenPos_45;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_4;
  tmpvar_4 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 - (tmpvar_4.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0>=3.0;
    if(tb19){
        tb19 = t16_0==5.0;
        if(tb19){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t19 = dot(t2.xyz, t2.xyz);
            t19 = inversesqrt(t19);
            t2.xyz = vec3(t19) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb20 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            t20 = (-t0.y) * t0.z + t4.x;
            t20 = t4.y * t20 + t4.w;
            t21 = (-t20) + t4.x;
            t20 = t4.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t20 = t20 * t21 + t4.x;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t3.xyz = vec3(t20) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t16.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t16.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t19 = t4.x * t4.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t19) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t7.x = t0.y * _ProjectionParams.x;
    t1.w = t7.x * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t1.xy = t1.xy * vec2(0.25, 0.25);
    gl_Position = t0;
    t1.z = t0.w;
    vs_TEXCOORD2.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    t16_2 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_2 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t1.x = sqrt(t1.x);
    t1.x = t1.x * _LightPositionRange.w;
    t1.x = min(t1.x, 0.999000013);
    t0 = t1.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  finalPosition_9 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_11 == 5.0)) {
    highp vec3 vPos_14;
    vPos_14 = tmpvar_10;
    highp float fOffset_15;
    fOffset_15 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_15 = 0.75;
    };
    highp vec4 tmpvar_16;
    tmpvar_16.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_16.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_15);
    highp vec4 tmpvar_17;
    tmpvar_17 = abs(((
      fract((tmpvar_16 + 0.5))
     * 2.0) - 1.0));
    vPos_14 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_17 * tmpvar_17)
       * 
        (3.0 - (2.0 * tmpvar_17))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    finalPosition_9 = vPos_14;
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = finalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = finalPosition_9;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (finalPosition_9 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_9 = vPos_19;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_9;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_9 = vPos_44;
  };
  tmpvar_5.xyz = finalPosition_9;
  highp vec3 vertex_52;
  vertex_52 = tmpvar_5.xyz;
  highp vec4 clipPos_53;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_52;
    highp vec3 tmpvar_55;
    tmpvar_55 = (_Object2World * tmpvar_54).xyz;
    highp vec4 v_56;
    v_56.x = _World2Object[0].x;
    v_56.y = _World2Object[1].x;
    v_56.z = _World2Object[2].x;
    v_56.w = _World2Object[3].x;
    highp vec4 v_57;
    v_57.x = _World2Object[0].y;
    v_57.y = _World2Object[1].y;
    v_57.z = _World2Object[2].y;
    v_57.w = _World2Object[3].y;
    highp vec4 v_58;
    v_58.x = _World2Object[0].z;
    v_58.y = _World2Object[1].z;
    v_58.z = _World2Object[2].z;
    v_58.w = _World2Object[3].z;
    highp vec3 tmpvar_59;
    tmpvar_59 = normalize(((
      (v_56.xyz * tmpvar_6.x)
     + 
      (v_57.xyz * tmpvar_6.y)
    ) + (v_58.xyz * tmpvar_6.z)));
    highp float tmpvar_60;
    tmpvar_60 = dot (tmpvar_59, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_55 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_61;
    tmpvar_61.w = 1.0;
    tmpvar_61.xyz = (tmpvar_55 - (tmpvar_59 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_60 * tmpvar_60)))
    )));
    clipPos_53 = (unity_MatrixVP * tmpvar_61);
  } else {
    highp vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vertex_52;
    clipPos_53 = (glstate_matrix_mvp * tmpvar_62);
  };
  highp vec4 clipPos_63;
  clipPos_63.xyw = clipPos_53.xyw;
  clipPos_63.z = (clipPos_53.z + clamp ((unity_LightShadowBias.x / clipPos_53.w), 0.0, 1.0));
  clipPos_63.z = mix (clipPos_63.z, max (clipPos_63.z, -(clipPos_53.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_64;
  highp vec4 o_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (clipPos_63 * 0.5);
  highp vec2 tmpvar_67;
  tmpvar_67.x = tmpvar_66.x;
  tmpvar_67.y = (tmpvar_66.y * _ProjectionParams.x);
  o_65.xy = (tmpvar_67 + tmpvar_66.w);
  o_65.zw = clipPos_63.zw;
  highp vec3 tmpvar_68;
  tmpvar_68 = o_65.xyw;
  screenPos_64 = tmpvar_68;
  screenPos_64.xy = (screenPos_64.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_63;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_64;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    tb19 = unity_LightShadowBias.z!=0.0;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t20 = dot(t3.xyz, t3.xyz);
    t20 = inversesqrt(t20);
    t3.xyz = vec3(t20) * t3.xyz;
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t20 = dot(t4.xyz, t4.xyz);
    t20 = inversesqrt(t20);
    t4.xyz = vec3(t20) * t4.xyz;
    t20 = dot(t3.xyz, t4.xyz);
    t20 = (-t20) * t20 + 1.0;
    t20 = sqrt(t20);
    t20 = t20 * unity_LightShadowBias.z;
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    t0 = t2.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (bool(tb19)) ? t0 : t2;
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = t0.z + t1.x;
    t7.x = max((-t0.w), t1.x);
    t7.x = (-t1.x) + t7.x;
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t7.x = t0.y * _ProjectionParams.x;
    t1.w = t7.x * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t1.xy = t1.xy * vec2(0.25, 0.25);
    gl_Position.xyw = t0.xyw;
    t1.z = t0.w;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec2 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    t16_3 = fract(t16_1.y);
    t0.x = t16_1.x;
    t0.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    t16_0 = t10_0 + -0.5;
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_2.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_6;
  highp vec3 rotatedWindVector_7;
  highp vec3 finalPosition_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_1.xyz;
  finalPosition_8 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedWindVector_7 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_6 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_7 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_6 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_10 == 5.0)) {
    highp vec3 vPos_13;
    vPos_13 = tmpvar_9;
    highp float fOffset_14;
    fOffset_14 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_14 = 0.75;
    };
    highp vec4 tmpvar_15;
    tmpvar_15.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_15.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_14);
    highp vec4 tmpvar_16;
    tmpvar_16 = abs(((
      fract((tmpvar_15 + 0.5))
     * 2.0) - 1.0));
    vPos_13 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_16 * tmpvar_16)
       * 
        (3.0 - (2.0 * tmpvar_16))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    finalPosition_8 = vPos_13;
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = finalPosition_8;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = finalPosition_8;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (finalPosition_8 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_6 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_8 = vPos_18;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_8;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_8, finalPosition_8));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_8.xz + (rotatedWindVector_7.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_8 = vPos_43;
  };
  tmpvar_5.xyz = finalPosition_8;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_3.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_5).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - (tmpvar_5.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0;
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    t13 = dot(t7.xyz, t7.xyz);
    t13 = inversesqrt(t13);
    t7.xy = vec2(t13) * t7.xz;
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, vec2(bvec2(tb1)));
    tb19 = t16_0==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t8 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t8 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    tb20 = t16_0>=3.0;
    if(tb20){
        if(tb19){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t19 = dot(t3.xyz, t3.xyz);
            t19 = inversesqrt(t19);
            t3.xyz = vec3(t19) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t0.x = t19 + in_TEXCOORD0.w;
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t20 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t20 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb20 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            t20 = (-t0.y) * t0.z + t5.x;
            t20 = t5.y * t20 + t5.w;
            t21 = (-t20) + t5.x;
            t20 = t5.y * t21 + t20;
            t20 = t20 * _ST_WindBranchTwitch.x;
            t21 = (-_ST_WindVector.w) + 1.0;
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            t22 = t0.x * t22;
            t20 = t20 * t21 + t22;
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t20 = t20 * t21;
            t4.xyz = vec3(t20) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t19 * 0.100000001 + in_TEXCOORD0.w;
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t19 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t17.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t17.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t19 = t5.x * t5.y;
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            t20 = t0.w * _ST_WindVector.w;
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t19 = _Object2World[3].y + _Object2World[3].x;
            t19 = t19 + _ST_WindBranch.x;
            t4.x = t19 + in_TEXCOORD0.w;
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t19 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t19 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb19 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            t19 = (-t4.y) * t4.z + t5.x;
            t19 = t5.y * t19 + t0.w;
            t20 = (-t19) + t5.x;
            t19 = t5.y * t20 + t19;
            t19 = t19 * _ST_WindBranchTwitch.x;
            t20 = (-_ST_WindVector.w) + 1.0;
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            t21 = t21 * t4.x;
            t19 = t19 * t20 + t21;
            t3.xyz = vec3(t19) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t19 = dot(t2.xyz, t2.xyz);
    t19 = sqrt(t19);
    t20 = float(1.0) / _ST_WindGlobal.z;
    t20 = (-t20) * 0.25 + t2.y;
    t20 = max(t20, 0.0);
    t20 = t20 * _ST_WindGlobal.z;
    tb3 = t20!=0.0;
    t9 = log2(t20);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    t20 = (tb3) ? t9 : t20;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t15.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    t20 = t20 * t3.x;
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    t3.y = t2.y;
    t7.x = dot(t3.xyz, t3.xyz);
    t7.x = inversesqrt(t7.x);
    t3.xyz = t7.xxx * t3.xyz;
    t7.xyz = vec3(t19) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t7.x = t0.y * _ProjectionParams.x;
    t1.w = t7.x * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t1.xy = t1.xy * vec2(0.25, 0.25);
    gl_Position = t0;
    t1.z = t0.w;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    t16_3 = fract(t16_1.y);
    t0.x = t16_1.x;
    t0.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    t16_0 = t10_0 + -0.5;
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  finalPosition_9 = tmpvar_1.xyz;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_13;
    tmpvar_13 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_14[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_14[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_9 = (finalPosition_9 * tmpvar_14);
    finalPosition_9 = (normalize(finalPosition_9) * tmpvar_13);
  };
  if (((tmpvar_10 > 1.0) && (tmpvar_10 < 5.0))) {
    highp float tmpvar_15;
    tmpvar_15 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_16;
    isBestWind_16 = (tmpvar_10 == 4.0);
    bool bLeaf2_17;
    bLeaf2_17 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_18;
    vPos_18 = finalPosition_9;
    highp vec3 vDirection_19;
    vDirection_19 = tmpvar_2;
    highp float tmpvar_20;
    if (bLeaf2_17) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_17) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_15);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (finalPosition_9 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_19 = tmpvar_2;
    vPos_18 = vPos_22;
    if (isBestWind_16) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_17) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_17) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_17) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_17) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_17) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_17) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp float fOsc_34;
      highp vec3 vOriginPos_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_26 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_26 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_26 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_26 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      vOriginPos_35 = vPos_22;
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_25.yzx * rotatedWindVector_8.zxy) - (tmpvar_25.zxy * rotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (rotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_33);
      vAxis_33 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      fOsc_34 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_50;
        fTime_50 = (tmpvar_30.z + tmpvar_37);
        highp vec4 tmpvar_51;
        tmpvar_51.zw = vec2(0.0, 0.0);
        tmpvar_51.x = fTime_50;
        tmpvar_51.y = (0.87 * fTime_50);
        highp vec4 tmpvar_52;
        highp vec4 tmpvar_53;
        tmpvar_53 = abs(((
          fract((tmpvar_51 + 0.5))
         * 2.0) - 1.0));
        tmpvar_52 = (((
          (tmpvar_53 * tmpvar_53)
         * 
          (3.0 - (2.0 * tmpvar_53))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_52.x * tmpvar_52.y) * tmpvar_52.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_54;
      fAngle_54 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_29)
       + 
        (fOsc_34 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_55;
      vSinCos_55.x = sin(fAngle_54);
      vSinCos_55.y = cos(fAngle_54);
      highp float tmpvar_56;
      tmpvar_56 = (1.0 - vSinCos_55.y);
      highp mat3 tmpvar_57;
      tmpvar_57[0].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_55.y);
      tmpvar_57[0].y = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[0].z = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[1].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[1].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_55.y);
      tmpvar_57[1].z = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[2].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].z = (((tmpvar_56 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_55.y);
      highp mat3 tmpvar_58;
      tmpvar_58 = (tmpvar_45 * tmpvar_57);
      vOriginPos_35 = (normalize((tmpvar_58 * vPos_22)) * tmpvar_41);
      vDirection_19 = (tmpvar_58 * _glesNormal);
      vPos_18 = vOriginPos_35;
    };
    tmpvar_6 = vDirection_19;
    finalPosition_9 = vPos_18;
  };
  finalPosition_9 = (finalPosition_9 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_59;
  tmpvar_59.x = _Object2World[3].x;
  tmpvar_59.y = _Object2World[3].y;
  tmpvar_59.z = _Object2World[3].z;
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_60;
    vPos_60 = finalPosition_9;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_61;
      vPos_61 = finalPosition_9;
      highp float fTime_62;
      highp float fAdherenceScale_63;
      highp vec3 vWindVector_64;
      vWindVector_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_62 = (_ST_WindBranch.x + (tmpvar_59.x + tmpvar_59.y));
      highp vec4 vOscillations_65;
      highp float fOscillation_66;
      fOscillation_66 = 1.0;
      highp float fAmount_67;
      highp float fTarget_68;
      highp vec4 tmpvar_69;
      tmpvar_69.x = (fTime_62 + _glesMultiTexCoord0.w);
      tmpvar_69.y = ((fTime_62 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_69.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_62 + _glesMultiTexCoord0.w));
      tmpvar_69.w = ((fTime_62 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_70;
      tmpvar_70 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      vOscillations_65 = (((
        (tmpvar_70 * tmpvar_70)
       * 
        (3.0 - (2.0 * tmpvar_70))
      ) - 0.5) * 2.0);
      highp float tmpvar_71;
      tmpvar_71 = (vOscillations_65.y * vOscillations_65.z);
      fTarget_68 = 1.0;
      fAmount_67 = tmpvar_71;
      if ((tmpvar_71 < 0.0)) {
        fTarget_68 = -1.0;
        fAmount_67 = -(tmpvar_71);
      };
      fOscillation_66 = (((
        mix (mix (tmpvar_71, fTarget_68, fAmount_67), fTarget_68, fAmount_67)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_65.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_66 = (fOscillation_66 * (1.0 + (vOscillations_65.w * _ST_WindBranchWhip.x)));
      vPos_61 = (finalPosition_9 + ((vWindVector_64 * fOscillation_66) * _ST_WindBranch.y));
      highp vec4 tmpvar_72;
      tmpvar_72.zw = vec2(0.0, 0.0);
      tmpvar_72.x = ((fTime_62 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_72.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_73;
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      tmpvar_73 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((tmpvar_73.x * tmpvar_73.y) * (
        (tmpvar_73.x * tmpvar_73.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_65.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_61 = (vPos_61 + ((
        ((rotatedBranchAnchor_7 - vPos_61) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_60 = vPos_61;
    } else {
      highp vec3 vPos_75;
      vPos_75 = vPos_60;
      highp float fTime_76;
      highp vec3 vWindVector_77;
      vWindVector_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_76 = (_ST_WindBranch.x + (tmpvar_59.x + tmpvar_59.y));
      highp vec4 vOscillations_78;
      highp float fOscillation_79;
      fOscillation_79 = 1.0;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (fTime_76 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((fTime_76 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_76 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_78 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_78.y * vOscillations_78.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      fOscillation_79 = (((
        mix (mix (tmpvar_84, fTarget_81, fAmount_80), fTarget_81, fAmount_80)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_78.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_75 = (vPos_60 + ((vWindVector_77 * fOscillation_79) * _ST_WindBranch.y));
      vPos_60 = vPos_75;
    };
    finalPosition_9 = vPos_60;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = finalPosition_9;
    highp float fMoveAmount_86;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_89;
    tmpvar_89 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_59.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_59.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    fMoveAmount_86 = ((_ST_WindGlobal.y * (tmpvar_91.x + 
      (tmpvar_91.y * tmpvar_91.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_86 = (fMoveAmount_86 * fAdjust_87);
    vPos_85.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_86));
    vPos_85 = (normalize(vPos_85) * fLength_88);
    finalPosition_9 = vPos_85;
  };
  tmpvar_5.xyz = finalPosition_9;
  highp vec3 vertex_93;
  vertex_93 = tmpvar_5.xyz;
  highp vec4 clipPos_94;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_95;
    tmpvar_95.w = 1.0;
    tmpvar_95.xyz = vertex_93;
    highp vec3 tmpvar_96;
    tmpvar_96 = (_Object2World * tmpvar_95).xyz;
    highp vec4 v_97;
    v_97.x = _World2Object[0].x;
    v_97.y = _World2Object[1].x;
    v_97.z = _World2Object[2].x;
    v_97.w = _World2Object[3].x;
    highp vec4 v_98;
    v_98.x = _World2Object[0].y;
    v_98.y = _World2Object[1].y;
    v_98.z = _World2Object[2].y;
    v_98.w = _World2Object[3].y;
    highp vec4 v_99;
    v_99.x = _World2Object[0].z;
    v_99.y = _World2Object[1].z;
    v_99.z = _World2Object[2].z;
    v_99.w = _World2Object[3].z;
    highp vec3 tmpvar_100;
    tmpvar_100 = normalize(((
      (v_97.xyz * tmpvar_6.x)
     + 
      (v_98.xyz * tmpvar_6.y)
    ) + (v_99.xyz * tmpvar_6.z)));
    highp float tmpvar_101;
    tmpvar_101 = dot (tmpvar_100, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_96 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_102;
    tmpvar_102.w = 1.0;
    tmpvar_102.xyz = (tmpvar_96 - (tmpvar_100 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_101 * tmpvar_101)))
    )));
    clipPos_94 = (unity_MatrixVP * tmpvar_102);
  } else {
    highp vec4 tmpvar_103;
    tmpvar_103.w = 1.0;
    tmpvar_103.xyz = vertex_93;
    clipPos_94 = (glstate_matrix_mvp * tmpvar_103);
  };
  highp vec4 clipPos_104;
  clipPos_104.xyw = clipPos_94.xyw;
  clipPos_104.z = (clipPos_94.z + clamp ((unity_LightShadowBias.x / clipPos_94.w), 0.0, 1.0));
  clipPos_104.z = mix (clipPos_104.z, max (clipPos_104.z, -(clipPos_94.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_105;
  highp vec4 o_106;
  highp vec4 tmpvar_107;
  tmpvar_107 = (clipPos_104 * 0.5);
  highp vec2 tmpvar_108;
  tmpvar_108.x = tmpvar_107.x;
  tmpvar_108.y = (tmpvar_107.y * _ProjectionParams.x);
  o_106.xy = (tmpvar_108 + tmpvar_107.w);
  o_106.zw = clipPos_104.zw;
  highp vec3 tmpvar_109;
  tmpvar_109 = o_106.xyw;
  screenPos_105 = tmpvar_109;
  screenPos_105.xy = (screenPos_105.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_104;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_105;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = dot(t3.xyz, t3.xyz);
    t43 = sqrt(t43);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t4.xyz;
        } else {
            t15.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t15.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t16.x = dot(t4.xyz, t4.xyz);
            t16.x = inversesqrt(t16.x);
            t4.xyz = t16.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t6 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t6.w = t0.z * t0.y;
            tb44 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            t44 = (-t0.y) * t0.z + t6.x;
            t44 = t6.y * t44 + t6.w;
            t45 = (-t44) + t6.x;
            t44 = t6.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t5.xyz = vec3(t44) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t6.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t6.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t5.x = t16.x + in_TEXCOORD0.w;
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t16.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t0.w = t5.z * t5.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t5.y) * t5.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t5.x;
            t16.x = t16.x * t44 + t45;
            t4.xyz = t16.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t3.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb45 = t44!=0.0;
    t4.x = log2(t44);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t44 = (tb45) ? t4.x : t44;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t32.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t32.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t45 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    t44 = t44 * t45;
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    tb1.x = unity_LightShadowBias.z!=0.0;
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t15.yyy * t5.xyz;
    t4.xyz = t4.xyz * t15.xxx + t5.xyz;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t15.xyz = t5.xyz * t15.zzz + t4.xyz;
    t44 = dot(t15.xyz, t15.xyz);
    t44 = inversesqrt(t44);
    t15.xyz = t15.xyz * vec3(t44);
    t4.xyz = (-t3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t44 = dot(t15.xyz, t4.xyz);
    t44 = (-t44) * t44 + 1.0;
    t44 = sqrt(t44);
    t44 = t44 * unity_LightShadowBias.z;
    t15.xyz = (-t15.xyz) * vec3(t44) + t3.xyz;
    t0 = t15.yyyy * unity_MatrixVP[1];
    t0 = unity_MatrixVP[0] * t15.xxxx + t0;
    t0 = unity_MatrixVP[2] * t15.zzzz + t0;
    t0 = t0 + unity_MatrixVP[3];
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    t2 = t2 + glstate_matrix_mvp[3];
    t0 = (tb1.x) ? t0 : t2;
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    t1.x = t0.z + t1.x;
    t15.x = max((-t0.w), t1.x);
    t15.x = (-t1.x) + t15.x;
    gl_Position.z = unity_LightShadowBias.y * t15.x + t1.x;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t15.x = t0.y * _ProjectionParams.x;
    t1.w = t15.x * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t1.xy = t1.xy * vec2(0.25, 0.25);
    gl_Position.xyw = t0.xyw;
    t1.z = t0.w;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec2 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    t16_3 = fract(t16_1.y);
    t0.x = t16_1.x;
    t0.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    t16_0 = t10_0 + -0.5;
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_2.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_6;
  highp vec3 rotatedWindVector_7;
  highp vec3 finalPosition_8;
  finalPosition_8 = tmpvar_1.xyz;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    rotatedWindVector_7 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_6 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_7 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_6 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_8 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_12;
    tmpvar_12 = sqrt(dot (finalPosition_8, finalPosition_8));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_13[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_13[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_8 = (finalPosition_8 * tmpvar_13);
    finalPosition_8 = (normalize(finalPosition_8) * tmpvar_12);
  };
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_14;
    tmpvar_14 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_15;
    isBestWind_15 = (tmpvar_9 == 4.0);
    bool bLeaf2_16;
    bLeaf2_16 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_17;
    vPos_17 = finalPosition_8;
    highp float tmpvar_18;
    if (bLeaf2_16) {
      tmpvar_18 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_18 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_19;
    if (bLeaf2_16) {
      tmpvar_19 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_19 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_20;
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (tmpvar_18 + tmpvar_14);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (finalPosition_8 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_19 * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_17 = vPos_20;
    if (isBestWind_15) {
      highp vec3 tmpvar_23;
      tmpvar_23 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_24;
      if (bLeaf2_16) {
        tmpvar_24 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_24 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_25;
      if (bLeaf2_16) {
        tmpvar_25 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_26;
      if (bLeaf2_16) {
        tmpvar_26 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_27;
      if (bLeaf2_16) {
        tmpvar_27 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_28;
      if (bLeaf2_16) {
        tmpvar_28 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_28 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_29;
      if (bLeaf2_16) {
        tmpvar_29 = bool(1);
      } else {
        tmpvar_29 = bool(1);
      };
      highp float fTwitch_30;
      highp vec3 vAxis_31;
      highp float fOsc_32;
      highp vec3 vOriginPos_33;
      highp vec3 tmpvar_34;
      tmpvar_34 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_35;
      tmpvar_35 = ((tmpvar_34.x + tmpvar_34.y) + tmpvar_34.z);
      highp vec4 tmpvar_36;
      tmpvar_36.x = (tmpvar_24 + tmpvar_35);
      tmpvar_36.y = ((tmpvar_24 * 0.75) - tmpvar_35);
      tmpvar_36.z = ((tmpvar_24 * 0.01) + tmpvar_35);
      tmpvar_36.w = (tmpvar_24 + tmpvar_35);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      vOriginPos_33 = vPos_20;
      highp float tmpvar_39;
      tmpvar_39 = sqrt(dot (vPos_20, vPos_20));
      highp float fAngle_40;
      fAngle_40 = ((_glesMultiTexCoord2.x * tmpvar_26) * (tmpvar_37.x + (tmpvar_37.y * tmpvar_37.y)));
      highp vec2 vSinCos_41;
      vSinCos_41.x = sin(fAngle_40);
      vSinCos_41.y = cos(fAngle_40);
      highp float tmpvar_42;
      tmpvar_42 = (1.0 - vSinCos_41.y);
      highp mat3 tmpvar_43;
      tmpvar_43[0].x = (((tmpvar_42 * tmpvar_23.x) * tmpvar_23.x) + vSinCos_41.y);
      tmpvar_43[0].y = (((tmpvar_42 * tmpvar_23.x) * tmpvar_23.y) + (vSinCos_41.x * tmpvar_23.z));
      tmpvar_43[0].z = (((tmpvar_42 * tmpvar_23.x) * tmpvar_23.z) - (vSinCos_41.x * tmpvar_23.y));
      tmpvar_43[1].x = (((tmpvar_42 * tmpvar_23.x) * tmpvar_23.y) - (vSinCos_41.x * tmpvar_23.z));
      tmpvar_43[1].y = (((tmpvar_42 * tmpvar_23.y) * tmpvar_23.y) + vSinCos_41.y);
      tmpvar_43[1].z = (((tmpvar_42 * tmpvar_23.y) * tmpvar_23.z) + (vSinCos_41.x * tmpvar_23.x));
      tmpvar_43[2].x = (((tmpvar_42 * tmpvar_23.x) * tmpvar_23.z) + (vSinCos_41.x * tmpvar_23.y));
      tmpvar_43[2].y = (((tmpvar_42 * tmpvar_23.y) * tmpvar_23.z) - (vSinCos_41.x * tmpvar_23.x));
      tmpvar_43[2].z = (((tmpvar_42 * tmpvar_23.z) * tmpvar_23.z) + vSinCos_41.y);
      highp vec3 tmpvar_44;
      tmpvar_44 = ((tmpvar_23.yzx * rotatedWindVector_7.zxy) - (tmpvar_23.zxy * rotatedWindVector_7.yzx));
      vAxis_31.xz = tmpvar_44.xz;
      highp float tmpvar_45;
      tmpvar_45 = clamp (dot (rotatedWindVector_7, tmpvar_23), -1.0, 1.0);
      vAxis_31.y = (tmpvar_44.y + tmpvar_45);
      highp vec3 tmpvar_46;
      tmpvar_46 = normalize(vAxis_31);
      vAxis_31 = tmpvar_46;
      highp float tmpvar_47;
      tmpvar_47 = (1.570796 - (sign(tmpvar_45) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_45))) * (1.570796 + (abs(tmpvar_45) * (-0.2146018 + 
          (abs(tmpvar_45) * (0.08656672 + (abs(tmpvar_45) * -0.03102955)))
        ))))
      )));
      fOsc_32 = (tmpvar_37.y - (tmpvar_37.x * tmpvar_37.x));
      fTwitch_30 = 0.0;
      if (tmpvar_29) {
        highp float fTime_48;
        fTime_48 = (tmpvar_28.z + tmpvar_35);
        highp vec4 tmpvar_49;
        tmpvar_49.zw = vec2(0.0, 0.0);
        tmpvar_49.x = fTime_48;
        tmpvar_49.y = (0.87 * fTime_48);
        highp vec4 tmpvar_50;
        highp vec4 tmpvar_51;
        tmpvar_51 = abs(((
          fract((tmpvar_49 + 0.5))
         * 2.0) - 1.0));
        tmpvar_50 = (((
          (tmpvar_51 * tmpvar_51)
         * 
          (3.0 - (2.0 * tmpvar_51))
        ) - 0.5) * 2.0);
        fTwitch_30 = (tmpvar_28.x * pow (clamp (
          ((((tmpvar_50.x * tmpvar_50.y) * tmpvar_50.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_28.y));
      };
      highp float fAngle_52;
      fAngle_52 = (_glesMultiTexCoord2.x * ((
        (tmpvar_47 * tmpvar_27)
       + 
        (fOsc_32 * tmpvar_25)
      ) + fTwitch_30));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_46.x) * tmpvar_46.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_46.x) * tmpvar_46.y) + (vSinCos_53.x * tmpvar_46.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_46.x) * tmpvar_46.z) - (vSinCos_53.x * tmpvar_46.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_46.x) * tmpvar_46.y) - (vSinCos_53.x * tmpvar_46.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_46.y) * tmpvar_46.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_46.y) * tmpvar_46.z) + (vSinCos_53.x * tmpvar_46.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_46.x) * tmpvar_46.z) + (vSinCos_53.x * tmpvar_46.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_46.y) * tmpvar_46.z) - (vSinCos_53.x * tmpvar_46.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_46.z) * tmpvar_46.z) + vSinCos_53.y);
      vOriginPos_33 = (normalize((
        (tmpvar_43 * tmpvar_55)
       * vPos_20)) * tmpvar_39);
      vPos_17 = vOriginPos_33;
    };
    finalPosition_8 = vPos_17;
  };
  finalPosition_8 = (finalPosition_8 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_56;
  tmpvar_56.x = _Object2World[3].x;
  tmpvar_56.y = _Object2World[3].y;
  tmpvar_56.z = _Object2World[3].z;
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_57;
    vPos_57 = finalPosition_8;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_58;
      vPos_58 = finalPosition_8;
      highp float fTime_59;
      highp float fAdherenceScale_60;
      highp vec3 vWindVector_61;
      vWindVector_61 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_59 = (_ST_WindBranch.x + (tmpvar_56.x + tmpvar_56.y));
      highp vec4 vOscillations_62;
      highp float fOscillation_63;
      fOscillation_63 = 1.0;
      highp float fAmount_64;
      highp float fTarget_65;
      highp vec4 tmpvar_66;
      tmpvar_66.x = (fTime_59 + _glesMultiTexCoord0.w);
      tmpvar_66.y = ((fTime_59 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_66.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_59 + _glesMultiTexCoord0.w));
      tmpvar_66.w = ((fTime_59 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_67;
      tmpvar_67 = abs(((
        fract((tmpvar_66 + 0.5))
       * 2.0) - 1.0));
      vOscillations_62 = (((
        (tmpvar_67 * tmpvar_67)
       * 
        (3.0 - (2.0 * tmpvar_67))
      ) - 0.5) * 2.0);
      highp float tmpvar_68;
      tmpvar_68 = (vOscillations_62.y * vOscillations_62.z);
      fTarget_65 = 1.0;
      fAmount_64 = tmpvar_68;
      if ((tmpvar_68 < 0.0)) {
        fTarget_65 = -1.0;
        fAmount_64 = -(tmpvar_68);
      };
      fOscillation_63 = (((
        mix (mix (tmpvar_68, fTarget_65, fAmount_64), fTarget_65, fAmount_64)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_62.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_63 = (fOscillation_63 * (1.0 + (vOscillations_62.w * _ST_WindBranchWhip.x)));
      vPos_58 = (finalPosition_8 + ((vWindVector_61 * fOscillation_63) * _ST_WindBranch.y));
      highp vec4 tmpvar_69;
      tmpvar_69.zw = vec2(0.0, 0.0);
      tmpvar_69.x = ((fTime_59 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_69.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_70;
      highp vec4 tmpvar_71;
      tmpvar_71 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      tmpvar_70 = (((
        (tmpvar_71 * tmpvar_71)
       * 
        (3.0 - (2.0 * tmpvar_71))
      ) - 0.5) * 2.0);
      fAdherenceScale_60 = (1.0 - ((tmpvar_70.x * tmpvar_70.y) * (
        (tmpvar_70.x * tmpvar_70.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_60 = (fAdherenceScale_60 + ((vOscillations_62.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_58 = (vPos_58 + ((
        ((rotatedBranchAnchor_6 - vPos_58) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_60) * _glesMultiTexCoord0.z));
      vPos_57 = vPos_58;
    } else {
      highp vec3 vPos_72;
      vPos_72 = vPos_57;
      highp float fTime_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_73 = (_ST_WindBranch.x + (tmpvar_56.x + tmpvar_56.y));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.w = 0.0;
      tmpvar_79.x = (fTime_73 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_73 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_72 = (vPos_57 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      vPos_57 = vPos_72;
    };
    finalPosition_8 = vPos_57;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_82;
    vPos_82 = finalPosition_8;
    highp float fMoveAmount_83;
    highp float fAdjust_84;
    highp float fLength_85;
    fLength_85 = sqrt(dot (finalPosition_8, finalPosition_8));
    highp float tmpvar_86;
    tmpvar_86 = (max ((finalPosition_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_84 = tmpvar_86;
    if ((tmpvar_86 != 0.0)) {
      fAdjust_84 = pow (tmpvar_86, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_87;
    tmpvar_87.zw = vec2(0.0, 0.0);
    tmpvar_87.x = (tmpvar_56.x + _ST_WindGlobal.x);
    tmpvar_87.y = (tmpvar_56.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_88;
    highp vec4 tmpvar_89;
    tmpvar_89 = abs(((
      fract((tmpvar_87 + 0.5))
     * 2.0) - 1.0));
    tmpvar_88 = (((
      (tmpvar_89 * tmpvar_89)
     * 
      (3.0 - (2.0 * tmpvar_89))
    ) - 0.5) * 2.0);
    fMoveAmount_83 = ((_ST_WindGlobal.y * (tmpvar_88.x + 
      (tmpvar_88.y * tmpvar_88.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_83 = (fMoveAmount_83 * fAdjust_84);
    vPos_82.xz = (finalPosition_8.xz + (rotatedWindVector_7.xz * fMoveAmount_83));
    vPos_82 = (normalize(vPos_82) * fLength_85);
    finalPosition_8 = vPos_82;
  };
  tmpvar_5.xyz = finalPosition_8;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_90;
  highp vec4 o_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_93;
  tmpvar_93.x = tmpvar_92.x;
  tmpvar_93.y = (tmpvar_92.y * _ProjectionParams.x);
  o_91.xy = (tmpvar_93 + tmpvar_92.w);
  o_91.zw = tmpvar_3.zw;
  highp vec3 tmpvar_94;
  tmpvar_94 = o_91.xyw;
  screenPos_90 = tmpvar_94;
  screenPos_90.xy = (screenPos_90.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_5).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_90;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - (tmpvar_5.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp float t17;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t31;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
highp float t46;
void main()
{
    t16_0 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t29 = dot(t2.xyz, t2.xyz);
    t29 = inversesqrt(t29);
    t2.xyz = vec3(t29) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb29 = in_COLOR0.w==0.0;
    t43 = dot(t3.xyz, t3.xyz);
    t43 = sqrt(t43);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t44 = dot(t4.xyz, t4.xyz);
    t44 = inversesqrt(t44);
    t4.xyz = vec3(t44) * t4.xyz;
    t4.xyz = vec3(t43) * t4.xyz;
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    tb29 = t16_0<5.0;
    ti15 = int(uint(tb29) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti15))!=uint(0u)){
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb29 = t16_0==4.0;
        tb43 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t15.x = t15.x + t4.x;
        t15.x = t15.x + 0.5;
        t15.x = fract(t15.x);
        t15.x = t15.x * 2.0 + -1.0;
        t44 = abs(t15.x) * abs(t15.x);
        t15.x = -abs(t15.x) * 2.0 + 3.0;
        t15.x = t44 * t15.x + -0.5;
        t15.x = dot(t15.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t15.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb29){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t44 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t44);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t34.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t34.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t44 = dot(t3.xyz, t3.xyz);
            t44 = sqrt(t44);
            t45 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t45 = t45 * t5.x;
            t5.x = sin(t45);
            t7.x = cos(t45);
            t45 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t45);
            t21.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t21.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t21.y);
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            t11.z = t8.w * t4.z + t21.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t45 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t16.x = dot(t2.xyz, t4.xyz);
            t16.x = max(t16.x, -1.0);
            t16.x = min(t16.x, 1.0);
            t7.w = t16.x + t7.y;
            t45 = dot(t7.xzw, t7.xzw);
            t45 = inversesqrt(t45);
            t4.xyz = vec3(t45) * t7.zxw;
            t45 = -abs(t16.x) + 1.0;
            t45 = sqrt(t45);
            t5.x = abs(t16.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t16.x) + -0.212114394;
            t5.x = t5.x * abs(t16.x) + 1.57072878;
            t33 = t45 * t5.x;
            t33 = t33 * -2.0 + 3.14159274;
            tb16 = t16.x<(-t16.x);
            t16.x = tb16 ? t33 : float(0.0);
            t16.x = t5.x * t45 + t16.x;
            t45 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t15.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t43 = t5.z * t5.z;
            t43 = t43 * t5.x + 1.0;
            t43 = t43 * 0.5;
            t43 = clamp(t43, 0.0, 1.0);
            t43 = log2(t43);
            t29 = t43 * t15.y;
            t29 = exp2(t29);
            t43 = t5.y * t45;
            t43 = t16.x * t5.w + t43;
            t15.x = t15.x * t29 + t43;
            t15.x = t15.x * in_TEXCOORD2.x;
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            t15.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t29 = t4.x * t4.x;
            t8.w = t29 * t15.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t15.x = dot(t4.xyz, t4.xyz);
            t15.x = inversesqrt(t15.x);
            t15.xyz = t15.xxx * t4.xyz;
            t3.xyz = vec3(t44) * t15.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t15.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb16 = t16_0>=3.0;
    if(tb16){
        tb16 = t16_0==5.0;
        if(tb16){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t16.x = dot(t3.xyz, t3.xyz);
            t16.x = inversesqrt(t16.x);
            t3.xyz = t16.xxx * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t0.x = t16.x + in_TEXCOORD0.w;
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t44 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t44 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb44 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb44)) ? t5.xy : t5.zw;
            t44 = (-t0.y) * t0.z + t5.x;
            t44 = t5.y * t44 + t5.w;
            t45 = (-t44) + t5.x;
            t44 = t5.y * t45 + t44;
            t44 = t44 * _ST_WindBranchTwitch.x;
            t45 = (-_ST_WindVector.w) + 1.0;
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            t46 = t0.x * t46;
            t44 = t44 * t45 + t46;
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t44 = t44 * t45;
            t4.xyz = vec3(t44) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t15.xyz;
            t5.x = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t16.x * 0.100000001 + in_TEXCOORD0.w;
            t16.xz = t5.xy + vec2(0.5, 0.5);
            t16.xz = fract(t16.xz);
            t16.xz = t16.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t5.xy = abs(t16.xz) * abs(t16.xz);
            t16.xz = -abs(t16.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t16.xz = t5.xy * t16.xz + vec2(-0.5, -0.5);
            t16.xz = t16.xz + t16.xz;
            t16.xz = t16.xz * t16.xz;
            t16.x = t16.x * t16.z;
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            t44 = t0.w * _ST_WindVector.w;
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = t16.xxx * t3.xyz;
            t15.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t16.x = _Object2World[3].y + _Object2World[3].x;
            t16.x = t16.x + _ST_WindBranch.x;
            t4.x = t16.x + in_TEXCOORD0.w;
            t4.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t16.x = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t16.x * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb16 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            t45 = (-t4.y) * t4.z + t16.x;
            t45 = t16.z * t45 + t0.w;
            t16.x = t16.x + (-t45);
            t16.x = t16.z * t16.x + t45;
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            t44 = (-_ST_WindVector.w) + 1.0;
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            t45 = t45 * t4.x;
            t16.x = t16.x * t44 + t45;
            t3.xyz = t16.xxx * t3.xyz;
            t15.xyz = t3.xyz * _ST_WindBranch.yyy + t15.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t16.x = dot(t15.xyz, t15.xyz);
    t16.x = sqrt(t16.x);
    t44 = float(1.0) / _ST_WindGlobal.z;
    t44 = (-t44) * 0.25 + t15.y;
    t44 = max(t44, 0.0);
    t44 = t44 * _ST_WindGlobal.z;
    tb3 = t44!=0.0;
    t17 = log2(t44);
    t17 = t17 * _ST_WindGlobal.w;
    t17 = exp2(t17);
    t44 = (tb3) ? t17 : t44;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t31.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t31.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t17 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t17;
    t44 = t44 * t3.x;
    t3.xz = t2.xz * vec2(t44) + t15.xz;
    t3.y = t15.y;
    t2.x = dot(t3.xyz, t3.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t3.xyz;
    t2.xyz = t16.xxx * t2.xzw;
    t1.xyz = (tb1.x) ? t2.xyz : t15.xyz;
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t1.xz = t0.xw * vec2(0.5, 0.5);
    t15.x = t0.y * _ProjectionParams.x;
    t1.w = t15.x * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t1.xy = t1.xy * vec2(0.25, 0.25);
    gl_Position = t0;
    t1.z = t0.w;
    vs_TEXCOORD2.xyz = t1.xyz;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    t16_3 = fract(t16_1.y);
    t0.x = t16_1.x;
    t0.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    t16_0 = t10_0 + -0.5;
    tb0 = t16_0<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    t0.x = sqrt(t0.x);
    t0.x = t0.x * _LightPositionRange.w;
    t0.x = min(t0.x, 0.999000013);
    t0 = t0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    t0 = fract(t0);
    SV_Target0 = (-t0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + t0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 434308
Program "vp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  finalPosition_9 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_10;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (_glesVertex.xyz + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((rotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    finalPosition_9 = vPos_15;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = finalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    finalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = finalPosition_9;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_48;
  highp vec3 viewN_49;
  highp vec3 viewpos_50;
  viewpos_50 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_51[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_51[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_49 = normalize((tmpvar_51 * _glesNormal));
  lowp vec3 tmpvar_52;
  tmpvar_52 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_48 = tmpvar_52;
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_50 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_48 = (lightColor_48 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_49, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_50 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_48 = (lightColor_48 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_49, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_50 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_48 = (lightColor_48 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_49, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_50 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_48 = (lightColor_48 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_49, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = tmpvar_1;
  tmpvar_5.w = tmpvar_2;
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t10;
highp float t11;
highp float t15;
highp vec2 t17;
mediump float t16_21;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_21 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_21;
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    t15 = dot(t8.xyz, t8.xyz);
    t15 = inversesqrt(t15);
    t8.xy = vec2(t15) * t8.xz;
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, vec2(bvec2(tb1)));
    tb22 = t16_21>=3.0;
    if(tb22){
        tb22 = t16_21==5.0;
        if(tb22){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t22 = dot(t2.xyz, t2.xyz);
            t22 = inversesqrt(t22);
            t2.xyz = vec3(t22) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t4.x = t22 + in_TEXCOORD0.w;
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t23 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t23 * 0.5;
            t4.w = t4.x + (-in_TEXCOORD0.z);
            t4 = t4 + vec4(0.5, 0.5, 0.5, 1.5);
            t4 = fract(t4);
            t4 = t4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t4) * abs(t4);
            t4 = -abs(t4) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t4 = t5 * t4 + vec4(-0.5, -0.5, -0.5, -0.5);
            t4 = t4 + t4;
            t5.w = t4.z * t4.y;
            tb23 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            t23 = (-t4.y) * t4.z + t5.x;
            t23 = t5.y * t23 + t5.w;
            t24 = (-t23) + t5.x;
            t23 = t5.y * t24 + t23;
            t23 = t23 * _ST_WindBranchTwitch.x;
            t24 = (-_ST_WindVector.w) + 1.0;
            t11 = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t11 * t4.x;
            t23 = t23 * t24 + t4.x;
            t24 = t4.w * _ST_WindBranchWhip.x + 1.0;
            t23 = t23 * t24;
            t3.xyz = vec3(t23) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t5.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t5.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t22 = t4.x * t4.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t23 = t4.w * _ST_WindVector.w;
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t22) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t4.x = t22 + in_TEXCOORD0.w;
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t22 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t22 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t5.w = t4.z * t4.y;
            tb22 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb22)) ? t5.xy : t5.zw;
            t22 = (-t4.y) * t4.z + t5.x;
            t22 = t5.y * t22 + t5.w;
            t23 = (-t22) + t5.x;
            t22 = t5.y * t23 + t22;
            t22 = t22 * _ST_WindBranchTwitch.x;
            t23 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t4.x;
            t22 = t22 * t23 + t24;
            t3.xyz = vec3(t22) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t22 = dot(t2.xyz, t2.xyz);
    t22 = sqrt(t22);
    t23 = float(1.0) / _ST_WindGlobal.z;
    t23 = (-t23) * 0.25 + t2.y;
    t23 = max(t23, 0.0);
    t23 = t23 * _ST_WindGlobal.z;
    tb3 = t23!=0.0;
    t10 = log2(t23);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    t23 = (tb3) ? t10 : t23;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t17.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    t23 = t23 * t3.x;
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    t3.y = t2.y;
    t8.x = dot(t3.xyz, t3.xyz);
    t8.x = inversesqrt(t8.x);
    t3.xyz = t8.xxx * t3.xyz;
    t8.xyz = vec3(t22) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = inversesqrt(t22);
    t3.xyz = vec3(t22) * t3.xyz;
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_6.xyz;
    ti22 = 0x0;
    while(true){
        tb23 = ti22>=0x4;
        if(tb23){break;}
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti22 + 0].www + unity_LightPosition[ti22 + 0].xyz;
        t23 = dot(t5.xyz, t5.xyz);
        t24 = inversesqrt(t23);
        t5.xyz = vec3(t24) * t5.xyz;
        t23 = t23 * unity_LightAtten[ti22 + 0].z + 1.0;
        t23 = float(1.0) / t23;
        t24 = dot(t5.xyz, unity_SpotDirection[ti22 + 0].xyz);
        t24 = max(t24, 0.0);
        t24 = t24 + (-unity_LightAtten[ti22 + 0].x);
        t24 = t24 * unity_LightAtten[ti22 + 0].y;
        t24 = clamp(t24, 0.0, 1.0);
        t23 = t23 * t24;
        t24 = dot(t3.xyz, t5.xyz);
        t24 = max(t24, 0.0);
        t23 = t23 * t24;
        t4.xyz = unity_LightColor[ti22 + 0].xyz * vec3(t23) + t4.xyz;
        ti22 = ti22 + 0x1;
    }
    t2.xyz = t16_0.xyz * t4.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xyz = t2.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  tmpvar_6 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_8;
  highp vec3 rotatedWindVector_9;
  highp vec3 finalPosition_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = tmpvar_1.xyz;
  finalPosition_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    rotatedWindVector_9 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_8 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_9 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_8 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_16;
    vPos_16 = tmpvar_11;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_17;
      vPos_17 = tmpvar_11;
      highp float fTime_18;
      highp float fAdherenceScale_19;
      highp vec3 vWindVector_20;
      vWindVector_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_18 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_21;
      highp float fOscillation_22;
      fOscillation_22 = 1.0;
      highp float fAmount_23;
      highp float fTarget_24;
      highp vec4 tmpvar_25;
      tmpvar_25.x = (fTime_18 + _glesMultiTexCoord0.w);
      tmpvar_25.y = ((fTime_18 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_25.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_18 + _glesMultiTexCoord0.w));
      tmpvar_25.w = ((fTime_18 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_25 + 0.5))
       * 2.0) - 1.0));
      vOscillations_21 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      highp float tmpvar_27;
      tmpvar_27 = (vOscillations_21.y * vOscillations_21.z);
      fTarget_24 = 1.0;
      fAmount_23 = tmpvar_27;
      if ((tmpvar_27 < 0.0)) {
        fTarget_24 = -1.0;
        fAmount_23 = -(tmpvar_27);
      };
      fOscillation_22 = (((
        mix (mix (tmpvar_27, fTarget_24, fAmount_23), fTarget_24, fAmount_23)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_21.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_22 = (fOscillation_22 * (1.0 + (vOscillations_21.w * _ST_WindBranchWhip.x)));
      vPos_17 = (_glesVertex.xyz + ((vWindVector_20 * fOscillation_22) * _ST_WindBranch.y));
      highp vec4 tmpvar_28;
      tmpvar_28.zw = vec2(0.0, 0.0);
      tmpvar_28.x = ((fTime_18 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_28.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_29;
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      tmpvar_29 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((tmpvar_29.x * tmpvar_29.y) * (
        (tmpvar_29.x * tmpvar_29.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_21.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_17 = (vPos_17 + ((
        ((rotatedBranchAnchor_8 - vPos_17) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_16 = vPos_17;
    } else {
      highp vec3 vPos_31;
      vPos_31 = vPos_16;
      highp float fTime_32;
      highp vec3 vWindVector_33;
      vWindVector_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_32 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (fTime_32 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((fTime_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_32 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_34.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_31 = (vPos_16 + ((vWindVector_33 * fOscillation_35) * _ST_WindBranch.y));
      vPos_16 = vPos_31;
    };
    finalPosition_10 = vPos_16;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = finalPosition_10;
    highp float fMoveAmount_42;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (finalPosition_10, finalPosition_10));
    highp float tmpvar_45;
    tmpvar_45 = (max ((finalPosition_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    fMoveAmount_42 = ((_ST_WindGlobal.y * (tmpvar_47.x + 
      (tmpvar_47.y * tmpvar_47.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_42 = (fMoveAmount_42 * fAdjust_43);
    vPos_41.xz = (finalPosition_10.xz + (rotatedWindVector_9.xz * fMoveAmount_42));
    vPos_41 = (normalize(vPos_41) * fLength_44);
    finalPosition_10 = vPos_41;
  };
  tmpvar_7.xyz = finalPosition_10;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 toLight_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_55);
  toLight_54 = (tmpvar_55 * inversesqrt(tmpvar_56));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, toLight_54))
   * 
    ((1.0/((1.0 + (tmpvar_56 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_54, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  toLight_57 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, toLight_57))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_57, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  toLight_60 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, toLight_60))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_60, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  toLight_63 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, toLight_63))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_63, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_49);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t9;
bool tb9;
highp float t13;
highp vec2 t17;
highp vec2 t20;
mediump float t16_24;
highp float t25;
highp int ti25;
highp float t26;
bool tb26;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t1.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t1.x + _Object2World[3].z;
    t17.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t17.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t2.z = t9.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    t16_24 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_24;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t17.x = dot(t3.xyz, t3.xyz);
    t17.x = inversesqrt(t17.x);
    t17.xy = t17.xx * t3.xz;
    t17.xy = mix(vec2(0.0, 0.0), t17.xy, vec2(bvec2(tb9)));
    tb26 = t16_24>=3.0;
    if(tb26){
        tb26 = t16_24==5.0;
        if(tb26){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t26 = dot(t3.xyz, t3.xyz);
            t26 = inversesqrt(t26);
            t3.xyz = vec3(t26) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t26 = t1.x + _ST_WindBranch.x;
            t5.x = t26 + in_TEXCOORD0.w;
            t5.y = t26 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t27 * 0.5;
            t5.w = t5.x + (-in_TEXCOORD0.z);
            t5 = t5 + vec4(0.5, 0.5, 0.5, 1.5);
            t5 = fract(t5);
            t5 = t5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t5) * abs(t5);
            t5 = -abs(t5) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t5 = t6 * t5 + vec4(-0.5, -0.5, -0.5, -0.5);
            t5 = t5 + t5;
            t6.w = t5.z * t5.y;
            tb27 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            t27 = (-t5.y) * t5.z + t6.x;
            t27 = t6.y * t27 + t6.w;
            t28 = (-t27) + t6.x;
            t27 = t6.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t13 = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t13 * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t5.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t26 * 0.100000001 + in_TEXCOORD0.w;
            t26 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t26 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t6.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t26 = t5.x * t5.y;
            t26 = (-t26) * _ST_WindTurbulences.x + 1.0;
            t27 = t5.w * _ST_WindVector.w;
            t26 = t27 * _ST_WindBranchWhip.x + t26;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t26) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t1.x = t1.x + _ST_WindBranch.x;
            t5.x = t1.x + in_TEXCOORD0.w;
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t1.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t6.w = t5.z * t5.y;
            tb1 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            t1.x = (-t5.y) * t5.z + t6.x;
            t1.x = t6.y * t1.x + t6.w;
            t26 = (-t1.x) + t6.x;
            t1.x = t6.y * t26 + t1.x;
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t1.x = t1.x * t26 + t27;
            t4.xyz = t1.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = sqrt(t1.x);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t3.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb27 = t26!=0.0;
    t4.x = log2(t26);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t26 = (tb27) ? t4.x : t26;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t26 = t26 * t27;
    t4.xz = t17.xy * vec2(t26) + t3.xz;
    t4.y = t3.y;
    t17.x = dot(t4.xyz, t4.xyz);
    t17.x = inversesqrt(t17.x);
    t4.xyz = t17.xxx * t4.xyz;
    t1.xzw = t1.xxx * t4.xyz;
    t1.xyz = (bool(tb9)) ? t1.xzw : t3.xyz;
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t4.xyz = vec3(t25) * t4.xyz;
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t5.xyz = t10_7.xyz;
    ti25 = 0x0;
    while(true){
        tb26 = ti25>=0x4;
        if(tb26){break;}
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        t26 = dot(t6.xyz, t6.xyz);
        t27 = inversesqrt(t26);
        t6.xyz = vec3(t27) * t6.xyz;
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        t26 = float(1.0) / t26;
        t27 = dot(t6.xyz, unity_SpotDirection[ti25 + 0].xyz);
        t27 = max(t27, 0.0);
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        t26 = t26 * t27;
        t27 = dot(t4.xyz, t6.xyz);
        t27 = max(t27, 0.0);
        t26 = t26 * t27;
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        ti25 = ti25 + 0x1;
    }
    t3.xyz = t16_0.xyz * t5.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD1.w = _Color.w;
    t2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_3;
mediump float t16_13;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    t16_13 = max(t16_1.z, t16_1.y);
    t16_13 = max(t16_13, t16_1.x);
    t16_2 = max(t10_0.z, t10_0.y);
    t16_2 = max(t10_0.x, t16_2);
    t16_0.w = t10_0.w * _Color.w;
    t16_13 = t16_2 / t16_13;
    t16_3 = t16_13 * 0.5 + 0.5;
    t16_1.xyz = t16_1.xyz * vec3(t16_3);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    t16_0.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  finalPosition_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_13 == 5.0)) {
    highp vec3 vPos_16;
    vPos_16 = tmpvar_12;
    highp float fOffset_17;
    fOffset_17 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_17 = 0.75;
    };
    highp vec4 tmpvar_18;
    tmpvar_18.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_18.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_17);
    highp vec4 tmpvar_19;
    tmpvar_19 = abs(((
      fract((tmpvar_18 + 0.5))
     * 2.0) - 1.0));
    vPos_16 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_19 * tmpvar_19)
       * 
        (3.0 - (2.0 * tmpvar_19))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_8 = tmpvar_2;
    finalPosition_11 = vPos_16;
  };
  highp vec3 tmpvar_20;
  tmpvar_20.x = _Object2World[3].x;
  tmpvar_20.y = _Object2World[3].y;
  tmpvar_20.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = finalPosition_11;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = finalPosition_11;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_20.x + tmpvar_20.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (finalPosition_11 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((rotatedBranchAnchor_9 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_20.x + tmpvar_20.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    finalPosition_11 = vPos_21;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = finalPosition_11;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_50;
    tmpvar_50 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_20.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_20.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    finalPosition_11 = vPos_46;
  };
  tmpvar_7.xyz = finalPosition_11;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_54;
  highp vec3 viewN_55;
  highp vec3 viewpos_56;
  viewpos_56 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_57[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_57[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_55 = normalize((tmpvar_57 * tmpvar_8));
  lowp vec3 tmpvar_58;
  tmpvar_58 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_54 = tmpvar_58;
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_56 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_54 = (lightColor_54 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_55, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_56 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_54 = (lightColor_54 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_55, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_56 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  toLight_65 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_54 = (lightColor_54 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_55, toLight_65))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_65, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_56 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  toLight_68 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_54 = (lightColor_54 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_55, toLight_68))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_68, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_24 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_24;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    tb25 = t16_24==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t10 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t10 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    tb26 = t16_24>=3.0;
    if(tb26){
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t5.x = t25 + in_TEXCOORD0.w;
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t26 * 0.5;
            t5.w = t5.x + (-in_TEXCOORD0.z);
            t5 = t5 + vec4(0.5, 0.5, 0.5, 1.5);
            t5 = fract(t5);
            t5 = t5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t5) * abs(t5);
            t5 = -abs(t5) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t5 = t6 * t5 + vec4(-0.5, -0.5, -0.5, -0.5);
            t5 = t5 + t5;
            t6.w = t5.z * t5.y;
            tb26 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            t26 = (-t5.y) * t5.z + t6.x;
            t26 = t6.y * t26 + t6.w;
            t27 = (-t26) + t6.x;
            t26 = t6.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t28 * t5.x;
            t26 = t26 * t27 + t28;
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t6.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t5.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t5.w = t4.z * t4.y;
            tb25 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t5.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = inversesqrt(t25);
    t3.xyz = vec3(t25) * t3.xyz;
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_7.xyz;
    ti25 = 0x0;
    while(true){
        tb26 = ti25>=0x4;
        if(tb26){break;}
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        t26 = dot(t5.xyz, t5.xyz);
        t27 = inversesqrt(t26);
        t5.xyz = vec3(t27) * t5.xyz;
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        t26 = float(1.0) / t26;
        t27 = dot(t5.xyz, unity_SpotDirection[ti25 + 0].xyz);
        t27 = max(t27, 0.0);
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        t26 = t26 * t27;
        t27 = dot(t3.xyz, t5.xyz);
        t27 = max(t27, 0.0);
        t26 = t26 * t27;
        t4.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t4.xyz;
        ti25 = ti25 + 0x1;
    }
    t2.xyz = t16_0.xyz * t4.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xyz = t2.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  tmpvar_7 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 == 5.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_13;
    highp float fOffset_18;
    fOffset_18 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_18 = 0.75;
    };
    highp vec4 tmpvar_19;
    tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_19.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_18);
    highp vec4 tmpvar_20;
    tmpvar_20 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    vPos_17 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_20 * tmpvar_20)
       * 
        (3.0 - (2.0 * tmpvar_20))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_9 = tmpvar_2;
    finalPosition_12 = vPos_17;
  };
  highp vec3 tmpvar_21;
  tmpvar_21.x = _Object2World[3].x;
  tmpvar_21.y = _Object2World[3].y;
  tmpvar_21.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = finalPosition_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = finalPosition_12;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_21.x + tmpvar_21.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (finalPosition_12 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((rotatedBranchAnchor_10 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_21.x + tmpvar_21.y));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    finalPosition_12 = vPos_22;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = finalPosition_12;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_51;
    tmpvar_51 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_21.x + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_21.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    finalPosition_12 = vPos_47;
  };
  tmpvar_8.xyz = finalPosition_12;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_55;
  highp vec3 viewN_56;
  highp vec3 viewpos_57;
  viewpos_57 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_58[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_58[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_56 = normalize((tmpvar_58 * tmpvar_9));
  lowp vec3 tmpvar_59;
  tmpvar_59 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_55 = tmpvar_59;
  highp vec3 toLight_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[0].xyz - (viewpos_57 * unity_LightPosition[0].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  toLight_60 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_55 = (lightColor_55 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_56, toLight_60))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_60, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[1].xyz - (viewpos_57 * unity_LightPosition[1].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  toLight_63 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_55 = (lightColor_55 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_56, toLight_63))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_63, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[2].xyz - (viewpos_57 * unity_LightPosition[2].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  toLight_66 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_55 = (lightColor_55 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_56, toLight_66))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_66, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[3].xyz - (viewpos_57 * unity_LightPosition[3].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  toLight_69 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_55 = (lightColor_55 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_56, toLight_69))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_69, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_55);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp float t12;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t1.x = _Object2World[3].y + _Object2World[3].x;
    t10.x = t1.x + _Object2World[3].z;
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    t10.y = t19.x + in_NORMAL0.x;
    t10.xy = fract(t10.xy);
    t10.x = t10.y * 0.5 + t10.x;
    t10.x = t10.x + -0.300000012;
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    t16_27 = _WindEnabled * _WindQuality;
    tb10 = 0.0<t16_27;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t19.x = dot(t3.xyz, t3.xyz);
    t19.x = inversesqrt(t19.x);
    t19.xy = t19.xx * t3.xz;
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, vec2(bvec2(tb10)));
    tb29 = t16_27==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t12 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t12 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb29)) ? t3.xyz : in_POSITION0.xyz;
    tb30 = t16_27>=3.0;
    if(tb30){
        if(tb29){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t29 = dot(t4.xyz, t4.xyz);
            t29 = inversesqrt(t29);
            t4.xyz = vec3(t29) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t29 = t1.x + _ST_WindBranch.x;
            t6.x = t29 + in_TEXCOORD0.w;
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t30 * 0.5;
            t6.w = t6.x + (-in_TEXCOORD0.z);
            t6 = t6 + vec4(0.5, 0.5, 0.5, 1.5);
            t6 = fract(t6);
            t6 = t6 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t6) * abs(t6);
            t6 = -abs(t6) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t6 = t7 * t6 + vec4(-0.5, -0.5, -0.5, -0.5);
            t6 = t6 + t6;
            t7.w = t6.z * t6.y;
            tb30 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            t30 = (-t6.y) * t6.z + t7.x;
            t30 = t7.y * t30 + t7.w;
            t31 = (-t30) + t7.x;
            t30 = t7.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t32 * t6.x;
            t30 = t30 * t31 + t32;
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t29 * 0.100000001 + in_TEXCOORD0.w;
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t29 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t7.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t7.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t29 = t6.x * t6.y;
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            t30 = t6.w * _ST_WindVector.w;
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t29) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t1.x = t1.x + _ST_WindBranch.x;
            t5.x = t1.x + in_TEXCOORD0.w;
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t1.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t6.w = t5.z * t5.y;
            tb1 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            t1.x = (-t5.y) * t5.z + t6.x;
            t1.x = t6.y * t1.x + t6.w;
            t29 = (-t1.x) + t6.x;
            t1.x = t6.y * t29 + t1.x;
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            t29 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t1.x = t1.x * t29 + t30;
            t4.xyz = t1.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = sqrt(t1.x);
    t29 = float(1.0) / _ST_WindGlobal.z;
    t29 = (-t29) * 0.25 + t3.y;
    t29 = max(t29, 0.0);
    t29 = t29 * _ST_WindGlobal.z;
    tb30 = t29!=0.0;
    t4.x = log2(t29);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t29 = (tb30) ? t4.x : t29;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t29 = t29 * t30;
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    t4.y = t3.y;
    t19.x = dot(t4.xyz, t4.xyz);
    t19.x = inversesqrt(t19.x);
    t4.xyz = t19.xxx * t4.xyz;
    t1.xzw = t1.xxx * t4.xyz;
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    t28 = dot(t4.xyz, t4.xyz);
    t28 = inversesqrt(t28);
    t4.xyz = vec3(t28) * t4.xyz;
    t10_8.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t5.xyz = t10_8.xyz;
    ti28 = 0x0;
    while(true){
        tb29 = ti28>=0x4;
        if(tb29){break;}
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        t29 = dot(t6.xyz, t6.xyz);
        t30 = inversesqrt(t29);
        t6.xyz = vec3(t30) * t6.xyz;
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        t29 = float(1.0) / t29;
        t30 = dot(t6.xyz, unity_SpotDirection[ti28 + 0].xyz);
        t30 = max(t30, 0.0);
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        t29 = t29 * t30;
        t30 = dot(t4.xyz, t6.xyz);
        t30 = max(t30, 0.0);
        t29 = t29 * t30;
        t5.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t5.xyz;
        ti28 = ti28 + 0x1;
    }
    t3.xyz = t16_0.xyz * t5.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD1.w = _Color.w;
    t2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_0.w = t10_0.w * _Color.w;
    t16_4 = max(t16_8.z, t16_8.y);
    t16_4 = max(t16_8.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_2 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  finalPosition_11 = tmpvar_1.xyz;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_11 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_15;
    tmpvar_15 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_16[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_16[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_11 = (finalPosition_11 * tmpvar_16);
    finalPosition_11 = (normalize(finalPosition_11) * tmpvar_15);
  };
  if (((tmpvar_12 > 1.0) && (tmpvar_12 < 5.0))) {
    highp float tmpvar_17;
    tmpvar_17 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_18;
    isBestWind_18 = (tmpvar_12 == 4.0);
    bool bLeaf2_19;
    bLeaf2_19 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_20;
    vPos_20 = finalPosition_11;
    highp vec3 vDirection_21;
    vDirection_21 = tmpvar_2;
    highp float tmpvar_22;
    if (bLeaf2_19) {
      tmpvar_22 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_22 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_23;
    if (bLeaf2_19) {
      tmpvar_23 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_24;
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (tmpvar_22 + tmpvar_17);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (finalPosition_11 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_23 * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_21 = tmpvar_2;
    vPos_20 = vPos_24;
    if (isBestWind_18) {
      highp vec3 tmpvar_27;
      tmpvar_27 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_28;
      if (bLeaf2_19) {
        tmpvar_28 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_29;
      if (bLeaf2_19) {
        tmpvar_29 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_30;
      if (bLeaf2_19) {
        tmpvar_30 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_31;
      if (bLeaf2_19) {
        tmpvar_31 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_32;
      if (bLeaf2_19) {
        tmpvar_32 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_32 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_33;
      if (bLeaf2_19) {
        tmpvar_33 = bool(1);
      } else {
        tmpvar_33 = bool(1);
      };
      highp float fTwitch_34;
      highp vec3 vAxis_35;
      highp float fOsc_36;
      highp vec3 vOriginPos_37;
      highp vec3 tmpvar_38;
      tmpvar_38 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_39;
      tmpvar_39 = ((tmpvar_38.x + tmpvar_38.y) + tmpvar_38.z);
      highp vec4 tmpvar_40;
      tmpvar_40.x = (tmpvar_28 + tmpvar_39);
      tmpvar_40.y = ((tmpvar_28 * 0.75) - tmpvar_39);
      tmpvar_40.z = ((tmpvar_28 * 0.01) + tmpvar_39);
      tmpvar_40.w = (tmpvar_28 + tmpvar_39);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      vOriginPos_37 = vPos_24;
      highp float tmpvar_43;
      tmpvar_43 = sqrt(dot (vPos_24, vPos_24));
      highp float fAngle_44;
      fAngle_44 = ((_glesMultiTexCoord2.x * tmpvar_30) * (tmpvar_41.x + (tmpvar_41.y * tmpvar_41.y)));
      highp vec2 vSinCos_45;
      vSinCos_45.x = sin(fAngle_44);
      vSinCos_45.y = cos(fAngle_44);
      highp float tmpvar_46;
      tmpvar_46 = (1.0 - vSinCos_45.y);
      highp mat3 tmpvar_47;
      tmpvar_47[0].x = (((tmpvar_46 * tmpvar_27.x) * tmpvar_27.x) + vSinCos_45.y);
      tmpvar_47[0].y = (((tmpvar_46 * tmpvar_27.x) * tmpvar_27.y) + (vSinCos_45.x * tmpvar_27.z));
      tmpvar_47[0].z = (((tmpvar_46 * tmpvar_27.x) * tmpvar_27.z) - (vSinCos_45.x * tmpvar_27.y));
      tmpvar_47[1].x = (((tmpvar_46 * tmpvar_27.x) * tmpvar_27.y) - (vSinCos_45.x * tmpvar_27.z));
      tmpvar_47[1].y = (((tmpvar_46 * tmpvar_27.y) * tmpvar_27.y) + vSinCos_45.y);
      tmpvar_47[1].z = (((tmpvar_46 * tmpvar_27.y) * tmpvar_27.z) + (vSinCos_45.x * tmpvar_27.x));
      tmpvar_47[2].x = (((tmpvar_46 * tmpvar_27.x) * tmpvar_27.z) + (vSinCos_45.x * tmpvar_27.y));
      tmpvar_47[2].y = (((tmpvar_46 * tmpvar_27.y) * tmpvar_27.z) - (vSinCos_45.x * tmpvar_27.x));
      tmpvar_47[2].z = (((tmpvar_46 * tmpvar_27.z) * tmpvar_27.z) + vSinCos_45.y);
      highp vec3 tmpvar_48;
      tmpvar_48 = ((tmpvar_27.yzx * rotatedWindVector_10.zxy) - (tmpvar_27.zxy * rotatedWindVector_10.yzx));
      vAxis_35.xz = tmpvar_48.xz;
      highp float tmpvar_49;
      tmpvar_49 = clamp (dot (rotatedWindVector_10, tmpvar_27), -1.0, 1.0);
      vAxis_35.y = (tmpvar_48.y + tmpvar_49);
      highp vec3 tmpvar_50;
      tmpvar_50 = normalize(vAxis_35);
      vAxis_35 = tmpvar_50;
      highp float tmpvar_51;
      tmpvar_51 = (1.570796 - (sign(tmpvar_49) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_49))) * (1.570796 + (abs(tmpvar_49) * (-0.2146018 + 
          (abs(tmpvar_49) * (0.08656672 + (abs(tmpvar_49) * -0.03102955)))
        ))))
      )));
      fOsc_36 = (tmpvar_41.y - (tmpvar_41.x * tmpvar_41.x));
      fTwitch_34 = 0.0;
      if (tmpvar_33) {
        highp float fTime_52;
        fTime_52 = (tmpvar_32.z + tmpvar_39);
        highp vec4 tmpvar_53;
        tmpvar_53.zw = vec2(0.0, 0.0);
        tmpvar_53.x = fTime_52;
        tmpvar_53.y = (0.87 * fTime_52);
        highp vec4 tmpvar_54;
        highp vec4 tmpvar_55;
        tmpvar_55 = abs(((
          fract((tmpvar_53 + 0.5))
         * 2.0) - 1.0));
        tmpvar_54 = (((
          (tmpvar_55 * tmpvar_55)
         * 
          (3.0 - (2.0 * tmpvar_55))
        ) - 0.5) * 2.0);
        fTwitch_34 = (tmpvar_32.x * pow (clamp (
          ((((tmpvar_54.x * tmpvar_54.y) * tmpvar_54.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_32.y));
      };
      highp float fAngle_56;
      fAngle_56 = (_glesMultiTexCoord2.x * ((
        (tmpvar_51 * tmpvar_31)
       + 
        (fOsc_36 * tmpvar_29)
      ) + fTwitch_34));
      highp vec2 vSinCos_57;
      vSinCos_57.x = sin(fAngle_56);
      vSinCos_57.y = cos(fAngle_56);
      highp float tmpvar_58;
      tmpvar_58 = (1.0 - vSinCos_57.y);
      highp mat3 tmpvar_59;
      tmpvar_59[0].x = (((tmpvar_58 * tmpvar_50.x) * tmpvar_50.x) + vSinCos_57.y);
      tmpvar_59[0].y = (((tmpvar_58 * tmpvar_50.x) * tmpvar_50.y) + (vSinCos_57.x * tmpvar_50.z));
      tmpvar_59[0].z = (((tmpvar_58 * tmpvar_50.x) * tmpvar_50.z) - (vSinCos_57.x * tmpvar_50.y));
      tmpvar_59[1].x = (((tmpvar_58 * tmpvar_50.x) * tmpvar_50.y) - (vSinCos_57.x * tmpvar_50.z));
      tmpvar_59[1].y = (((tmpvar_58 * tmpvar_50.y) * tmpvar_50.y) + vSinCos_57.y);
      tmpvar_59[1].z = (((tmpvar_58 * tmpvar_50.y) * tmpvar_50.z) + (vSinCos_57.x * tmpvar_50.x));
      tmpvar_59[2].x = (((tmpvar_58 * tmpvar_50.x) * tmpvar_50.z) + (vSinCos_57.x * tmpvar_50.y));
      tmpvar_59[2].y = (((tmpvar_58 * tmpvar_50.y) * tmpvar_50.z) - (vSinCos_57.x * tmpvar_50.x));
      tmpvar_59[2].z = (((tmpvar_58 * tmpvar_50.z) * tmpvar_50.z) + vSinCos_57.y);
      highp mat3 tmpvar_60;
      tmpvar_60 = (tmpvar_47 * tmpvar_59);
      vOriginPos_37 = (normalize((tmpvar_60 * vPos_24)) * tmpvar_43);
      vDirection_21 = (tmpvar_60 * _glesNormal);
      vPos_20 = vOriginPos_37;
    };
    tmpvar_8 = vDirection_21;
    finalPosition_11 = vPos_20;
  };
  finalPosition_11 = (finalPosition_11 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_61;
  tmpvar_61.x = _Object2World[3].x;
  tmpvar_61.y = _Object2World[3].y;
  tmpvar_61.z = _Object2World[3].z;
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = finalPosition_11;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = finalPosition_11;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_61.x + tmpvar_61.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (finalPosition_11 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((rotatedBranchAnchor_9 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_61.x + tmpvar_61.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    finalPosition_11 = vPos_62;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = finalPosition_11;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_91;
    tmpvar_91 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_61.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_61.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    finalPosition_11 = vPos_87;
  };
  tmpvar_7.xyz = finalPosition_11;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_8));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 toLight_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_102;
  tmpvar_102 = dot (tmpvar_101, tmpvar_101);
  toLight_100 = (tmpvar_101 * inversesqrt(tmpvar_102));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, toLight_100))
   * 
    ((1.0/((1.0 + (tmpvar_102 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_100, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_104);
  toLight_103 = (tmpvar_104 * inversesqrt(tmpvar_105));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, toLight_103))
   * 
    ((1.0/((1.0 + (tmpvar_105 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_103, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  toLight_106 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, toLight_106))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_106, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_109;
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  toLight_109 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, toLight_109))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_109, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_95);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
lowp vec3 t10_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
mediump float t16_45;
highp float t46;
highp int ti46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_45 = _WindEnabled * _WindQuality;
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_45)).xy;
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    t31 = dot(t2.xyz, t2.xyz);
    t31 = inversesqrt(t31);
    t2.xyz = vec3(t31) * t2.xyz;
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, vec3(tb1.xxx));
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb31 = in_COLOR0.w==0.0;
    t46 = dot(t3.xyz, t3.xyz);
    t46 = sqrt(t46);
    t4.x = dot(t3.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t4.y = dot(t3.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t4.z = dot(t3.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t47 = dot(t4.xyz, t4.xyz);
    t47 = inversesqrt(t47);
    t4.xyz = vec3(t47) * t4.xyz;
    t4.xyz = vec3(t46) * t4.xyz;
    t3.xyz = (bool(tb31)) ? t4.xyz : t3.xyz;
    tb31 = t16_45<5.0;
    ti16 = int(uint(tb31) * 0xffffffffu & uint(tb1.y) * 0xffffffffu);
    if((uint(ti16))!=uint(0u)){
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb31 = t16_45==4.0;
        tb46 = 0.0<in_TEXCOORD2.w;
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t16.x = t16.x + t4.x;
        t16.x = t16.x + 0.5;
        t16.x = fract(t16.x);
        t16.x = t16.x * 2.0 + -1.0;
        t47 = abs(t16.x) * abs(t16.x);
        t16.x = -abs(t16.x) * 2.0 + 3.0;
        t16.x = t47 * t16.x + -0.5;
        t16.x = dot(t16.xx, t4.yy);
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t4.xyz = fract(t4.xyz);
        t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t4.xyz = t16.xxx * t4.xyz;
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        if(tb31){
            t4 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t4 = fract(t4);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t47 = t4.w * 3.0;
            t6.y = t4.w * 3.0 + t5.x;
            t6.x = t5.x * 0.75 + (-t47);
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t36.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t36.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t47 = dot(t3.xyz, t3.xyz);
            t47 = sqrt(t47);
            t48 = t6.x * t6.x + t6.y;
            t5.x = t5.z * in_TEXCOORD2.x;
            t48 = t48 * t5.x;
            t5.x = sin(t48);
            t7.x = cos(t48);
            t48 = (-t7.x) + 1.0;
            t8 = t4.xxxy * vec4(t48);
            t22.xyz = t4.zxy * t5.xxx;
            t9.xy = t8.zy * t4.zy + t22.zx;
            t10.xy = t8.xw * t4.xy + t7.xx;
            t9.z = t8.w * t4.z + (-t22.y);
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            t11.z = t8.w * t4.z + t22.y;
            t5.x = t4.z * t4.z;
            t11.w = t5.x * t48 + t7.x;
            t7.xyz = t2.yzx * t4.zxy;
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            t17.x = dot(t2.xyz, t4.xyz);
            t17.x = max(t17.x, -1.0);
            t17.x = min(t17.x, 1.0);
            t7.w = t17.x + t7.y;
            t48 = dot(t7.xzw, t7.xzw);
            t48 = inversesqrt(t48);
            t4.xyz = vec3(t48) * t7.zxw;
            t48 = -abs(t17.x) + 1.0;
            t48 = sqrt(t48);
            t5.x = abs(t17.x) * -0.0187292993 + 0.0742610022;
            t5.x = t5.x * abs(t17.x) + -0.212114394;
            t5.x = t5.x * abs(t17.x) + 1.57072878;
            t35 = t48 * t5.x;
            t35 = t35 * -2.0 + 3.14159274;
            tb17 = t17.x<(-t17.x);
            t17.x = tb17 ? t35 : float(0.0);
            t17.x = t5.x * t48 + t17.x;
            t48 = (-t6.y) * t6.y + t6.x;
            t6.x = t4.w * 3.0 + t16.z;
            t6.y = t6.x * 0.870000005;
            t5.xz = t6.xy + vec2(0.5, 0.5);
            t5.xz = fract(t5.xz);
            t5.xz = t5.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xz) * abs(t5.xz);
            t5.xz = -abs(t5.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xz = t6.xy * t5.xz + vec2(-0.5, -0.5);
            t5.xz = t5.xz + t5.xz;
            t46 = t5.z * t5.z;
            t46 = t46 * t5.x + 1.0;
            t46 = t46 * 0.5;
            t46 = clamp(t46, 0.0, 1.0);
            t46 = log2(t46);
            t31 = t46 * t16.y;
            t31 = exp2(t31);
            t46 = t5.y * t48;
            t46 = t17.x * t5.w + t46;
            t16.x = t16.x * t31 + t46;
            t16.x = t16.x * in_TEXCOORD2.x;
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            t16.x = (-t6.x) + 1.0;
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            t5.xyz = t4.xyz * t5.xxx;
            t8.xy = t7.zy * t4.xz + t5.zx;
            t12.xy = t7.xw * t4.yz + t6.xx;
            t8.z = t7.w * t4.x + (-t5.y);
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            t13.z = t7.w * t4.x + t5.y;
            t31 = t4.x * t4.x;
            t8.w = t31 * t16.x + t6.x;
            t10.z = t11.x;
            t10.w = t9.x;
            t12.z = t8.y;
            t12.w = t13.y;
            t4.x = dot(t10.xzw, t12.xzw);
            t13.w = t12.y;
            t4.y = dot(t10.xwz, t13.xzw);
            t4.z = dot(t10.xzw, t8.xzw);
            t9.w = t10.y;
            t5.x = dot(t9.ywz, t12.xzw);
            t5.y = dot(t9.yzw, t13.xzw);
            t5.z = dot(t9.ywz, t8.xzw);
            t6.x = dot(t11.yzw, t12.xzw);
            t6.y = dot(t11.ywz, t13.xzw);
            t6.z = dot(t11.yzw, t8.xzw);
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            t4.x = dot(t4.xyz, t3.xyz);
            t4.y = dot(t5.xyz, t3.xyz);
            t4.z = dot(t6.xyz, t3.xyz);
            t17.x = dot(t4.xyz, t4.xyz);
            t17.x = inversesqrt(t17.x);
            t4.xyz = t17.xxx * t4.xyz;
            t3.xyz = vec3(t47) * t4.xyz;
        } else {
            t16.xyz = in_NORMAL0.xyz;
        //ENDIF
        }
    } else {
        t16.xyz = in_NORMAL0.xyz;
    //ENDIF
    }
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    tb17 = t16_45>=3.0;
    if(tb17){
        tb17 = t16_45==5.0;
        if(tb17){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t17.x = dot(t4.xyz, t4.xyz);
            t17.x = inversesqrt(t17.x);
            t4.xyz = t17.xxx * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t17.x = _Object2World[3].y + _Object2World[3].x;
            t17.x = t17.x + _ST_WindBranch.x;
            t6.x = t17.x + in_TEXCOORD0.w;
            t6.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t47 = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t47 * 0.5;
            t6.w = t6.x + (-in_TEXCOORD0.z);
            t6 = t6 + vec4(0.5, 0.5, 0.5, 1.5);
            t6 = fract(t6);
            t6 = t6 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t6) * abs(t6);
            t6 = -abs(t6) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t6 = t7 * t6 + vec4(-0.5, -0.5, -0.5, -0.5);
            t6 = t6 + t6;
            t7.w = t6.z * t6.y;
            tb47 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb47)) ? t7.xy : t7.zw;
            t47 = (-t6.y) * t6.z + t7.x;
            t47 = t7.y * t47 + t7.w;
            t48 = (-t47) + t7.x;
            t47 = t7.y * t48 + t47;
            t47 = t47 * _ST_WindBranchTwitch.x;
            t48 = (-_ST_WindVector.w) + 1.0;
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            t49 = t49 * t6.x;
            t47 = t47 * t48 + t49;
            t48 = t6.w * _ST_WindBranchWhip.x + 1.0;
            t47 = t47 * t48;
            t5.xyz = vec3(t47) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t17.x * 0.100000001 + in_TEXCOORD0.w;
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t17.x * 0.100000001 + in_TEXCOORD0.w;
            t17.xz = t6.xy + vec2(0.5, 0.5);
            t17.xz = fract(t17.xz);
            t17.xz = t17.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t17.xz) * abs(t17.xz);
            t17.xz = -abs(t17.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t17.xz = t6.xy * t17.xz + vec2(-0.5, -0.5);
            t17.xz = t17.xz + t17.xz;
            t17.xz = t17.xz * t17.xz;
            t17.x = t17.x * t17.z;
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            t47 = t6.w * _ST_WindVector.w;
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = t17.xxx * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t17.x = _Object2World[3].y + _Object2World[3].x;
            t17.x = t17.x + _ST_WindBranch.x;
            t5.x = t17.x + in_TEXCOORD0.w;
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t17.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t6.w = t5.z * t5.y;
            tb17 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t17.xz = (bool(tb17)) ? t6.xy : t6.zw;
            t48 = (-t5.y) * t5.z + t17.x;
            t48 = t17.z * t48 + t6.w;
            t17.x = t17.x + (-t48);
            t17.x = t17.z * t17.x + t48;
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            t47 = (-_ST_WindVector.w) + 1.0;
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            t48 = t48 * t5.x;
            t17.x = t17.x * t47 + t48;
            t4.xyz = t17.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t17.x = dot(t3.xyz, t3.xyz);
    t17.x = sqrt(t17.x);
    t47 = float(1.0) / _ST_WindGlobal.z;
    t47 = (-t47) * 0.25 + t3.y;
    t47 = max(t47, 0.0);
    t47 = t47 * _ST_WindGlobal.z;
    tb48 = t47!=0.0;
    t4.x = log2(t47);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t47 = (tb48) ? t4.x : t47;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t34.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t34.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t48 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    t47 = t47 * t48;
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    t4.y = t3.y;
    t2.x = dot(t4.xyz, t4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xzw = t2.xxx * t4.xyz;
    t2.xyz = t17.xxx * t2.xzw;
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    t3.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    t3.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t3.xyz;
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    t4.xyz = t16.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t16.xxx + t4.xyz;
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * t16.zzz + t1.xyz;
    t46 = dot(t1.xyz, t1.xyz);
    t46 = inversesqrt(t46);
    t1.xyz = vec3(t46) * t1.xyz;
    t10_14.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_14.xyz;
    ti46 = 0x0;
    while(true){
        tb47 = ti46>=0x4;
        if(tb47){break;}
        t5.xyz = (-t3.xyz) * unity_LightPosition[ti46 + 0].www + unity_LightPosition[ti46 + 0].xyz;
        t47 = dot(t5.xyz, t5.xyz);
        t48 = inversesqrt(t47);
        t5.xyz = vec3(t48) * t5.xyz;
        t47 = t47 * unity_LightAtten[ti46 + 0].z + 1.0;
        t47 = float(1.0) / t47;
        t48 = dot(t5.xyz, unity_SpotDirection[ti46 + 0].xyz);
        t48 = max(t48, 0.0);
        t48 = t48 + (-unity_LightAtten[ti46 + 0].x);
        t48 = t48 * unity_LightAtten[ti46 + 0].y;
        t48 = clamp(t48, 0.0, 1.0);
        t47 = t47 * t48;
        t48 = dot(t1.xyz, t5.xyz);
        t48 = max(t48, 0.0);
        t47 = t47 * t48;
        t4.xyz = unity_LightColor[ti46 + 0].xyz * vec3(t47) + t4.xyz;
        ti46 = ti46 + 0x1;
    }
    t1.xyz = t16_0.xyz * t4.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  tmpvar_7 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  finalPosition_12 = tmpvar_1.xyz;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_12 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    highp float tmpvar_16;
    tmpvar_16 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_17[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_17[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_12 = (finalPosition_12 * tmpvar_17);
    finalPosition_12 = (normalize(finalPosition_12) * tmpvar_16);
  };
  if (((tmpvar_13 > 1.0) && (tmpvar_13 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_13 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = finalPosition_12;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (finalPosition_12 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * rotatedWindVector_11.zxy) - (tmpvar_28.zxy * rotatedWindVector_11.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (rotatedWindVector_11, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_9 = vDirection_22;
    finalPosition_12 = vPos_21;
  };
  finalPosition_12 = (finalPosition_12 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_62;
  tmpvar_62.x = _Object2World[3].x;
  tmpvar_62.y = _Object2World[3].y;
  tmpvar_62.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = finalPosition_12;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = finalPosition_12;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_62.x + tmpvar_62.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (finalPosition_12 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((rotatedBranchAnchor_10 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_62.x + tmpvar_62.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    finalPosition_12 = vPos_63;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = finalPosition_12;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_92;
    tmpvar_92 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_62.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_62.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    finalPosition_12 = vPos_88;
  };
  tmpvar_8.xyz = finalPosition_12;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_96;
  highp vec3 viewN_97;
  highp vec3 viewpos_98;
  viewpos_98 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_99;
  tmpvar_99[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_99[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_99[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_97 = normalize((tmpvar_99 * tmpvar_9));
  lowp vec3 tmpvar_100;
  tmpvar_100 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_96 = tmpvar_100;
  highp vec3 toLight_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (unity_LightPosition[0].xyz - (viewpos_98 * unity_LightPosition[0].w));
  highp float tmpvar_103;
  tmpvar_103 = dot (tmpvar_102, tmpvar_102);
  toLight_101 = (tmpvar_102 * inversesqrt(tmpvar_103));
  lightColor_96 = (lightColor_96 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_97, toLight_101))
   * 
    ((1.0/((1.0 + (tmpvar_103 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_101, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[1].xyz - (viewpos_98 * unity_LightPosition[1].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  toLight_104 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_96 = (lightColor_96 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_97, toLight_104))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_104, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[2].xyz - (viewpos_98 * unity_LightPosition[2].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  toLight_107 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_96 = (lightColor_96 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_97, toLight_107))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_107, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[3].xyz - (viewpos_98 * unity_LightPosition[3].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  toLight_110 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_96 = (lightColor_96 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_97, toLight_110))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_110, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_96);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t17;
bvec2 tb17;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t33;
highp int ti33;
highp vec2 t37;
highp vec2 t39;
mediump float t16_48;
highp float t49;
highp int ti49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t1.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t1.x + _Object2World[3].z;
    t33.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t33.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t2.z = t17.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    t16_48 = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_48)).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t49 = dot(t3.xyz, t3.xyz);
    t49 = inversesqrt(t49);
    t3.xyz = vec3(t49) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb49 = in_COLOR0.w==0.0;
    t50 = dot(t4.xyz, t4.xyz);
    t50 = sqrt(t50);
    t5.x = dot(t4.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t5.y = dot(t4.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t5.z = dot(t4.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t51 = dot(t5.xyz, t5.xyz);
    t51 = inversesqrt(t51);
    t5.xyz = vec3(t51) * t5.xyz;
    t5.xyz = vec3(t50) * t5.xyz;
    t4.xyz = (bool(tb49)) ? t5.xyz : t4.xyz;
    tb49 = t16_48<5.0;
    ti33 = int(uint(tb49) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti33))!=uint(0u)){
        t33.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb49 = t16_48==4.0;
        tb50 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb50)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t33.x = t33.x + t5.x;
        t33.x = t33.x + 0.5;
        t33.x = fract(t33.x);
        t33.x = t33.x * 2.0 + -1.0;
        t51 = abs(t33.x) * abs(t33.x);
        t33.x = -abs(t33.x) * 2.0 + 3.0;
        t33.x = t51 * t33.x + -0.5;
        t33.x = dot(t33.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t33.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb49){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb50)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb50)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t33.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t33.x);
            t33.xy = t8.xy + vec2(0.5, 0.5);
            t33.xy = fract(t33.xy);
            t33.xy = t33.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t33.xy) * abs(t33.xy);
            t33.xy = -abs(t33.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t33.xy = t8.xy * t33.xy + vec2(-0.5, -0.5);
            t33.xy = t33.xy + t33.xy;
            t50 = dot(t4.xyz, t4.xyz);
            t50 = sqrt(t50);
            t51 = t33.x * t33.x + t33.y;
            t52 = t6.z * in_TEXCOORD2.x;
            t51 = t51 * t52;
            t6.x = sin(t51);
            t8.x = cos(t51);
            t51 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t51);
            t24.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t24.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t24.y);
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            t12.z = t9.w * t5.z + t24.y;
            t52 = t5.z * t5.z;
            t12.w = t52 * t51 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t19 = dot(t3.xyz, t5.xyz);
            t19 = max(t19, -1.0);
            t19 = min(t19, 1.0);
            t8.w = t19 + t8.y;
            t51 = dot(t8.xzw, t8.xzw);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t8.zxw;
            t51 = -abs(t19) + 1.0;
            t51 = sqrt(t51);
            t52 = abs(t19) * -0.0187292993 + 0.0742610022;
            t52 = t52 * abs(t19) + -0.212114394;
            t52 = t52 * abs(t19) + 1.57072878;
            t6.x = t51 * t52;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb19 = t19<(-t19);
            t19 = tb19 ? t6.x : float(0.0);
            t19 = t52 * t51 + t19;
            t33.x = (-t33.y) * t33.y + t33.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t39.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t49 = t6.z * t6.z;
            t49 = t49 * t6.x + 1.0;
            t49 = t49 * 0.5;
            t49 = clamp(t49, 0.0, 1.0);
            t49 = log2(t49);
            t49 = t49 * t7.y;
            t49 = exp2(t49);
            t33.x = t6.y * t33.x;
            t33.x = t19 * t6.w + t33.x;
            t33.x = t7.x * t49 + t33.x;
            t33.x = t33.x * in_TEXCOORD2.x;
            t6.x = sin(t33.x);
            t7.x = cos(t33.x);
            t33.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t33.x, t5.y * t33.x, t5.y * t33.x, t5.z * t33.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t49 = t5.x * t5.x;
            t9.w = t49 * t33.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t33.x = dot(t5.xyz, in_NORMAL0.xyz);
            t33.y = dot(t6.xyz, in_NORMAL0.xyz);
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t51 = dot(t5.xyz, t5.xyz);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t5.xyz;
            t4.xyz = vec3(t50) * t5.xyz;
        } else {
            t33.xy = in_NORMAL0.xy;
            t19 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t33.xy = in_NORMAL0.xy;
        t19 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb50 = t16_48>=3.0;
    if(tb50){
        tb50 = t16_48==5.0;
        if(tb50){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t50 = dot(t5.xyz, t5.xyz);
            t50 = inversesqrt(t50);
            t5.xyz = vec3(t50) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t50 = t1.x + _ST_WindBranch.x;
            t7.x = t50 + in_TEXCOORD0.w;
            t7.y = t50 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t51 = t7.x * _ST_WindBranchTwitch.y;
            t7.z = t51 * 0.5;
            t7.w = t7.x + (-in_TEXCOORD0.z);
            t7 = t7 + vec4(0.5, 0.5, 0.5, 1.5);
            t7 = fract(t7);
            t7 = t7 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t8 = abs(t7) * abs(t7);
            t7 = -abs(t7) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t7 = t8 * t7 + vec4(-0.5, -0.5, -0.5, -0.5);
            t7 = t7 + t7;
            t8.w = t7.z * t7.y;
            tb51 = t8.w<0.0;
            t8.y = (-t8.w);
            t8.xz = vec2(-1.0, 1.0);
            t8.xy = (bool(tb51)) ? t8.xy : t8.zw;
            t51 = (-t7.y) * t7.z + t8.x;
            t51 = t8.y * t51 + t8.w;
            t52 = (-t51) + t8.x;
            t51 = t8.y * t52 + t51;
            t51 = t51 * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            t53 = t53 * t7.x;
            t51 = t51 * t52 + t53;
            t52 = t7.w * _ST_WindBranchWhip.x + 1.0;
            t51 = t51 * t52;
            t6.xyz = vec3(t51) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t50 * 0.100000001 + in_TEXCOORD0.w;
            t50 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t50 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t8.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t50 = t7.x * t7.y;
            t50 = (-t50) * _ST_WindTurbulences.x + 1.0;
            t51 = t7.w * _ST_WindVector.w;
            t50 = t51 * _ST_WindBranchWhip.x + t50;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t50) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t1.x = t1.x + _ST_WindBranch.x;
            t6.x = t1.x + in_TEXCOORD0.w;
            t6.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t1.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t1.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t7.w = t6.z * t6.y;
            tb1 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb1)) ? t7.xy : t7.zw;
            t1.x = (-t6.y) * t6.z + t7.x;
            t1.x = t7.y * t1.x + t7.w;
            t50 = (-t1.x) + t7.x;
            t1.x = t7.y * t50 + t1.x;
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            t50 = (-_ST_WindVector.w) + 1.0;
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            t51 = t51 * t6.x;
            t1.x = t1.x * t50 + t51;
            t5.xyz = t1.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t1.x = dot(t4.xyz, t4.xyz);
    t1.x = sqrt(t1.x);
    t50 = float(1.0) / _ST_WindGlobal.z;
    t50 = (-t50) * 0.25 + t4.y;
    t50 = max(t50, 0.0);
    t50 = t50 * _ST_WindGlobal.z;
    tb51 = t50!=0.0;
    t52 = log2(t50);
    t52 = t52 * _ST_WindGlobal.w;
    t52 = exp2(t52);
    t50 = (tb51) ? t52 : t50;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t37.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t37.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t51 = t5.y * t5.y + t5.x;
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t51 = _ST_WindGlobal.y * t51 + t52;
    t50 = t50 * t51;
    t5.xz = t3.xz * vec2(t50) + t4.xz;
    t5.y = t4.y;
    t50 = dot(t5.xyz, t5.xyz);
    t50 = inversesqrt(t50);
    t3.xzw = vec3(t50) * t5.xyz;
    t3.xzw = t1.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t4.xyz = t3.zzz * glstate_matrix_modelview0[1].xyz;
    t4.xyz = glstate_matrix_modelview0[0].xyz * t3.xxx + t4.xyz;
    t4.xyz = glstate_matrix_modelview0[2].xyz * t3.www + t4.xyz;
    t4.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t4.xyz;
    t1.xyw = t33.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t33.xxx + t1.xyw;
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * vec3(t19) + t1.xyz;
    t49 = dot(t1.xyz, t1.xyz);
    t49 = inversesqrt(t49);
    t1.xyz = vec3(t49) * t1.xyz;
    t10_15.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t5.xyz = t10_15.xyz;
    ti49 = 0x0;
    while(true){
        tb50 = ti49>=0x4;
        if(tb50){break;}
        t6.xyz = (-t4.xyz) * unity_LightPosition[ti49 + 0].www + unity_LightPosition[ti49 + 0].xyz;
        t50 = dot(t6.xyz, t6.xyz);
        t19 = inversesqrt(t50);
        t6.xyz = vec3(t19) * t6.xyz;
        t50 = t50 * unity_LightAtten[ti49 + 0].z + 1.0;
        t50 = float(1.0) / t50;
        t19 = dot(t6.xyz, unity_SpotDirection[ti49 + 0].xyz);
        t19 = max(t19, 0.0);
        t19 = t19 + (-unity_LightAtten[ti49 + 0].x);
        t19 = t19 * unity_LightAtten[ti49 + 0].y;
        t19 = clamp(t19, 0.0, 1.0);
        t50 = t50 * t19;
        t19 = dot(t1.xyz, t6.xyz);
        t19 = max(t19, 0.0);
        t50 = t50 * t19;
        t5.xyz = unity_LightColor[ti49 + 0].xyz * vec3(t50) + t5.xyz;
        ti49 = ti49 + 0x1;
    }
    t1.xyz = t16_0.xyz * t5.xyz;
    t0 = t3.zzzz * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t3.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t3.wwww + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD1.w = _Color.w;
    t2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.xyz = t2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb2 = t10_1<0.0;
    if((int(tb2) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    t16_0.w = t10_0.w * _Color.w;
    t16_4 = max(t16_8.z, t16_8.y);
    t16_4 = max(t16_8.x, t16_4);
    t16_3.x = t16_3.x / t16_4;
    t16_2 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_7;
  highp vec3 rotatedWindVector_8;
  highp vec3 finalPosition_9;
  finalPosition_9 = tmpvar_1.xyz;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    rotatedWindVector_8 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_7 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_9 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_13;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_13;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (tmpvar_13 + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((rotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    finalPosition_9 = vPos_15;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = finalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (finalPosition_9, finalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((finalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (finalPosition_9.xz + (rotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    finalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = finalPosition_9;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_48;
  highp vec3 viewN_49;
  highp vec3 viewpos_50;
  viewpos_50 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_51[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_51[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_49 = normalize((tmpvar_51 * _glesNormal));
  lowp vec3 tmpvar_52;
  tmpvar_52 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_48 = tmpvar_52;
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_50 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_48 = (lightColor_48 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_49, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_50 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_48 = (lightColor_48 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_49, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_50 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_48 = (lightColor_48 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_49, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_50 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_48 = (lightColor_48 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_49, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = tmpvar_1;
  tmpvar_5.w = tmpvar_2;
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_24 = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_24;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    tb25 = t16_24>=3.0;
    if(tb25){
        tb25 = t16_24==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t5.x = t25 + in_TEXCOORD0.w;
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t26 * 0.5;
            t5.w = t5.x + (-in_TEXCOORD0.z);
            t5 = t5 + vec4(0.5, 0.5, 0.5, 1.5);
            t5 = fract(t5);
            t5 = t5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t5) * abs(t5);
            t5 = -abs(t5) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t5 = t6 * t5 + vec4(-0.5, -0.5, -0.5, -0.5);
            t5 = t5 + t5;
            t6.w = t5.z * t5.y;
            tb26 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            t26 = (-t5.y) * t5.z + t6.x;
            t26 = t6.y * t26 + t6.w;
            t27 = (-t26) + t6.x;
            t26 = t6.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t28 * t5.x;
            t26 = t26 * t27 + t28;
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t6.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t6.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t5.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t5.w = t4.z * t4.y;
            tb25 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t5.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = inversesqrt(t25);
    t3.xyz = vec3(t25) * t3.xyz;
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0);
    t4.xyz = t10_7.xyz;
    ti25 = 0x0;
    while(true){
        tb26 = ti25>=0x4;
        if(tb26){break;}
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        t26 = dot(t5.xyz, t5.xyz);
        t27 = inversesqrt(t26);
        t5.xyz = vec3(t27) * t5.xyz;
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        t26 = float(1.0) / t26;
        t27 = dot(t5.xyz, unity_SpotDirection[ti25 + 0].xyz);
        t27 = max(t27, 0.0);
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        t26 = t26 * t27;
        t27 = dot(t3.xyz, t5.xyz);
        t27 = max(t27, 0.0);
        t26 = t26 * t27;
        t4.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t4.xyz;
        ti25 = ti25 + 0x1;
    }
    t2.xyz = t16_0.xyz * t4.xyz;
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    vs_TEXCOORD1.xyz = t2.xyz;
    vs_TEXCOORD1.w = _Color.w;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD2.z = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    t16_1.w = t10_0.w * _Color.w;
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    SV_Target0 = t16_1;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  tmpvar_6 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_8;
  highp vec3 rotatedWindVector_9;
  highp vec3 finalPosition_10;
  finalPosition_10 = tmpvar_1.xyz;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    rotatedWindVector_9 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_8 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_9 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_8 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  finalPosition_10 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_16;
    vPos_16 = tmpvar_14;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_17;
      vPos_17 = tmpvar_14;
      highp float fTime_18;
      highp float fAdherenceScale_19;
      highp vec3 vWindVector_20;
      vWindVector_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_18 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_21;
      highp float fOscillation_22;
      fOscillation_22 = 1.0;
      highp float fAmount_23;
      highp float fTarget_24;
      highp vec4 tmpvar_25;
      tmpvar_25.x = (fTime_18 + _glesMultiTexCoord0.w);
      tmpvar_25.y = ((fTime_18 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_25.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_18 + _glesMultiTexCoord0.w));
      tmpvar_25.w = ((fTime_18 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_25 + 0.5))
       * 2.0) - 1.0));
      vOscillations_21 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      highp float tmpvar_27;
      tmpvar_27 = (vOscillations_21.y * vOscillations_21.z);
      fTarget_24 = 1.0;
      fAmount_23 = tmpvar_27;
      if ((tmpvar_27 < 0.0)) {
        fTarget_24 = -1.0;
        fAmount_23 = -(tmpvar_27);
      };
      fOscillation_22 = (((
        mix (mix (tmpvar_27, fTarget_24, fAmount_23), fTarget_24, fAmount_23)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_21.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_22 = (fOscillation_22 * (1.0 + (vOscillations_21.w * _ST_WindBranchWhip.x)));
      vPos_17 = (tmpvar_14 + ((vWindVector_20 * fOscillation_22) * _ST_WindBranch.y));
      highp vec4 tmpvar_28;
      tmpvar_28.zw = vec2(0.0, 0.0);
      tmpvar_28.x = ((fTime_18 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_28.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_29;
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      tmpvar_29 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((tmpvar_29.x * tmpvar_29.y) * (
        (tmpvar_29.x * tmpvar_29.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_21.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_17 = (vPos_17 + ((
        ((rotatedBranchAnchor_8 - vPos_17) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_16 = vPos_17;
    } else {
      highp vec3 vPos_31;
      vPos_31 = vPos_16;
      highp float fTime_32;
      highp vec3 vWindVector_33;
      vWindVector_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_32 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_34;
      highp float fOscillation_35;
      fOscillation_35 = 1.0;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (fTime_32 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((fTime_32 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_32 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      fOscillation_35 = (((
        mix (mix (tmpvar_40, fTarget_37, fAmount_36), fTarget_37, fAmount_36)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_34.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_31 = (vPos_16 + ((vWindVector_33 * fOscillation_35) * _ST_WindBranch.y));
      vPos_16 = vPos_31;
    };
    finalPosition_10 = vPos_16;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = finalPosition_10;
    highp float fMoveAmount_42;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (finalPosition_10, finalPosition_10));
    highp float tmpvar_45;
    tmpvar_45 = (max ((finalPosition_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    fMoveAmount_42 = ((_ST_WindGlobal.y * (tmpvar_47.x + 
      (tmpvar_47.y * tmpvar_47.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_42 = (fMoveAmount_42 * fAdjust_43);
    vPos_41.xz = (finalPosition_10.xz + (rotatedWindVector_9.xz * fMoveAmount_42));
    vPos_41 = (normalize(vPos_41) * fLength_44);
    finalPosition_10 = vPos_41;
  };
  tmpvar_7.xyz = finalPosition_10;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 toLight_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_55);
  toLight_54 = (tmpvar_55 * inversesqrt(tmpvar_56));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, toLight_54))
   * 
    ((1.0/((1.0 + (tmpvar_56 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_54, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  toLight_57 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, toLight_57))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_57, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  toLight_60 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, toLight_60))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_60, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  toLight_63 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, toLight_63))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_63, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_49);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    t1.x = _Object2World[3].y + _Object2World[3].x;
    t10.x = t1.x + _Object2World[3].z;
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    t10.y = t19.x + in_NORMAL0.x;
    t10.xy = fract(t10.xy);
    t10.x = t10.y * 0.5 + t10.x;
    t10.x = t10.x + -0.300000012;
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    t16_27 = _WindEnabled * _WindQuality;
    tb10 = 0.0<t16_27;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t19.x = dot(t3.xyz, t3.xyz);
    t19.x = inversesqrt(t19.x);
    t19.xy = t19.xx * t3.xz;
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, vec2(bvec2(tb10)));
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    tb29 = t16_27>=3.0;
    if(tb29){
        tb29 = t16_27==5.0;
        if(tb29){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t29 = dot(t4.xyz, t4.xyz);
            t29 = inversesqrt(t29);
            t4.xyz = vec3(t29) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t29 = t1.x + _ST_WindBranch.x;
            t6.x = t29 + in_TEXCOORD0.w;
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t30 * 0.5;
            t6.w = t6.x + (-in_TEXCOORD0.z);
            t6 = t6 + vec4(0.5, 0.5, 0.5, 1.5);
            t6 = fract(t6);
            t6 = t6 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t6) * abs(t6);
            t6 = -abs(t6) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t6 = t7 * t6 + vec4(-0.5, -0.5, -0.5, -0.5);
            t6 = t6 + t6;
            t7.w = t6.z * t6.y;
            tb30 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            t30 = (-t6.y) * t6.z + t7.x;
            t30 = t7.y * t30 + t7.w;
            t31 = (-t30) + t7.x;
            t30 = t7.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            t32 = t32 * t6.x;
            t30 = t30 * t31 + t32;
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t5.xyz = vec3(t30) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t29 * 0.100000001 + in_TEXCOORD0.w;
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t29 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t7.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t7.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t29 = t6.x * t6.y;
            t29 = (-