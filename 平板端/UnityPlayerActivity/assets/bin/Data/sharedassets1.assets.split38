col_50 = (col_50 + (lightColor2_46 * tmpvar_57.z));
  col_50 = (col_50 + (lightColor3_47 * tmpvar_57.w));
  tmpvar_5 = ((x2_42 + (unity_SHC.xyz * 
    ((normal_41.x * normal_41.x) - (normal_41.y * normal_41.y))
  )) + col_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
highp vec2 t8;
bool tb8;
highp vec2 t14;
highp float t21;
highp uint tu21;
highp float t22;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t14.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_TEXCOORD0.x + -0.5;
    t21 = in_COLOR0.w * 255.0;
    tu21 = uint(t21);
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    t14.x = t14.x * in_TEXCOORD1.x;
    t1.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    t1.w = t14.x * in_TEXCOORD1.y + t1.y;
    t7 = (-t7) * 0.25 + t1.w;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t14.x = log2(t7);
    t14.x = t14.x * _ST_WindGlobal.w;
    t14.x = exp2(t14.x);
    tb8 = t7!=0.0;
    t7 = (tb8) ? t14.x : t7;
    t0.x = t7 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t8.x = dot(t0.xyz, t0.xyz);
    t8.x = inversesqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t8.x = dot(t1.xzw, t1.xzw);
    t8.x = sqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t0.xyz = (bool(tb8)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = t0.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t0.x;
    t1.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t1.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t1.xyz;
    t1.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t1.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t3;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t3;
    t22 = dot(t2.xyw, t2.xyw);
    t22 = inversesqrt(t22);
    t2 = vec4(t22) * t2;
    t10_4.xyz = t1.xyz * t2.wxy;
    t10_4.xyz = t2.ywx * t1.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.x = t1.z;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD1.x = t1.x;
    vs_TEXCOORD2.x = t1.y;
    vs_TEXCOORD1.w = t0.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    vs_TEXCOORD2.w = t0.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu21) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu21) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t21 = t1.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    tu21 = uint(t21);
    tb1 = _ImageTexCoords[int(tu21) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu21) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu21) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu21) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu21) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t1 = (-t0.xxxx) + unity_4LightPosX0;
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    t4 = t2.yyyy * t3;
    t3 = t3 * t3;
    t3 = t1 * t1 + t3;
    t1 = t1 * t2.xxxx + t4;
    t1 = t0 * t2.wwww + t1;
    t0 = t0 * t0 + t3;
    t3 = inversesqrt(t0);
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    t1 = t1 * t3;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t0 * t1;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t2.y * t2.y;
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    t16_1 = t2.ywzx * t2;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_22.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_2 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_2.x;
  tmpvar_38.y = tmpvar_37.x;
  tmpvar_38.z = worldNormal_3.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.y;
  tmpvar_39.y = tmpvar_37.y;
  tmpvar_39.z = worldNormal_3.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_2.z;
  tmpvar_40.y = tmpvar_37.z;
  tmpvar_40.z = worldNormal_3.z;
  tmpvar_40.w = tmpvar_29.z;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_3;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  highp vec3 lightColor0_45;
  lightColor0_45 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_46;
  lightColor1_46 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_47;
  lightColor2_47 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_48;
  lightColor3_48 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_49;
  lightAttenSq_49 = unity_4LightAtten0;
  highp vec3 normal_50;
  normal_50 = worldNormal_3;
  highp vec3 col_51;
  highp vec4 ndotl_52;
  highp vec4 lengthSq_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosZ0 - tmpvar_29.z);
  lengthSq_53 = (tmpvar_54 * tmpvar_54);
  lengthSq_53 = (lengthSq_53 + (tmpvar_55 * tmpvar_55));
  lengthSq_53 = (lengthSq_53 + (tmpvar_56 * tmpvar_56));
  ndotl_52 = (tmpvar_54 * normal_50.x);
  ndotl_52 = (ndotl_52 + (tmpvar_55 * normal_50.y));
  ndotl_52 = (ndotl_52 + (tmpvar_56 * normal_50.z));
  highp vec4 tmpvar_57;
  tmpvar_57 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_52 * inversesqrt(lengthSq_53)));
  ndotl_52 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_57 * (1.0/((1.0 + 
    (lengthSq_53 * lightAttenSq_49)
  ))));
  col_51 = (lightColor0_45 * tmpvar_58.x);
  col_51 = (col_51 + (lightColor1_46 * tmpvar_58.y));
  col_51 = (col_51 + (lightColor2_47 * tmpvar_58.z));
  col_51 = (col_51 + (lightColor3_48 * tmpvar_58.w));
  tmpvar_5 = ((x2_43 + (unity_SHC.xyz * 
    ((normal_42.x * normal_42.x) - (normal_42.y * normal_42.y))
  )) + col_51);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_4;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_5.xyz = c_25.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_28;
  tmpvar_28 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = _Object2World[0].xyz;
  tmpvar_33[1] = _Object2World[1].xyz;
  tmpvar_33[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((tmpvar_33 * _BillboardTangent));
  worldTangent_2 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_37;
  tmpvar_37.x = worldTangent_2.x;
  tmpvar_37.y = tmpvar_36.x;
  tmpvar_37.z = worldNormal_3.x;
  tmpvar_37.w = tmpvar_28.x;
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_2.y;
  tmpvar_38.y = tmpvar_36.y;
  tmpvar_38.z = worldNormal_3.y;
  tmpvar_38.w = tmpvar_28.y;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.z;
  tmpvar_39.y = tmpvar_36.z;
  tmpvar_39.z = worldNormal_3.z;
  tmpvar_39.w = tmpvar_28.z;
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_3;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_4;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_5.xyz = c_24.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
highp float t7;
highp vec2 t8;
bool tb8;
highp vec2 t14;
highp float t21;
highp uint tu21;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t14.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_TEXCOORD0.x + -0.5;
    t21 = in_COLOR0.w * 255.0;
    tu21 = uint(t21);
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    t14.x = t14.x * in_TEXCOORD1.x;
    t1.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    t1.w = t14.x * in_TEXCOORD1.y + t1.y;
    t7 = (-t7) * 0.25 + t1.w;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t14.x = log2(t7);
    t14.x = t14.x * _ST_WindGlobal.w;
    t14.x = exp2(t14.x);
    tb8 = t7!=0.0;
    t7 = (tb8) ? t14.x : t7;
    t0.x = t7 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t8.x = dot(t0.xyz, t0.xyz);
    t8.x = inversesqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t8.x = dot(t1.xzw, t1.xzw);
    t8.x = sqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t0.xyz = (bool(tb8)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t3;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t3;
    t1.x = dot(t2.xyw, t2.xyw);
    t1.x = inversesqrt(t1.x);
    t2 = t1.xxxx * t2;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_4.xyz = t2.wxy * t3.xyz;
    t10_4.xyz = t2.ywx * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu21) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu21) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t21 = t1.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    tu21 = uint(t21);
    tb1 = _ImageTexCoords[int(tu21) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu21) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu21) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu21) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu21) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t16_5 = t2.y * t2.y;
    t16_5 = t2.x * t2.x + (-t16_5);
    t16_1 = t2.ywzx * t2;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    t1 = t0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.zzzz + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    vec3 txVec89 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec89, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_22.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_2 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_2.x;
  tmpvar_38.y = tmpvar_37.x;
  tmpvar_38.z = worldNormal_3.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.y;
  tmpvar_39.y = tmpvar_37.y;
  tmpvar_39.z = worldNormal_3.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_2.z;
  tmpvar_40.y = tmpvar_37.z;
  tmpvar_40.z = worldNormal_3.z;
  tmpvar_40.w = tmpvar_29.z;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_3;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  highp vec3 lightColor0_45;
  lightColor0_45 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_46;
  lightColor1_46 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_47;
  lightColor2_47 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_48;
  lightColor3_48 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_49;
  lightAttenSq_49 = unity_4LightAtten0;
  highp vec3 normal_50;
  normal_50 = worldNormal_3;
  highp vec3 col_51;
  highp vec4 ndotl_52;
  highp vec4 lengthSq_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosZ0 - tmpvar_29.z);
  lengthSq_53 = (tmpvar_54 * tmpvar_54);
  lengthSq_53 = (lengthSq_53 + (tmpvar_55 * tmpvar_55));
  lengthSq_53 = (lengthSq_53 + (tmpvar_56 * tmpvar_56));
  ndotl_52 = (tmpvar_54 * normal_50.x);
  ndotl_52 = (ndotl_52 + (tmpvar_55 * normal_50.y));
  ndotl_52 = (ndotl_52 + (tmpvar_56 * normal_50.z));
  highp vec4 tmpvar_57;
  tmpvar_57 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_52 * inversesqrt(lengthSq_53)));
  ndotl_52 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_57 * (1.0/((1.0 + 
    (lengthSq_53 * lightAttenSq_49)
  ))));
  col_51 = (lightColor0_45 * tmpvar_58.x);
  col_51 = (col_51 + (lightColor1_46 * tmpvar_58.y));
  col_51 = (col_51 + (lightColor2_47 * tmpvar_58.z));
  col_51 = (col_51 + (lightColor3_48 * tmpvar_58.w));
  tmpvar_5 = ((x2_43 + (unity_SHC.xyz * 
    ((normal_42.x * normal_42.x) - (normal_42.y * normal_42.y))
  )) + col_51);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_4;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_5.xyz = c_24.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp float t8;
highp float t9;
bool tb9;
highp vec2 t16;
highp vec2 t19;
highp float t24;
highp uint tu24;
highp float t25;
bool tb25;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t16.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_TEXCOORD0.x + -0.5;
    t24 = in_COLOR0.w * 255.0;
    tu24 = uint(t24);
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    t16.x = t16.x * in_TEXCOORD1.x;
    t1.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    t1.w = t16.x * in_TEXCOORD1.y + t1.y;
    t8 = (-t8) * 0.25 + t1.w;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t16.x = log2(t8);
    t16.x = t16.x * _ST_WindGlobal.w;
    t16.x = exp2(t16.x);
    tb9 = t8!=0.0;
    t8 = (tb9) ? t16.x : t8;
    t0.x = t8 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    t0.xyz = t0.xyz * vec3(t9);
    t9 = dot(t1.xzw, t1.xzw);
    t9 = sqrt(t9);
    t0.xyz = t0.xyz * vec3(t9);
    t16_2.x = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2.x;
    t0.xyz = (bool(tb9)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = inversesqrt(t25);
    t3.xyz = vec3(t25) * t3.xyz;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t4;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t4;
    t25 = dot(t2.xyw, t2.xyw);
    t25 = inversesqrt(t25);
    t2 = vec4(t25) * t2;
    t10_5.xyz = t3.xyz * t2.wxy;
    t10_5.xyz = t2.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t25 = in_TEXCOORD1.z + _CameraXZAngle;
    t25 = t25 * _TreeInfo[int(tu24) + 0].y + 0.5;
    t25 = floor(t25);
    t25 = t25 / _TreeInfo[int(tu24) + 0].x;
    tb3 = t25>=(-t25);
    t25 = fract(abs(t25));
    t25 = (tb3) ? t25 : (-t25);
    t24 = t25 * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    tu24 = uint(t24);
    tb25 = _ImageTexCoords[int(tu24) + 0].w<0.0;
    t3.xy = (-_ImageTexCoords[int(tu24) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu24) + 0].xy;
    t19.xy = _ImageTexCoords[int(tu24) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu24) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb25)) ? t3.xy : t19.xy;
    vs_TEXCOORD4.z = 0.0;
    t3 = (-t1.xxxx) + unity_4LightPosX0;
    t4 = (-t1.yyyy) + unity_4LightPosY0;
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    t5 = t2.yyyy * t4;
    t4 = t4 * t4;
    t4 = t3 * t3 + t4;
    t3 = t3 * t2.xxxx + t5;
    t3 = t1 * t2.wwww + t3;
    t1 = t1 * t1 + t4;
    t4 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t3 = t3 * t4;
    t3 = max(t3, vec4(0.0, 0.0, 0.0, 0.0));
    t1 = t1 * t3;
    t3.xyz = t1.yyy * unity_LightColor[1].xyz;
    t3.xyz = unity_LightColor[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t3.xyz;
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    t16_6.x = t2.y * t2.y;
    t16_6.x = t2.x * t2.x + (-t16_6.x);
    t16_2 = t2.ywzx * t2;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t1.xyz = t1.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t1.xyz;
    t1 = t0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.zzzz + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    vec3 txVec90 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec90, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_28;
  tmpvar_28 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = _Object2World[0].xyz;
  tmpvar_33[1] = _Object2World[1].xyz;
  tmpvar_33[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((tmpvar_33 * _BillboardTangent));
  worldTangent_2 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_37;
  tmpvar_37.x = worldTangent_2.x;
  tmpvar_37.y = tmpvar_36.x;
  tmpvar_37.z = worldNormal_3.x;
  tmpvar_37.w = tmpvar_28.x;
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_2.y;
  tmpvar_38.y = tmpvar_36.y;
  tmpvar_38.z = worldNormal_3.y;
  tmpvar_38.w = tmpvar_28.y;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.z;
  tmpvar_39.y = tmpvar_36.z;
  tmpvar_39.z = worldNormal_3.z;
  tmpvar_39.w = tmpvar_28.z;
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_3;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
bool tb7;
highp float t8;
highp vec2 t14;
highp vec2 t15;
highp uint tu15;
highp float t21;
bool tb21;
bool tb22;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t15.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t15.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t21 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t21 = _ST_WindGlobal.y * t21 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t8 = in_TEXCOORD0.x + -0.5;
    t15.x = in_COLOR0.w * 255.0;
    tu15 = uint(t15.x);
    t8 = t8 * _TreeSize[int(tu15) + 0].x;
    t8 = t8 * in_TEXCOORD1.x;
    t2.xyz = vec3(t8) * _BillboardTangent.xyzx.xyz;
    t8 = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t2.w = t8 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t8 = log2(t1.x);
    t8 = t8 * _ST_WindGlobal.w;
    t8 = exp2(t8);
    tb22 = t1.x!=0.0;
    t1.x = (tb22) ? t8 : t1.x;
    t21 = t21 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t21) + t2.xz;
    t3.y = t2.w;
    t21 = dot(t3.xyz, t3.xyz);
    t21 = inversesqrt(t21);
    t1.xyw = vec3(t21) * t3.xyz;
    t21 = dot(t2.xzw, t2.xzw);
    t21 = sqrt(t21);
    t1.xyw = vec3(t21) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb21 = 0.0<t16_4;
    t1.xyw = (bool(tb21)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyw = _Object2World[2].xyz * t1.www + t2.xyz;
    t1.xyw = t1.xyw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t3;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t3;
    t21 = dot(t2.xyw, t2.xyw);
    t21 = inversesqrt(t21);
    t2 = vec4(t21) * t2;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t21 = dot(t3.xyz, t3.xyz);
    t21 = inversesqrt(t21);
    t3.xyz = vec3(t21) * t3.xyz;
    t10_5.xyz = t2.wxy * t3.xyz;
    t10_5.xyz = t2.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD2.w = t1.w;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu15) + 0].x;
    tb7 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb7) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu0 = uint(t0.x);
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb7)) ? t14.xy : t1.xy;
    t16_4 = t2.y * t2.y;
    t16_4 = t2.x * t2.x + (-t16_4);
    t16_0 = t2.ywzx * t2;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_4) + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_2 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_2.x;
  tmpvar_38.y = tmpvar_37.x;
  tmpvar_38.z = worldNormal_3.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.y;
  tmpvar_39.y = tmpvar_37.y;
  tmpvar_39.z = worldNormal_3.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_2.z;
  tmpvar_40.y = tmpvar_37.z;
  tmpvar_40.z = worldNormal_3.z;
  tmpvar_40.w = tmpvar_29.z;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_3;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_43 + (unity_SHC.xyz * (
    (normal_42.x * normal_42.x)
   - 
    (normal_42.y * normal_42.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_2 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_2.x;
  tmpvar_38.y = tmpvar_37.x;
  tmpvar_38.z = worldNormal_3.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.y;
  tmpvar_39.y = tmpvar_37.y;
  tmpvar_39.z = worldNormal_3.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_2.z;
  tmpvar_40.y = tmpvar_37.z;
  tmpvar_40.z = worldNormal_3.z;
  tmpvar_40.w = tmpvar_29.z;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_3;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  highp vec3 lightColor0_45;
  lightColor0_45 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_46;
  lightColor1_46 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_47;
  lightColor2_47 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_48;
  lightColor3_48 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_49;
  lightAttenSq_49 = unity_4LightAtten0;
  highp vec3 normal_50;
  normal_50 = worldNormal_3;
  highp vec3 col_51;
  highp vec4 ndotl_52;
  highp vec4 lengthSq_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosX0 - tmpvar_29.x);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosY0 - tmpvar_29.y);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosZ0 - tmpvar_29.z);
  lengthSq_53 = (tmpvar_54 * tmpvar_54);
  lengthSq_53 = (lengthSq_53 + (tmpvar_55 * tmpvar_55));
  lengthSq_53 = (lengthSq_53 + (tmpvar_56 * tmpvar_56));
  ndotl_52 = (tmpvar_54 * normal_50.x);
  ndotl_52 = (ndotl_52 + (tmpvar_55 * normal_50.y));
  ndotl_52 = (ndotl_52 + (tmpvar_56 * normal_50.z));
  highp vec4 tmpvar_57;
  tmpvar_57 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_52 * inversesqrt(lengthSq_53)));
  ndotl_52 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_57 * (1.0/((1.0 + 
    (lengthSq_53 * lightAttenSq_49)
  ))));
  col_51 = (lightColor0_45 * tmpvar_58.x);
  col_51 = (col_51 + (lightColor1_46 * tmpvar_58.y));
  col_51 = (col_51 + (lightColor2_47 * tmpvar_58.z));
  col_51 = (col_51 + (lightColor3_48 * tmpvar_58.w));
  tmpvar_5 = ((x2_43 + (unity_SHC.xyz * 
    ((normal_42.x * normal_42.x) - (normal_42.y * normal_42.y))
  )) + col_51);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
bool tb8;
highp float t9;
highp vec2 t16;
highp vec2 t17;
highp uint tu17;
highp float t24;
bool tb24;
bool tb25;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t17.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t24 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t9 = in_TEXCOORD0.x + -0.5;
    t17.x = in_COLOR0.w * 255.0;
    tu17 = uint(t17.x);
    t9 = t9 * _TreeSize[int(tu17) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t2.xyz = vec3(t9) * _BillboardTangent.xyzx.xyz;
    t9 = in_TEXCOORD0.y * _TreeSize[int(tu17) + 0].y + _TreeSize[int(tu17) + 0].z;
    t2.w = t9 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t9 = log2(t1.x);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    tb25 = t1.x!=0.0;
    t1.x = (tb25) ? t9 : t1.x;
    t24 = t24 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t24) + t2.xz;
    t3.y = t2.w;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t1.xyw = vec3(t24) * t3.xyz;
    t24 = dot(t2.xzw, t2.xzw);
    t24 = sqrt(t24);
    t1.xyw = vec3(t24) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb24 = 0.0<t16_4;
    t1.xyw = (bool(tb24)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t1.xyw = _Object2World[2].xyz * t1.www + t2.xyz;
    t1.xyw = t1.xyw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    t24 = dot(t2.xyz, t2.xyz);
    t24 = inversesqrt(t24);
    t2.xyz = vec3(t24) * t2.xyz;
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t3 = t3 + t4;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t3 = t3 + t4;
    t24 = dot(t3.xyw, t3.xyw);
    t24 = inversesqrt(t24);
    t3 = vec4(t24) * t3;
    t10_5.xyz = t2.xyz * t3.wxy;
    t10_5.xyz = t3.ywx * t2.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t2.z;
    vs_TEXCOORD0.z = t3.x;
    vs_TEXCOORD1.x = t2.x;
    vs_TEXCOORD2.x = t2.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD1.z = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.w = t1.w;
    vs_TEXCOORD2.z = t3.w;
    vs_TEXCOORD3 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu17) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu17) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu17) + 0].x + _TreeInfo[int(tu17) + 0].z;
    tu0 = uint(t0.x);
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t2.xy;
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    t2 = (-t1.yyyy) + unity_4LightPosY0;
    t1 = (-t1.wwww) + unity_4LightPosZ0;
    t4 = t3.yyyy * t2;
    t2 = t2 * t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t3.xxxx + t4;
    t0 = t1 * t3.wwww + t0;
    t1 = t1 * t1 + t2;
    t2 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t2;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_6.x = t3.y * t3.y;
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    t16_1 = t3.ywzx * t3;
    t16_7.x = dot(unity_SHBr, t16_1);
    t16_7.y = dot(unity_SHBg, t16_1);
    t16_7.z = dot(unity_SHBb, t16_1);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t0.xyz = t0.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_22.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_2 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.x;
  tmpvar_39.y = tmpvar_38.x;
  tmpvar_39.z = worldNormal_3.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_2.y;
  tmpvar_40.y = tmpvar_38.y;
  tmpvar_40.z = worldNormal_3.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_2.z;
  tmpvar_41.y = tmpvar_38.z;
  tmpvar_41.z = worldNormal_3.z;
  tmpvar_41.w = tmpvar_30.z;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_3;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  highp vec3 lightColor0_46;
  lightColor0_46 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_47;
  lightColor1_47 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_48;
  lightColor2_48 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_49;
  lightColor3_49 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_50;
  lightAttenSq_50 = unity_4LightAtten0;
  highp vec3 normal_51;
  normal_51 = worldNormal_3;
  highp vec3 col_52;
  highp vec4 ndotl_53;
  highp vec4 lengthSq_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosZ0 - tmpvar_30.z);
  lengthSq_54 = (tmpvar_55 * tmpvar_55);
  lengthSq_54 = (lengthSq_54 + (tmpvar_56 * tmpvar_56));
  lengthSq_54 = (lengthSq_54 + (tmpvar_57 * tmpvar_57));
  ndotl_53 = (tmpvar_55 * normal_51.x);
  ndotl_53 = (ndotl_53 + (tmpvar_56 * normal_51.y));
  ndotl_53 = (ndotl_53 + (tmpvar_57 * normal_51.z));
  highp vec4 tmpvar_58;
  tmpvar_58 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_53 * inversesqrt(lengthSq_54)));
  ndotl_53 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * (1.0/((1.0 + 
    (lengthSq_54 * lightAttenSq_50)
  ))));
  col_52 = (lightColor0_46 * tmpvar_59.x);
  col_52 = (col_52 + (lightColor1_47 * tmpvar_59.y));
  col_52 = (col_52 + (lightColor2_48 * tmpvar_59.z));
  col_52 = (col_52 + (lightColor3_49 * tmpvar_59.w));
  tmpvar_5 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + col_52);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_2 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_2.x;
  tmpvar_38.y = tmpvar_37.x;
  tmpvar_38.z = worldNormal_3.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.y;
  tmpvar_39.y = tmpvar_37.y;
  tmpvar_39.z = worldNormal_3.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_2.z;
  tmpvar_40.y = tmpvar_37.z;
  tmpvar_40.z = worldNormal_3.z;
  tmpvar_40.w = tmpvar_29.z;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_3;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_43 + (unity_SHC.xyz * (
    (normal_42.x * normal_42.x)
   - 
    (normal_42.y * normal_42.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
bool tb9;
highp float t10;
highp vec2 t18;
highp vec2 t19;
highp uint tu19;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t19.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t27 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t10 = in_TEXCOORD0.x + -0.5;
    t19.x = in_COLOR0.w * 255.0;
    tu19 = uint(t19.x);
    t10 = t10 * _TreeSize[int(tu19) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t2.xyz = vec3(t10) * _BillboardTangent.xyzx.xyz;
    t10 = in_TEXCOORD0.y * _TreeSize[int(tu19) + 0].y + _TreeSize[int(tu19) + 0].z;
    t2.w = t10 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t10 = log2(t1.x);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    tb28 = t1.x!=0.0;
    t1.x = (tb28) ? t10 : t1.x;
    t27 = t27 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t27) + t2.xz;
    t3.y = t2.w;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = inversesqrt(t27);
    t1.xyw = vec3(t27) * t3.xyz;
    t27 = dot(t2.xzw, t2.xzw);
    t27 = sqrt(t27);
    t1.xyw = vec3(t27) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb27 = 0.0<t16_4;
    t1.xyw = (bool(tb27)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t3 = t3 + t4;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t3 = t3 + t4;
    t27 = dot(t3.xyw, t3.xyw);
    t27 = inversesqrt(t27);
    t3 = vec4(t27) * t3;
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    t27 = dot(t5.xyz, t5.xyz);
    t27 = inversesqrt(t27);
    t5.xyz = vec3(t27) * t5.xyz;
    t10_6.xyz = t3.wxy * t5.xyz;
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t3.x;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD2.w = t2.z;
    vs_TEXCOORD1.z = t3.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD2.z = t3.w;
    vs_TEXCOORD3 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu19) + 0].x;
    tb9 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb9) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].x + _TreeInfo[int(tu19) + 0].z;
    tu0 = uint(t0.x);
    tb9 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t18.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t18.xy : t2.xy;
    t16_7 = t3.y * t3.y;
    t16_7 = t3.x * t3.x + (-t16_7);
    t16_0 = t3.ywzx * t3;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec91 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec91, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_22.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_2 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_2.x;
  tmpvar_39.y = tmpvar_38.x;
  tmpvar_39.z = worldNormal_3.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_2.y;
  tmpvar_40.y = tmpvar_38.y;
  tmpvar_40.z = worldNormal_3.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_2.z;
  tmpvar_41.y = tmpvar_38.z;
  tmpvar_41.z = worldNormal_3.z;
  tmpvar_41.w = tmpvar_30.z;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_3;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  highp vec3 lightColor0_46;
  lightColor0_46 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_47;
  lightColor1_47 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_48;
  lightColor2_48 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_49;
  lightColor3_49 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_50;
  lightAttenSq_50 = unity_4LightAtten0;
  highp vec3 normal_51;
  normal_51 = worldNormal_3;
  highp vec3 col_52;
  highp vec4 ndotl_53;
  highp vec4 lengthSq_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosX0 - tmpvar_30.x);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosY0 - tmpvar_30.y);
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosZ0 - tmpvar_30.z);
  lengthSq_54 = (tmpvar_55 * tmpvar_55);
  lengthSq_54 = (lengthSq_54 + (tmpvar_56 * tmpvar_56));
  lengthSq_54 = (lengthSq_54 + (tmpvar_57 * tmpvar_57));
  ndotl_53 = (tmpvar_55 * normal_51.x);
  ndotl_53 = (ndotl_53 + (tmpvar_56 * normal_51.y));
  ndotl_53 = (ndotl_53 + (tmpvar_57 * normal_51.z));
  highp vec4 tmpvar_58;
  tmpvar_58 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_53 * inversesqrt(lengthSq_54)));
  ndotl_53 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * (1.0/((1.0 + 
    (lengthSq_54 * lightAttenSq_50)
  ))));
  col_52 = (lightColor0_46 * tmpvar_59.x);
  col_52 = (col_52 + (lightColor1_47 * tmpvar_59.y));
  col_52 = (col_52 + (lightColor2_48 * tmpvar_59.z));
  col_52 = (col_52 + (lightColor3_49 * tmpvar_59.w));
  tmpvar_5 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + col_52);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_4;
highp vec4 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
bool tb9;
highp float t10;
highp vec2 t18;
highp vec2 t19;
highp uint tu19;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t19.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t27 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t10 = in_TEXCOORD0.x + -0.5;
    t19.x = in_COLOR0.w * 255.0;
    tu19 = uint(t19.x);
    t10 = t10 * _TreeSize[int(tu19) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t2.xyz = vec3(t10) * _BillboardTangent.xyzx.xyz;
    t10 = in_TEXCOORD0.y * _TreeSize[int(tu19) + 0].y + _TreeSize[int(tu19) + 0].z;
    t2.w = t10 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t10 = log2(t1.x);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    tb28 = t1.x!=0.0;
    t1.x = (tb28) ? t10 : t1.x;
    t27 = t27 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t27) + t2.xz;
    t3.y = t2.w;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = inversesqrt(t27);
    t1.xyw = vec3(t27) * t3.xyz;
    t27 = dot(t2.xzw, t2.xzw);
    t27 = sqrt(t27);
    t1.xyw = vec3(t27) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb27 = 0.0<t16_4;
    t1.xyw = (bool(tb27)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    t2.xyz = _Object2World[2].xyz * t1.www + t2.xyz;
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = inversesqrt(t27);
    t3.xyz = vec3(t27) * t3.xyz;
    t4.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t4.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t4.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t5.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t5.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t5.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t4 = t4 + t5;
    t5.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t5.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t5.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t4 = t4 + t5;
    t27 = dot(t4.xyw, t4.xyw);
    t27 = inversesqrt(t27);
    t4 = vec4(t27) * t4;
    t10_6.xyz = t3.xyz * t4.wxy;
    t10_6.xyz = t4.ywx * t3.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.z = t4.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD1.z = t4.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD2.w = t2.z;
    vs_TEXCOORD2.z = t4.w;
    vs_TEXCOORD3 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu19) + 0].x;
    tb9 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb9) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu19) + 0].x + _TreeInfo[int(tu19) + 0].z;
    tu0 = uint(t0.x);
    tb9 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t18.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t18.xy : t3.xy;
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    t3 = (-t2.yyyy) + unity_4LightPosY0;
    t2 = (-t2.zzzz) + unity_4LightPosZ0;
    t5 = t4.yyyy * t3;
    t3 = t3 * t3;
    t3 = t0 * t0 + t3;
    t0 = t0 * t4.xxxx + t5;
    t0 = t2 * t4.wwww + t0;
    t2 = t2 * t2 + t3;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_7.x = t4.y * t4.y;
    t16_7.x = t4.x * t4.x + (-t16_7.x);
    t16_2 = t4.ywzx * t4;
    t16_8.x = dot(unity_SHBr, t16_2);
    t16_8.y = dot(unity_SHBg, t16_2);
    t16_8.z = dot(unity_SHBb, t16_2);
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    t0.xyz = t0.xyz + t16_7.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec92 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec92, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((v_38.xyz * tmpvar_15.z) + (v_39.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_40;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_1;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = (x2_43 + (unity_SHC.xyz * (
    (normal_42.x * normal_42.x)
   - 
    (normal_42.y * normal_42.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t15.x = dot(t8.xyz, t8.xyz);
    t15.x = inversesqrt(t15.x);
    t0.xy = t15.xx * t8.xz;
    t0.zw = (-t0.yy);
    t8.x = dot(t0.xz, t0.xw);
    t15.xy = t0.yx * vec2(-1.0, 1.0);
    t8.x = inversesqrt(t8.x);
    t8.xy = t8.xx * t15.xy;
    t3.xz = t8.xy * vec2(t9);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t22 = dot(t4.xyz, t4.xyz);
    t22 = inversesqrt(t22);
    t2.xyw = vec3(t22) * t4.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = sqrt(t22);
    t2.xyw = vec3(t22) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t8.y * _World2Object[0].x;
    t3.y = t8.y * _World2Object[1].x;
    t3.z = t8.y * _World2Object[2].x;
    t4.x = (-t8.x) * _World2Object[0].z;
    t4.y = (-t8.x) * _World2Object[1].z;
    t4.z = (-t8.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = max(abs(t8.y), abs(t8.x));
    t1 = float(1.0) / t1;
    t22 = min(abs(t8.y), abs(t8.x));
    t1 = t1 * t22;
    t22 = t1 * t1;
    t2.x = t22 * 0.0208350997 + -0.0851330012;
    t2.x = t22 * t2.x + 0.180141002;
    t2.x = t22 * t2.x + -0.330299497;
    t22 = t22 * t2.x + 0.999866009;
    t2.x = t22 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb9 = abs(t8.y)<abs(t8.x);
    t2.x = tb9 ? t2.x : float(0.0);
    t1 = t1 * t22 + t2.x;
    tb22 = t8.y<(-t8.y);
    t22 = tb22 ? -3.14159274 : float(0.0);
    t1 = t22 + t1;
    t22 = min(t8.y, (-t8.x));
    t8.x = max(t8.y, (-t8.x));
    tb8 = t8.x>=(-t8.x);
    tb15 = t22<(-t22);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb15) * 0xffffffffu);
    t1 = (ti8 != 0) ? (-t1) : t1;
    tb8 = t1<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1 = t8.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb8) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t2.xy;
    vs_TEXCOORD3.z = 0.0;
    t16_5 = t3.y * t3.y;
    t16_5 = t3.x * t3.x + (-t16_5);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_3.x = dot(unity_SHAr, t16_0);
    t16_3.y = dot(unity_SHAg, t16_0);
    t16_3.z = dot(unity_SHAb, t16_0);
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_16.z) + (v_40.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_1;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec3 tmpvar_39;
  tmpvar_39 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_42;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_1;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  highp vec3 lightColor0_47;
  lightColor0_47 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_48;
  lightColor1_48 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_49;
  lightColor2_49 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_50;
  lightColor3_50 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_51;
  lightAttenSq_51 = unity_4LightAtten0;
  highp vec3 normal_52;
  normal_52 = worldNormal_1;
  highp vec3 col_53;
  highp vec4 ndotl_54;
  highp vec4 lengthSq_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosX0 - tmpvar_39.x);
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosY0 - tmpvar_39.y);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosZ0 - tmpvar_39.z);
  lengthSq_55 = (tmpvar_56 * tmpvar_56);
  lengthSq_55 = (lengthSq_55 + (tmpvar_57 * tmpvar_57));
  lengthSq_55 = (lengthSq_55 + (tmpvar_58 * tmpvar_58));
  ndotl_54 = (tmpvar_56 * normal_52.x);
  ndotl_54 = (ndotl_54 + (tmpvar_57 * normal_52.y));
  ndotl_54 = (ndotl_54 + (tmpvar_58 * normal_52.z));
  highp vec4 tmpvar_59;
  tmpvar_59 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_54 * inversesqrt(lengthSq_55)));
  ndotl_54 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * (1.0/((1.0 + 
    (lengthSq_55 * lightAttenSq_51)
  ))));
  col_53 = (lightColor0_47 * tmpvar_60.x);
  col_53 = (col_53 + (lightColor1_48 * tmpvar_60.y));
  col_53 = (col_53 + (lightColor2_49 * tmpvar_60.z));
  col_53 = (col_53 + (lightColor3_50 * tmpvar_60.w));
  tmpvar_4 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + col_53);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
bool tb4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t15.x = dot(t8.xyz, t8.xyz);
    t15.x = inversesqrt(t15.x);
    t0.xy = t15.xx * t8.xz;
    t0.zw = (-t0.yy);
    t8.x = dot(t0.xz, t0.xw);
    t15.xy = t0.yx * vec2(-1.0, 1.0);
    t8.x = inversesqrt(t8.x);
    t8.xy = t8.xx * t15.xy;
    t3.xz = t8.xy * vec2(t9);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t22 = dot(t4.xyz, t4.xyz);
    t22 = inversesqrt(t22);
    t2.xyw = vec3(t22) * t4.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = sqrt(t22);
    t2.xyw = vec3(t22) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t8.y * _World2Object[0].x;
    t3.y = t8.y * _World2Object[1].x;
    t3.z = t8.y * _World2Object[2].x;
    t4.x = (-t8.x) * _World2Object[0].z;
    t4.y = (-t8.x) * _World2Object[1].z;
    t4.z = (-t8.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t2.xyw;
    vs_TEXCOORD2 = _Color;
    t1.x = max(abs(t8.y), abs(t8.x));
    t1.x = float(1.0) / t1.x;
    t22 = min(abs(t8.y), abs(t8.x));
    t1.x = t1.x * t22;
    t22 = t1.x * t1.x;
    t24 = t22 * 0.0208350997 + -0.0851330012;
    t24 = t22 * t24 + 0.180141002;
    t24 = t22 * t24 + -0.330299497;
    t22 = t22 * t24 + 0.999866009;
    t24 = t22 * t1.x;
    t24 = t24 * -2.0 + 1.57079637;
    tb4 = abs(t8.y)<abs(t8.x);
    t24 = tb4 ? t24 : float(0.0);
    t1.x = t1.x * t22 + t24;
    tb22 = t8.y<(-t8.y);
    t22 = tb22 ? -3.14159274 : float(0.0);
    t1.x = t22 + t1.x;
    t22 = min(t8.y, (-t8.x));
    t8.x = max(t8.y, (-t8.x));
    tb8 = t8.x>=(-t8.x);
    tb15 = t22<(-t22);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb15) * 0xffffffffu);
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    tb8 = t1.x<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1.x = t8.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1.x);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    vs_TEXCOORD3.z = 0.0;
    t0 = (-t2.wwww) + unity_4LightPosZ0;
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    t4 = t3.yyyy * t2;
    t2 = t2 * t2;
    t2 = t1 * t1 + t2;
    t1 = t1 * t3.xxxx + t4;
    t1 = t0 * t3.zzzz + t1;
    t0 = t0 * t0 + t2;
    t2 = inversesqrt(t0);
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    t1 = t1 * t2;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t0 * t1;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    t16_5.x = t3.y * t3.y;
    t16_5.x = t3.x * t3.x + (-t16_5.x);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t1.xyz = t1.xyz + t16_5.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_3.x = dot(unity_SHAr, t16_0);
    t16_3.y = dot(unity_SHAg, t16_0);
    t16_3.z = dot(unity_SHAb, t16_0);
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_14 = max(t16_14, 0.0);
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec3 tmpvar_40;
  tmpvar_40 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_1 = tmpvar_43;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_1;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  highp vec3 lightColor0_48;
  lightColor0_48 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_49;
  lightColor1_49 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_50;
  lightColor2_50 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_51;
  lightColor3_51 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_52;
  lightAttenSq_52 = unity_4LightAtten0;
  highp vec3 normal_53;
  normal_53 = worldNormal_1;
  highp vec3 col_54;
  highp vec4 ndotl_55;
  highp vec4 lengthSq_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosX0 - tmpvar_40.x);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosY0 - tmpvar_40.y);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosZ0 - tmpvar_40.z);
  lengthSq_56 = (tmpvar_57 * tmpvar_57);
  lengthSq_56 = (lengthSq_56 + (tmpvar_58 * tmpvar_58));
  lengthSq_56 = (lengthSq_56 + (tmpvar_59 * tmpvar_59));
  ndotl_55 = (tmpvar_57 * normal_53.x);
  ndotl_55 = (ndotl_55 + (tmpvar_58 * normal_53.y));
  ndotl_55 = (ndotl_55 + (tmpvar_59 * normal_53.z));
  highp vec4 tmpvar_60;
  tmpvar_60 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_55 * inversesqrt(lengthSq_56)));
  ndotl_55 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * (1.0/((1.0 + 
    (lengthSq_56 * lightAttenSq_52)
  ))));
  col_54 = (lightColor0_48 * tmpvar_61.x);
  col_54 = (col_54 + (lightColor1_49 * tmpvar_61.y));
  col_54 = (col_54 + (lightColor2_50 * tmpvar_61.z));
  col_54 = (col_54 + (lightColor3_51 * tmpvar_61.w));
  tmpvar_4 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + col_54);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_16.z) + (v_40.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_1;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t8.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t8.y;
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t16.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    t9 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_COLOR0.w * 255.0;
    tu16 = uint(t16.x);
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    t3.y = t23 * in_TEXCOORD1.y;
    t9 = (-t9) * 0.25 + t3.y;
    t9 = max(t9, 0.0);
    t9 = t9 * _ST_WindGlobal.z;
    t23 = log2(t9);
    t23 = t23 * _ST_WindGlobal.w;
    t23 = exp2(t23);
    tb24 = t9!=0.0;
    t9 = (tb24) ? t23 : t9;
    t2.x = t9 * t2.x;
    t9 = in_TEXCOORD0.x + -0.5;
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t15.x = dot(t8.xyz, t8.xyz);
    t15.x = inversesqrt(t15.x);
    t0.xy = t15.xx * t8.xz;
    t0.zw = (-t0.yy);
    t8.x = dot(t0.xz, t0.xw);
    t15.xy = t0.yx * vec2(-1.0, 1.0);
    t8.x = inversesqrt(t8.x);
    t8.xy = t8.xx * t15.xy;
    t3.xz = t8.xy * vec2(t9);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t22 = dot(t4.xyz, t4.xyz);
    t22 = inversesqrt(t22);
    t2.xyw = vec3(t22) * t4.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = sqrt(t22);
    t2.xyw = vec3(t22) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t8.y * _World2Object[0].x;
    t3.y = t8.y * _World2Object[1].x;
    t3.z = t8.y * _World2Object[2].x;
    t4.x = (-t8.x) * _World2Object[0].z;
    t4.y = (-t8.x) * _World2Object[1].z;
    t4.z = (-t8.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = max(abs(t8.y), abs(t8.x));
    t1.x = float(1.0) / t1.x;
    t22 = min(abs(t8.y), abs(t8.x));
    t1.x = t1.x * t22;
    t22 = t1.x * t1.x;
    t24 = t22 * 0.0208350997 + -0.0851330012;
    t24 = t22 * t24 + 0.180141002;
    t24 = t22 * t24 + -0.330299497;
    t22 = t22 * t24 + 0.999866009;
    t24 = t22 * t1.x;
    t24 = t24 * -2.0 + 1.57079637;
    tb4 = abs(t8.y)<abs(t8.x);
    t24 = tb4 ? t24 : float(0.0);
    t1.x = t1.x * t22 + t24;
    tb22 = t8.y<(-t8.y);
    t22 = tb22 ? -3.14159274 : float(0.0);
    t1.x = t22 + t1.x;
    t22 = min(t8.y, (-t8.x));
    t8.x = max(t8.y, (-t8.x));
    tb8 = t8.x>=(-t8.x);
    tb15 = t22<(-t22);
    ti8 = int(uint(tb8) * 0xffffffffu & uint(tb15) * 0xffffffffu);
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    tb8 = t1.x<0.0;
    t8.x = tb8 ? 6.28318548 : float(0.0);
    t1.x = t8.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    tu1 = uint(t1.x);
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    vs_TEXCOORD3.z = 0.0;
    t16_5 = t3.y * t3.y;
    t16_5 = t3.x * t3.x + (-t16_5);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD5 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_3.x = dot(unity_SHAr, t16_0);
    t16_3.y = dot(unity_SHAg, t16_0);
    t16_3.z = dot(unity_SHAb, t16_0);
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    vec3 txVec93 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec93, 0.0);
    t16_18 = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  highp vec3 tmpvar_40;
  tmpvar_40 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_1 = tmpvar_43;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_1;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  highp vec3 lightColor0_48;
  lightColor0_48 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_49;
  lightColor1_49 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_50;
  lightColor2_50 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_51;
  lightColor3_51 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_52;
  lightAttenSq_52 = unity_4LightAtten0;
  highp vec3 normal_53;
  normal_53 = worldNormal_1;
  highp vec3 col_54;
  highp vec4 ndotl_55;
  highp vec4 lengthSq_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosX0 - tmpvar_40.x);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosY0 - tmpvar_40.y);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosZ0 - tmpvar_40.z);
  lengthSq_56 = (tmpvar_57 * tmpvar_57);
  lengthSq_56 = (lengthSq_56 + (tmpvar_58 * tmpvar_58));
  lengthSq_56 = (lengthSq_56 + (tmpvar_59 * tmpvar_59));
  ndotl_55 = (tmpvar_57 * normal_53.x);
  ndotl_55 = (ndotl_55 + (tmpvar_58 * normal_53.y));
  ndotl_55 = (ndotl_55 + (tmpvar_59 * normal_53.z));
  highp vec4 tmpvar_60;
  tmpvar_60 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_55 * inversesqrt(lengthSq_56)));
  ndotl_55 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * (1.0/((1.0 + 
    (lengthSq_56 * lightAttenSq_52)
  ))));
  col_54 = (lightColor0_48 * tmpvar_61.x);
  col_54 = (col_54 + (lightColor1_49 * tmpvar_61.y));
  col_54 = (col_54 + (lightColor2_50 * tmpvar_61.z));
  col_54 = (col_54 + (lightColor3_51 * tmpvar_61.w));
  tmpvar_4 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + col_54);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t17.x = dot(t9.xyz, t9.xyz);
    t17.x = inversesqrt(t17.x);
    t0.xy = t17.xx * t9.xz;
    t0.zw = (-t0.yy);
    t9.x = dot(t0.xz, t0.xw);
    t17.xy = t0.yx * vec2(-1.0, 1.0);
    t9.x = inversesqrt(t9.x);
    t9.xy = t9.xx * t17.xy;
    t3.xz = t9.xy * vec2(t10);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t2.xyw = vec3(t25) * t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = sqrt(t25);
    t2.xyw = vec3(t25) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t9.y * _World2Object[0].x;
    t3.y = t9.y * _World2Object[1].x;
    t3.z = t9.y * _World2Object[2].x;
    t4.x = (-t9.x) * _World2Object[0].z;
    t4.y = (-t9.x) * _World2Object[1].z;
    t4.z = (-t9.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t4.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t4.xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = max(abs(t9.y), abs(t9.x));
    t1.x = float(1.0) / t1.x;
    t25 = min(abs(t9.y), abs(t9.x));
    t1.x = t1.x * t25;
    t25 = t1.x * t1.x;
    t27 = t25 * 0.0208350997 + -0.0851330012;
    t27 = t25 * t27 + 0.180141002;
    t27 = t25 * t27 + -0.330299497;
    t25 = t25 * t27 + 0.999866009;
    t27 = t25 * t1.x;
    t27 = t27 * -2.0 + 1.57079637;
    tb28 = abs(t9.y)<abs(t9.x);
    t27 = tb28 ? t27 : float(0.0);
    t1.x = t1.x * t25 + t27;
    tb25 = t9.y<(-t9.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t1.x = t25 + t1.x;
    t25 = min(t9.y, (-t9.x));
    t9.x = max(t9.y, (-t9.x));
    tb9 = t9.x>=(-t9.x);
    tb17 = t25<(-t25);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t5.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t5.xy;
    vs_TEXCOORD3.z = 0.0;
    t0 = (-t4.xxxx) + unity_4LightPosX0;
    t1 = (-t4.yyyy) + unity_4LightPosY0;
    t4 = (-t4.zzzz) + unity_4LightPosZ0;
    t5 = t3.yyyy * t1;
    t1 = t1 * t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t3.xxxx + t5;
    t0 = t4 * t3.zzzz + t0;
    t1 = t4 * t4 + t1;
    t4 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t4;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    t16_6.x = t3.y * t3.y;
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t1.xyz = t1.xyz + t16_6.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD5 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb0 = t10_1<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_3.x = dot(unity_SHAr, t16_0);
    t16_3.y = dot(unity_SHAg, t16_0);
    t16_3.z = dot(unity_SHAb, t16_0);
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    vec3 txVec94 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec94, 0.0);
    t16_18 = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp vec3 angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - tmpvar_12));
  highp vec3 tmpvar_14;
  tmpvar_14.y = 0.0;
  tmpvar_14.x = -(tmpvar_13.z);
  tmpvar_14.z = tmpvar_13.x;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = tmpvar_15.z;
  tmpvar_16.z = -(tmpvar_15.x);
  highp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = (min (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0) / max (abs(
    (tmpvar_16.z / tmpvar_15.z)
  ), 1.0));
  highp float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  tmpvar_19 = (((
    ((((
      ((((-0.01213232 * tmpvar_19) + 0.05368138) * tmpvar_19) - 0.1173503)
     * tmpvar_19) + 0.1938925) * tmpvar_19) - 0.3326756)
   * tmpvar_19) + 0.9999793) * tmpvar_18);
  tmpvar_19 = (tmpvar_19 + (float(
    (abs((tmpvar_16.z / tmpvar_15.z)) > 1.0)
  ) * (
    (tmpvar_19 * -2.0)
   + 1.570796)));
  tmpvar_17 = (tmpvar_19 * sign((tmpvar_16.z / tmpvar_15.z)));
  if ((abs(tmpvar_15.z) > (1e-08 * abs(tmpvar_16.z)))) {
    if ((tmpvar_15.z < 0.0)) {
      if ((tmpvar_16.z >= 0.0)) {
        tmpvar_17 += 3.141593;
      } else {
        tmpvar_17 = (tmpvar_17 - 3.141593);
      };
    };
  } else {
    tmpvar_17 = (sign(tmpvar_16.z) * 1.570796);
  };
  angle_7 = vec3(tmpvar_17);
  bvec3 tmpvar_20;
  tmpvar_20 = lessThan (vec3(tmpvar_17), vec3(0.0, 0.0, 0.0));
  float tmpvar_21;
  if (tmpvar_20.x) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_20.y) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_20.z) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = tmpvar_22;
  tmpvar_24.z = tmpvar_23;
  angle_7 = (vec3(tmpvar_17) + tmpvar_24);
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * tmpvar_15);
  billboardPos_6.xz = tmpvar_25.xz;
  billboardPos_6.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_6;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_31.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_6 = vPos_26;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (angle_7 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_9.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_38;
  tmpvar_3 = _Color;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((v_39.xyz * tmpvar_15.z) + (v_40.xyz * tmpvar_16.z)));
  worldNormal_1 = tmpvar_41;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_1;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t26 = dot(t4.xyz, t4.xyz);
    t26 = inversesqrt(t26);
    t0.xy = vec2(t26) * t4.xz;
    t0.zw = (-t0.yy);
    t26 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t26 = inversesqrt(t26);
    t4.xy = vec2(t26) * t4.xy;
    t3.xz = vec2(t10) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = sqrt(t27);
    t2.xyw = t2.xyw * vec3(t27);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1 = t9.y + t9.x;
    t1 = t9.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD3.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t9.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t9.x;
    t9.x = t1 * t1;
    t17.x = t9.x * 0.0208350997 + -0.0851330012;
    t17.x = t9.x * t17.x + 0.180141002;
    t17.x = t9.x * t17.x + -0.330299497;
    t9.x = t9.x * t17.x + 0.999866009;
    t17.x = t9.x * t1;
    t17.x = t17.x * -2.0 + 1.57079637;
    tb25 = abs(t4.y)<abs(t4.x);
    t17.x = tb25 ? t17.x : float(0.0);
    t1 = t1 * t9.x + t17.x;
    tb9 = t4.y<(-t4.y);
    t9.x = tb9 ? -3.14159274 : float(0.0);
    t1 = t9.x + t1;
    t9.x = min(t4.y, (-t4.x));
    t17.x = max(t4.y, (-t4.x));
    tb17 = t17.x>=(-t17.x);
    tb9 = t9.x<(-t9.x);
    ti9 = int(uint(tb17) * 0xffffffffu & uint(tb9) * 0xffffffffu);
    t1 = (ti9 != 0) ? (-t1) : t1;
    tb9 = t1<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1 = t9.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb9) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t2.xy;
    t16_6 = t3.y * t3.y;
    t16_6 = t3.x * t3.x + (-t16_6);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_3 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_42;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_1;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_3 = _Color;
  highp vec3 tmpvar_40;
  tmpvar_40 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_43;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_1;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  highp vec3 lightColor0_48;
  lightColor0_48 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_49;
  lightColor1_49 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_50;
  lightColor2_50 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_51;
  lightColor3_51 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_52;
  lightAttenSq_52 = unity_4LightAtten0;
  highp vec3 normal_53;
  normal_53 = worldNormal_1;
  highp vec3 col_54;
  highp vec4 ndotl_55;
  highp vec4 lengthSq_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosX0 - tmpvar_40.x);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosY0 - tmpvar_40.y);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosZ0 - tmpvar_40.z);
  lengthSq_56 = (tmpvar_57 * tmpvar_57);
  lengthSq_56 = (lengthSq_56 + (tmpvar_58 * tmpvar_58));
  lengthSq_56 = (lengthSq_56 + (tmpvar_59 * tmpvar_59));
  ndotl_55 = (tmpvar_57 * normal_53.x);
  ndotl_55 = (ndotl_55 + (tmpvar_58 * normal_53.y));
  ndotl_55 = (ndotl_55 + (tmpvar_59 * normal_53.z));
  highp vec4 tmpvar_60;
  tmpvar_60 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_55 * inversesqrt(lengthSq_56)));
  ndotl_55 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * (1.0/((1.0 + 
    (lengthSq_56 * lightAttenSq_52)
  ))));
  col_54 = (lightColor0_48 * tmpvar_61.x);
  col_54 = (col_54 + (lightColor1_49 * tmpvar_61.y));
  col_54 = (col_54 + (lightColor2_50 * tmpvar_61.z));
  col_54 = (col_54 + (lightColor3_51 * tmpvar_61.w));
  tmpvar_4 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + col_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t26 = dot(t4.xyz, t4.xyz);
    t26 = inversesqrt(t26);
    t0.xy = vec2(t26) * t4.xz;
    t0.zw = (-t0.yy);
    t26 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t26 = inversesqrt(t26);
    t4.xy = vec2(t26) * t4.xy;
    t3.xz = vec2(t10) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = sqrt(t27);
    t2.xyw = t2.xyw * vec3(t27);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t2.xyw;
    vs_TEXCOORD2 = _Color;
    t1.x = t9.y + t9.x;
    t1.x = t9.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t9.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t9.x;
    t9.x = t1.x * t1.x;
    t17.x = t9.x * 0.0208350997 + -0.0851330012;
    t17.x = t9.x * t17.x + 0.180141002;
    t17.x = t9.x * t17.x + -0.330299497;
    t9.x = t9.x * t17.x + 0.999866009;
    t17.x = t9.x * t1.x;
    t17.x = t17.x * -2.0 + 1.57079637;
    tb25 = abs(t4.y)<abs(t4.x);
    t17.x = tb25 ? t17.x : float(0.0);
    t1.x = t1.x * t9.x + t17.x;
    tb9 = t4.y<(-t4.y);
    t9.x = tb9 ? -3.14159274 : float(0.0);
    t1.x = t9.x + t1.x;
    t9.x = min(t4.y, (-t4.x));
    t17.x = max(t4.y, (-t4.x));
    tb17 = t17.x>=(-t17.x);
    tb9 = t9.x<(-t9.x);
    ti9 = int(uint(tb17) * 0xffffffffu & uint(tb9) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    t0 = (-t2.wwww) + unity_4LightPosZ0;
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    t4 = t3.yyyy * t2;
    t2 = t2 * t2;
    t2 = t1 * t1 + t2;
    t1 = t1 * t3.xxxx + t4;
    t1 = t0 * t3.zzzz + t1;
    t0 = t0 * t0 + t2;
    t2 = inversesqrt(t0);
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    t1 = t1 * t2;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t0 * t1;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    t16_6.x = t3.y * t3.y;
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t1.xyz = t1.xyz + t16_6.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_40;
  tmpvar_3 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_1 = tmpvar_44;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_1;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  highp vec3 lightColor0_49;
  lightColor0_49 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_50;
  lightColor1_50 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_51;
  lightColor2_51 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_52;
  lightColor3_52 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_53;
  lightAttenSq_53 = unity_4LightAtten0;
  highp vec3 normal_54;
  normal_54 = worldNormal_1;
  highp vec3 col_55;
  highp vec4 ndotl_56;
  highp vec4 lengthSq_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosZ0 - tmpvar_41.z);
  lengthSq_57 = (tmpvar_58 * tmpvar_58);
  lengthSq_57 = (lengthSq_57 + (tmpvar_59 * tmpvar_59));
  lengthSq_57 = (lengthSq_57 + (tmpvar_60 * tmpvar_60));
  ndotl_56 = (tmpvar_58 * normal_54.x);
  ndotl_56 = (ndotl_56 + (tmpvar_59 * normal_54.y));
  ndotl_56 = (ndotl_56 + (tmpvar_60 * normal_54.z));
  highp vec4 tmpvar_61;
  tmpvar_61 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_56 * inversesqrt(lengthSq_57)));
  ndotl_56 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * (1.0/((1.0 + 
    (lengthSq_57 * lightAttenSq_53)
  ))));
  col_55 = (lightColor0_49 * tmpvar_62.x);
  col_55 = (col_55 + (lightColor1_50 * tmpvar_62.y));
  col_55 = (col_55 + (lightColor2_51 * tmpvar_62.z));
  col_55 = (col_55 + (lightColor3_52 * tmpvar_62.w));
  tmpvar_4 = ((x2_47 + (unity_SHC.xyz * 
    ((normal_46.x * normal_46.x) - (normal_46.y * normal_46.y))
  )) + col_55);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_3 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_1 = tmpvar_42;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_1;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t26 = dot(t4.xyz, t4.xyz);
    t26 = inversesqrt(t26);
    t0.xy = vec2(t26) * t4.xz;
    t0.zw = (-t0.yy);
    t26 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t26 = inversesqrt(t26);
    t4.xy = vec2(t26) * t4.xy;
    t3.xz = vec2(t10) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = sqrt(t27);
    t2.xyw = t2.xyw * vec3(t27);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = t9.y + t9.x;
    t1.x = t9.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t9.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t9.x;
    t9.x = t1.x * t1.x;
    t17.x = t9.x * 0.0208350997 + -0.0851330012;
    t17.x = t9.x * t17.x + 0.180141002;
    t17.x = t9.x * t17.x + -0.330299497;
    t9.x = t9.x * t17.x + 0.999866009;
    t17.x = t9.x * t1.x;
    t17.x = t17.x * -2.0 + 1.57079637;
    tb25 = abs(t4.y)<abs(t4.x);
    t17.x = tb25 ? t17.x : float(0.0);
    t1.x = t1.x * t9.x + t17.x;
    tb9 = t4.y<(-t4.y);
    t9.x = tb9 ? -3.14159274 : float(0.0);
    t1.x = t9.x + t1.x;
    t9.x = min(t4.y, (-t4.x));
    t17.x = max(t4.y, (-t4.x));
    tb17 = t17.x>=(-t17.x);
    tb9 = t9.x<(-t9.x);
    ti9 = int(uint(tb17) * 0xffffffffu & uint(tb9) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    t16_6 = t3.y * t3.y;
    t16_6 = t3.x * t3.x + (-t16_6);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD5 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    vec3 txVec112 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec112, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_40;
  tmpvar_3 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_1 = tmpvar_44;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_1;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  highp vec3 lightColor0_49;
  lightColor0_49 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_50;
  lightColor1_50 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_51;
  lightColor2_51 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_52;
  lightColor3_52 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_53;
  lightAttenSq_53 = unity_4LightAtten0;
  highp vec3 normal_54;
  normal_54 = worldNormal_1;
  highp vec3 col_55;
  highp vec4 ndotl_56;
  highp vec4 lengthSq_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosZ0 - tmpvar_41.z);
  lengthSq_57 = (tmpvar_58 * tmpvar_58);
  lengthSq_57 = (lengthSq_57 + (tmpvar_59 * tmpvar_59));
  lengthSq_57 = (lengthSq_57 + (tmpvar_60 * tmpvar_60));
  ndotl_56 = (tmpvar_58 * normal_54.x);
  ndotl_56 = (ndotl_56 + (tmpvar_59 * normal_54.y));
  ndotl_56 = (ndotl_56 + (tmpvar_60 * normal_54.z));
  highp vec4 tmpvar_61;
  tmpvar_61 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_56 * inversesqrt(lengthSq_57)));
  ndotl_56 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * (1.0/((1.0 + 
    (lengthSq_57 * lightAttenSq_53)
  ))));
  col_55 = (lightColor0_49 * tmpvar_62.x);
  col_55 = (col_55 + (lightColor1_50 * tmpvar_62.y));
  col_55 = (col_55 + (lightColor2_51 * tmpvar_62.z));
  col_55 = (col_55 + (lightColor3_52 * tmpvar_62.w));
  tmpvar_4 = ((x2_47 + (unity_SHC.xyz * 
    ((normal_46.x * normal_46.x) - (normal_46.y * normal_46.y))
  )) + col_55);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t26 = dot(t4.xyz, t4.xyz);
    t26 = inversesqrt(t26);
    t0.xy = vec2(t26) * t4.xz;
    t0.zw = (-t0.yy);
    t26 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t26 = inversesqrt(t26);
    t4.xy = vec2(t26) * t4.xy;
    t3.xz = vec2(t10) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t27 = dot(t3.xyz, t3.xyz);
    t27 = sqrt(t27);
    t2.xyw = t2.xyw * vec3(t27);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.x = t4.y * _World2Object[0].x;
    t3.y = t4.y * _World2Object[1].x;
    t3.z = t4.y * _World2Object[2].x;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.z = (-t4.x) * _World2Object[2].z;
    t3.xyz = t3.xyz + t5.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    t5.xyz = t5.xyz + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t5.xyz;
    vs_TEXCOORD2 = _Color;
    t1.x = t9.y + t9.x;
    t1.x = t9.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t9.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t9.x;
    t9.x = t1.x * t1.x;
    t17.x = t9.x * 0.0208350997 + -0.0851330012;
    t17.x = t9.x * t17.x + 0.180141002;
    t17.x = t9.x * t17.x + -0.330299497;
    t9.x = t9.x * t17.x + 0.999866009;
    t17.x = t9.x * t1.x;
    t17.x = t17.x * -2.0 + 1.57079637;
    tb25 = abs(t4.y)<abs(t4.x);
    t17.x = tb25 ? t17.x : float(0.0);
    t1.x = t1.x * t9.x + t17.x;
    tb9 = t4.y<(-t4.y);
    t9.x = tb9 ? -3.14159274 : float(0.0);
    t1.x = t9.x + t1.x;
    t9.x = min(t4.y, (-t4.x));
    t17.x = max(t4.y, (-t4.x));
    tb17 = t17.x>=(-t17.x);
    tb9 = t9.x<(-t9.x);
    ti9 = int(uint(tb17) * 0xffffffffu & uint(tb9) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    t0 = (-t5.xxxx) + unity_4LightPosX0;
    t1 = (-t5.yyyy) + unity_4LightPosY0;
    t4 = (-t5.zzzz) + unity_4LightPosZ0;
    t5 = t3.yyyy * t1;
    t1 = t1 * t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t3.xxxx + t5;
    t0 = t4 * t3.zzzz + t0;
    t1 = t4 * t4 + t1;
    t4 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t4;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    t16_6.x = t3.y * t3.y;
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    t16_0 = t3.yzzx * t3.xyzz;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t1.xyz = t1.xyz + t16_6.xyz;
    vs_TEXCOORD4.xyz = t1.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD5 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    vec3 txVec113 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec113, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_39;
  tmpvar_39 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * tmpvar_16));
  worldTangent_2 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_2.x;
  tmpvar_47.y = tmpvar_46.x;
  tmpvar_47.z = worldNormal_3.x;
  tmpvar_47.w = tmpvar_39.x;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_2.y;
  tmpvar_48.y = tmpvar_46.y;
  tmpvar_48.z = worldNormal_3.y;
  tmpvar_48.w = tmpvar_39.y;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.z;
  tmpvar_49.y = tmpvar_46.z;
  tmpvar_49.z = worldNormal_3.z;
  tmpvar_49.w = tmpvar_39.z;
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_3;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = (x2_52 + (unity_SHC.xyz * (
    (normal_51.x * normal_51.x)
   - 
    (normal_51.y * normal_51.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t17.x = dot(t9.xyz, t9.xyz);
    t17.x = inversesqrt(t17.x);
    t0.xy = t17.xx * t9.xz;
    t0.zw = (-t0.yy);
    t9.x = dot(t0.xz, t0.xw);
    t17.xy = t0.yx * vec2(-1.0, 1.0);
    t9.x = inversesqrt(t9.x);
    t9.xy = t9.xx * t17.xy;
    t3.xz = t9.xy * vec2(t10);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t2.xyw = vec3(t25) * t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = sqrt(t25);
    t2.xyw = vec3(t25) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t0.x = t9.y * _World2Object[0].x;
    t0.y = t9.y * _World2Object[1].x;
    t0.zw = t9.yy * _World2Object[2].xx;
    t3.x = (-t9.x) * _World2Object[0].z;
    t3.y = (-t9.x) * _World2Object[1].z;
    t3.zw = (-t9.xx) * _World2Object[2].zz;
    t0 = t0 + t3;
    t1 = dot(t0.xyw, t0.xyw);
    t1 = inversesqrt(t1);
    t0 = t0 * vec4(t1);
    t3.xyz = t9.yyy * _Object2World[2].yzx;
    t3.xyz = _Object2World[0].yzx * t9.xxx + t3.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t10_5.xyz = t0.wxy * t3.xyz;
    t10_5.xyz = t0.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD2.w = t2.w;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1 = max(abs(t9.y), abs(t9.x));
    t1 = float(1.0) / t1;
    t25 = min(abs(t9.y), abs(t9.x));
    t1 = t1 * t25;
    t25 = t1 * t1;
    t2.x = t25 * 0.0208350997 + -0.0851330012;
    t2.x = t25 * t2.x + 0.180141002;
    t2.x = t25 * t2.x + -0.330299497;
    t25 = t25 * t2.x + 0.999866009;
    t2.x = t25 * t1;
    t2.x = t2.x * -2.0 + 1.57079637;
    tb10 = abs(t9.y)<abs(t9.x);
    t2.x = tb10 ? t2.x : float(0.0);
    t1 = t1 * t25 + t2.x;
    tb25 = t9.y<(-t9.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t1 = t25 + t1;
    t25 = min(t9.y, (-t9.x));
    t9.x = max(t9.y, (-t9.x));
    tb9 = t9.x>=(-t9.x);
    tb17 = t25<(-t25);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t1 = (ti9 != 0) ? (-t1) : t1;
    tb9 = t1<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1 = t9.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb9) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t2.xy;
    vs_TEXCOORD4.z = 0.0;
    t16_6 = t0.y * t0.y;
    t16_6 = t0.x * t0.x + (-t16_6);
    t16_0 = t0.ywzx * t0;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_40;
  tmpvar_40 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_2.x;
  tmpvar_48.y = tmpvar_47.x;
  tmpvar_48.z = worldNormal_3.x;
  tmpvar_48.w = tmpvar_40.x;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.y;
  tmpvar_49.y = tmpvar_47.y;
  tmpvar_49.z = worldNormal_3.y;
  tmpvar_49.w = tmpvar_40.y;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.z;
  tmpvar_50.y = tmpvar_47.z;
  tmpvar_50.z = worldNormal_3.z;
  tmpvar_50.w = tmpvar_40.z;
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_3;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_53 + (unity_SHC.xyz * (
    (normal_52.x * normal_52.x)
   - 
    (normal_52.y * normal_52.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_4;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_5.xyz = c_25.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_40;
  tmpvar_40 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_2.x;
  tmpvar_48.y = tmpvar_47.x;
  tmpvar_48.z = worldNormal_3.x;
  tmpvar_48.w = tmpvar_40.x;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.y;
  tmpvar_49.y = tmpvar_47.y;
  tmpvar_49.z = worldNormal_3.y;
  tmpvar_49.w = tmpvar_40.y;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.z;
  tmpvar_50.y = tmpvar_47.z;
  tmpvar_50.z = worldNormal_3.z;
  tmpvar_50.w = tmpvar_40.z;
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_3;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  highp vec3 lightColor0_55;
  lightColor0_55 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_56;
  lightColor1_56 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_57;
  lightColor2_57 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_58;
  lightColor3_58 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_59;
  lightAttenSq_59 = unity_4LightAtten0;
  highp vec3 normal_60;
  normal_60 = worldNormal_3;
  highp vec3 col_61;
  highp vec4 ndotl_62;
  highp vec4 lengthSq_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (unity_4LightPosX0 - tmpvar_40.x);
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosY0 - tmpvar_40.y);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosZ0 - tmpvar_40.z);
  lengthSq_63 = (tmpvar_64 * tmpvar_64);
  lengthSq_63 = (lengthSq_63 + (tmpvar_65 * tmpvar_65));
  lengthSq_63 = (lengthSq_63 + (tmpvar_66 * tmpvar_66));
  ndotl_62 = (tmpvar_64 * normal_60.x);
  ndotl_62 = (ndotl_62 + (tmpvar_65 * normal_60.y));
  ndotl_62 = (ndotl_62 + (tmpvar_66 * normal_60.z));
  highp vec4 tmpvar_67;
  tmpvar_67 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_62 * inversesqrt(lengthSq_63)));
  ndotl_62 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * (1.0/((1.0 + 
    (lengthSq_63 * lightAttenSq_59)
  ))));
  col_61 = (lightColor0_55 * tmpvar_68.x);
  col_61 = (col_61 + (lightColor1_56 * tmpvar_68.y));
  col_61 = (col_61 + (lightColor2_57 * tmpvar_68.z));
  col_61 = (col_61 + (lightColor3_58 * tmpvar_68.w));
  tmpvar_5 = ((x2_53 + (unity_SHC.xyz * 
    ((normal_52.x * normal_52.x) - (normal_52.y * normal_52.y))
  )) + col_61);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb11;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t17.x = dot(t9.xyz, t9.xyz);
    t17.x = inversesqrt(t17.x);
    t0.xy = t17.xx * t9.xz;
    t0.zw = (-t0.yy);
    t9.x = dot(t0.xz, t0.xw);
    t17.xy = t0.yx * vec2(-1.0, 1.0);
    t9.x = inversesqrt(t9.x);
    t9.xy = t9.xx * t17.xy;
    t3.xz = t9.xy * vec2(t10);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t2.xyw = vec3(t25) * t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = sqrt(t25);
    t2.xyw = vec3(t25) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t0.x = t9.y * _World2Object[0].x;
    t0.y = t9.y * _World2Object[1].x;
    t0.zw = t9.yy * _World2Object[2].xx;
    t3.x = (-t9.x) * _World2Object[0].z;
    t3.y = (-t9.x) * _World2Object[1].z;
    t3.zw = (-t9.xx) * _World2Object[2].zz;
    t0 = t0 + t3;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t3.xyz = t9.yyy * _Object2World[2].yzx;
    t3.xyz = _Object2World[0].yzx * t9.xxx + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_5.xyz = t0.wxy * t3.xyz;
    t10_5.xyz = t0.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.w = t2.w;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = max(abs(t9.y), abs(t9.x));
    t1.x = float(1.0) / t1.x;
    t25 = min(abs(t9.y), abs(t9.x));
    t1.x = t1.x * t25;
    t25 = t1.x * t1.x;
    t3.x = t25 * 0.0208350997 + -0.0851330012;
    t3.x = t25 * t3.x + 0.180141002;
    t3.x = t25 * t3.x + -0.330299497;
    t25 = t25 * t3.x + 0.999866009;
    t3.x = t25 * t1.x;
    t3.x = t3.x * -2.0 + 1.57079637;
    tb11 = abs(t9.y)<abs(t9.x);
    t3.x = tb11 ? t3.x : float(0.0);
    t1.x = t1.x * t25 + t3.x;
    tb25 = t9.y<(-t9.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t1.x = t25 + t1.x;
    t25 = min(t9.y, (-t9.x));
    t9.x = max(t9.y, (-t9.x));
    tb9 = t9.x>=(-t9.x);
    tb17 = t25<(-t25);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t1 = (-t2.wwww) + unity_4LightPosZ0;
    t3 = (-t2.xxxx) + unity_4LightPosX0;
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    t4 = t0.yyyy * t2;
    t2 = t2 * t2;
    t2 = t3 * t3 + t2;
    t3 = t3 * t0.xxxx + t4;
    t3 = t1 * t0.wwww + t3;
    t1 = t1 * t1 + t2;
    t2 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t2 = t2 * t3;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t1 = t1 * t2;
    t2.xyz = t1.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t2.xyz;
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    t16_6.x = t0.y * t0.y;
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    t16_0 = t0.ywzx * t0;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t1.xyz = t1.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_34.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_12.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_18.z) + (v_43.xyz * tmpvar_19.z)));
  worldNormal_3 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_18));
  worldTangent_2 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.x;
  tmpvar_49.y = tmpvar_48.x;
  tmpvar_49.z = worldNormal_3.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.y;
  tmpvar_50.y = tmpvar_48.y;
  tmpvar_50.z = worldNormal_3.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_2.z;
  tmpvar_51.y = tmpvar_48.z;
  tmpvar_51.z = worldNormal_3.z;
  tmpvar_51.w = tmpvar_41.z;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_3;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  highp vec3 lightColor0_56;
  lightColor0_56 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_57;
  lightColor1_57 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_58;
  lightColor2_58 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_59;
  lightColor3_59 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_60;
  lightAttenSq_60 = unity_4LightAtten0;
  highp vec3 normal_61;
  normal_61 = worldNormal_3;
  highp vec3 col_62;
  highp vec4 ndotl_63;
  highp vec4 lengthSq_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosZ0 - tmpvar_41.z);
  lengthSq_64 = (tmpvar_65 * tmpvar_65);
  lengthSq_64 = (lengthSq_64 + (tmpvar_66 * tmpvar_66));
  lengthSq_64 = (lengthSq_64 + (tmpvar_67 * tmpvar_67));
  ndotl_63 = (tmpvar_65 * normal_61.x);
  ndotl_63 = (ndotl_63 + (tmpvar_66 * normal_61.y));
  ndotl_63 = (ndotl_63 + (tmpvar_67 * normal_61.z));
  highp vec4 tmpvar_68;
  tmpvar_68 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_63 * inversesqrt(lengthSq_64)));
  ndotl_63 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * (1.0/((1.0 + 
    (lengthSq_64 * lightAttenSq_60)
  ))));
  col_62 = (lightColor0_56 * tmpvar_69.x);
  col_62 = (col_62 + (lightColor1_57 * tmpvar_69.y));
  col_62 = (col_62 + (lightColor2_58 * tmpvar_69.z));
  col_62 = (col_62 + (lightColor3_59 * tmpvar_69.w));
  tmpvar_5 = ((x2_54 + (unity_SHC.xyz * 
    ((normal_53.x * normal_53.x) - (normal_53.y * normal_53.y))
  )) + col_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_4;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_5.xyz = c_25.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_40;
  tmpvar_40 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_2.x;
  tmpvar_48.y = tmpvar_47.x;
  tmpvar_48.z = worldNormal_3.x;
  tmpvar_48.w = tmpvar_40.x;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.y;
  tmpvar_49.y = tmpvar_47.y;
  tmpvar_49.z = worldNormal_3.y;
  tmpvar_49.w = tmpvar_40.y;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.z;
  tmpvar_50.y = tmpvar_47.z;
  tmpvar_50.z = worldNormal_3.z;
  tmpvar_50.w = tmpvar_40.z;
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_3;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_53 + (unity_SHC.xyz * (
    (normal_52.x * normal_52.x)
   - 
    (normal_52.y * normal_52.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_4;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_5.xyz = c_24.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb11;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t17.x = dot(t9.xyz, t9.xyz);
    t17.x = inversesqrt(t17.x);
    t0.xy = t17.xx * t9.xz;
    t0.zw = (-t0.yy);
    t9.x = dot(t0.xz, t0.xw);
    t17.xy = t0.yx * vec2(-1.0, 1.0);
    t9.x = inversesqrt(t9.x);
    t9.xy = t9.xx * t17.xy;
    t3.xz = t9.xy * vec2(t10);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t2.xyw = vec3(t25) * t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = sqrt(t25);
    t2.xyw = vec3(t25) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t0.x = t9.y * _World2Object[0].x;
    t0.y = t9.y * _World2Object[1].x;
    t0.zw = t9.yy * _World2Object[2].xx;
    t3.x = (-t9.x) * _World2Object[0].z;
    t3.y = (-t9.x) * _World2Object[1].z;
    t3.zw = (-t9.xx) * _World2Object[2].zz;
    t0 = t0 + t3;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t3.xyz = t9.yyy * _Object2World[2].yzx;
    t3.xyz = _Object2World[0].yzx * t9.xxx + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_5.xyz = t0.wxy * t3.xyz;
    t10_5.xyz = t0.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t4.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t4.y;
    vs_TEXCOORD2.w = t4.z;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = max(abs(t9.y), abs(t9.x));
    t1.x = float(1.0) / t1.x;
    t25 = min(abs(t9.y), abs(t9.x));
    t1.x = t1.x * t25;
    t25 = t1.x * t1.x;
    t3.x = t25 * 0.0208350997 + -0.0851330012;
    t3.x = t25 * t3.x + 0.180141002;
    t3.x = t25 * t3.x + -0.330299497;
    t25 = t25 * t3.x + 0.999866009;
    t3.x = t25 * t1.x;
    t3.x = t3.x * -2.0 + 1.57079637;
    tb11 = abs(t9.y)<abs(t9.x);
    t3.x = tb11 ? t3.x : float(0.0);
    t1.x = t1.x * t25 + t3.x;
    tb25 = t9.y<(-t9.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t1.x = t25 + t1.x;
    t25 = min(t9.y, (-t9.x));
    t9.x = max(t9.y, (-t9.x));
    tb9 = t9.x>=(-t9.x);
    tb17 = t25<(-t25);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t16_6 = t0.y * t0.y;
    t16_6 = t0.x * t0.x + (-t16_6);
    t16_0 = t0.ywzx * t0;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    vec3 txVec114 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec114, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_34.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_12.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_18.z) + (v_43.xyz * tmpvar_19.z)));
  worldNormal_3 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_18));
  worldTangent_2 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.x;
  tmpvar_49.y = tmpvar_48.x;
  tmpvar_49.z = worldNormal_3.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.y;
  tmpvar_50.y = tmpvar_48.y;
  tmpvar_50.z = worldNormal_3.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_2.z;
  tmpvar_51.y = tmpvar_48.z;
  tmpvar_51.z = worldNormal_3.z;
  tmpvar_51.w = tmpvar_41.z;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_3;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  highp vec3 lightColor0_56;
  lightColor0_56 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_57;
  lightColor1_57 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_58;
  lightColor2_58 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_59;
  lightColor3_59 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_60;
  lightAttenSq_60 = unity_4LightAtten0;
  highp vec3 normal_61;
  normal_61 = worldNormal_3;
  highp vec3 col_62;
  highp vec4 ndotl_63;
  highp vec4 lengthSq_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosZ0 - tmpvar_41.z);
  lengthSq_64 = (tmpvar_65 * tmpvar_65);
  lengthSq_64 = (lengthSq_64 + (tmpvar_66 * tmpvar_66));
  lengthSq_64 = (lengthSq_64 + (tmpvar_67 * tmpvar_67));
  ndotl_63 = (tmpvar_65 * normal_61.x);
  ndotl_63 = (ndotl_63 + (tmpvar_66 * normal_61.y));
  ndotl_63 = (ndotl_63 + (tmpvar_67 * normal_61.z));
  highp vec4 tmpvar_68;
  tmpvar_68 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_63 * inversesqrt(lengthSq_64)));
  ndotl_63 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * (1.0/((1.0 + 
    (lengthSq_64 * lightAttenSq_60)
  ))));
  col_62 = (lightColor0_56 * tmpvar_69.x);
  col_62 = (col_62 + (lightColor1_57 * tmpvar_69.y));
  col_62 = (col_62 + (lightColor2_58 * tmpvar_69.z));
  col_62 = (col_62 + (lightColor3_59 * tmpvar_69.w));
  tmpvar_5 = ((x2_54 + (unity_SHC.xyz * 
    ((normal_53.x * normal_53.x) - (normal_53.y * normal_53.y))
  )) + col_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_4;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_5.xyz = c_24.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
highp vec4 t5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t9.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t9.y;
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t18.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t18.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    t10 = float(1.0) / _ST_WindGlobal.z;
    t18.x = in_COLOR0.w * 255.0;
    tu18 = uint(t18.x);
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t3.y = t26 * in_TEXCOORD1.y;
    t10 = (-t10) * 0.25 + t3.y;
    t10 = max(t10, 0.0);
    t10 = t10 * _ST_WindGlobal.z;
    t26 = log2(t10);
    t26 = t26 * _ST_WindGlobal.w;
    t26 = exp2(t26);
    tb27 = t10!=0.0;
    t10 = (tb27) ? t26 : t10;
    t2.x = t10 * t2.x;
    t10 = in_TEXCOORD0.x + -0.5;
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    t10 = t10 * in_TEXCOORD1.x;
    t17.x = dot(t9.xyz, t9.xyz);
    t17.x = inversesqrt(t17.x);
    t0.xy = t17.xx * t9.xz;
    t0.zw = (-t0.yy);
    t9.x = dot(t0.xz, t0.xw);
    t17.xy = t0.yx * vec2(-1.0, 1.0);
    t9.x = inversesqrt(t9.x);
    t9.xy = t9.xx * t17.xy;
    t3.xz = t9.xy * vec2(t10);
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t4.y = t3.y;
    t25 = dot(t4.xyz, t4.xyz);
    t25 = inversesqrt(t25);
    t2.xyw = vec3(t25) * t4.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = sqrt(t25);
    t2.xyw = vec3(t25) * t2.xyw;
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t3.x;
    t0.x = t9.y * _World2Object[0].x;
    t0.y = t9.y * _World2Object[1].x;
    t0.zw = t9.yy * _World2Object[2].xx;
    t4.x = (-t9.x) * _World2Object[0].z;
    t4.y = (-t9.x) * _World2Object[1].z;
    t4.zw = (-t9.xx) * _World2Object[2].zz;
    t0 = t0 + t4;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t4.xyz = t9.yyy * _Object2World[2].yzx;
    t4.xyz = _Object2World[0].yzx * t9.xxx + t4.xyz;
    t1.x = dot(t4.xyz, t4.xyz);
    t1.x = inversesqrt(t1.x);
    t4.xyz = t1.xxx * t4.xyz;
    t10_5.xyz = t0.wxy * t4.xyz;
    t10_5.xyz = t0.ywx * t4.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD1.w = t3.y;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD2.x = t4.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.w = t3.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = max(abs(t9.y), abs(t9.x));
    t1.x = float(1.0) / t1.x;
    t25 = min(abs(t9.y), abs(t9.x));
    t1.x = t1.x * t25;
    t25 = t1.x * t1.x;
    t27 = t25 * 0.0208350997 + -0.0851330012;
    t27 = t25 * t27 + 0.180141002;
    t27 = t25 * t27 + -0.330299497;
    t25 = t25 * t27 + 0.999866009;
    t27 = t25 * t1.x;
    t27 = t27 * -2.0 + 1.57079637;
    tb4 = abs(t9.y)<abs(t9.x);
    t27 = tb4 ? t27 : float(0.0);
    t1.x = t1.x * t25 + t27;
    tb25 = t9.y<(-t9.y);
    t25 = tb25 ? -3.14159274 : float(0.0);
    t1.x = t25 + t1.x;
    t25 = min(t9.y, (-t9.x));
    t9.x = max(t9.y, (-t9.x));
    tb9 = t9.x>=(-t9.x);
    tb17 = t25<(-t25);
    ti9 = int(uint(tb9) * 0xffffffffu & uint(tb17) * 0xffffffffu);
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    tb9 = t1.x<0.0;
    t9.x = tb9 ? 6.28318548 : float(0.0);
    t1.x = t9.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    tb9 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb9) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu1 = uint(t1.x);
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t4.xy;
    vs_TEXCOORD4.z = 0.0;
    t1 = (-t3.xxxx) + unity_4LightPosX0;
    t4 = (-t3.yyyy) + unity_4LightPosY0;
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    t5 = t0.yyyy * t4;
    t4 = t4 * t4;
    t4 = t1 * t1 + t4;
    t1 = t1 * t0.xxxx + t5;
    t1 = t3 * t0.wwww + t1;
    t3 = t3 * t3 + t4;
    t4 = inversesqrt(t3);
    t3 = t3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    t1 = t1 * t4;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t1 = t3 * t1;
    t3.xyz = t1.yyy * unity_LightColor[1].xyz;
    t3.xyz = unity_LightColor[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t3.xyz;
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    t16_6.x = t0.y * t0.y;
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    t16_0 = t0.ywzx * t0;
    t16_7.x = dot(unity_SHBr, t16_0);
    t16_7.y = dot(unity_SHBg, t16_0);
    t16_7.z = dot(unity_SHBb, t16_0);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t1.xyz = t1.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t1.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb0 = t10_1.x<0.0;
    if((int(tb0) * int(0xffffffffu))!=0){discard;}
    vec3 txVec115 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec115, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec3 tmpvar_26;
  tmpvar_26 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_26.xz;
  billboardPos_7.y = (tmpvar_26.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_27;
    vPos_27 = billboardPos_7;
    highp float fMoveAmount_28;
    highp float fAdjust_29;
    highp float fLength_30;
    fLength_30 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_31;
    tmpvar_31 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_29 = tmpvar_31;
    if ((tmpvar_31 != 0.0)) {
      fAdjust_29 = pow (tmpvar_31, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_32.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_33;
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    tmpvar_33 = (((
      (tmpvar_34 * tmpvar_34)
     * 
      (3.0 - (2.0 * tmpvar_34))
    ) - 0.5) * 2.0);
    fMoveAmount_28 = ((_ST_WindGlobal.y * (tmpvar_33.x + 
      (tmpvar_33.y * tmpvar_33.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_28 = (fMoveAmount_28 * fAdjust_29);
    vPos_27.xz = (tmpvar_26.xz + (_ST_WindVector.xz * fMoveAmount_28));
    vPos_27 = (normalize(vPos_27) * fLength_30);
    billboardPos_7 = vPos_27;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_35;
  tmpvar_35 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_36;
  tmpvar_36 = (fract(abs(tmpvar_35)) * tmpvar_10.xxx);
  highp float tmpvar_37;
  if ((tmpvar_35.x >= 0.0)) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = -(tmpvar_36.x);
  };
  highp vec4 tmpvar_38;
  tmpvar_38 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_37))];
  if ((tmpvar_38.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_38.xy - (tmpvar_38.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_38.xy + (tmpvar_38.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_39;
  tmpvar_39 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_39;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_40;
  tmpvar_40 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_3 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_16));
  worldTangent_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_2.x;
  tmpvar_48.y = tmpvar_47.x;
  tmpvar_48.z = worldNormal_3.x;
  tmpvar_48.w = tmpvar_40.x;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.y;
  tmpvar_49.y = tmpvar_47.y;
  tmpvar_49.z = worldNormal_3.y;
  tmpvar_49.w = tmpvar_40.y;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.z;
  tmpvar_50.y = tmpvar_47.z;
  tmpvar_50.z = worldNormal_3.z;
  tmpvar_50.w = tmpvar_40.z;
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_3;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = (x2_53 + (unity_SHC.xyz * (
    (normal_52.x * normal_52.x)
   - 
    (normal_52.y * normal_52.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t10.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t10.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t20.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    t11 = float(1.0) / _ST_WindGlobal.z;
    t20.x = in_COLOR0.w * 255.0;
    tu20 = uint(t20.x);
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    t3.y = t29 * in_TEXCOORD1.y;
    t11 = (-t11) * 0.25 + t3.y;
    t11 = max(t11, 0.0);
    t11 = t11 * _ST_WindGlobal.z;
    t29 = log2(t11);
    t29 = t29 * _ST_WindGlobal.w;
    t29 = exp2(t29);
    tb30 = t11!=0.0;
    t11 = (tb30) ? t29 : t11;
    t2.x = t11 * t2.x;
    t11 = in_TEXCOORD0.x + -0.5;
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    t11 = t11 * in_TEXCOORD1.x;
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t29 = dot(t4.xyz, t4.xyz);
    t29 = inversesqrt(t29);
    t0.xy = vec2(t29) * t4.xz;
    t0.zw = (-t0.yy);
    t29 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t29 = inversesqrt(t29);
    t4.xy = vec2(t29) * t4.xy;
    t3.xz = vec2(t11) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t30 = dot(t3.xyz, t3.xyz);
    t30 = sqrt(t30);
    t2.xyw = t2.xyw * vec3(t30);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t0.x = t4.y * _World2Object[0].x;
    t0.y = t4.y * _World2Object[1].x;
    t0.zw = t4.yy * _World2Object[2].xx;
    t3.x = (-t4.x) * _World2Object[0].z;
    t3.y = (-t4.x) * _World2Object[1].z;
    t3.zw = (-t4.xx) * _World2Object[2].zz;
    t0 = t0 + t3;
    t1 = dot(t0.xyw, t0.xyw);
    t1 = inversesqrt(t1);
    t0 = t0 * vec4(t1);
    t3.xyz = t4.yyy * _Object2World[2].yzx;
    t3.xyz = _Object2World[0].yzx * t4.xxx + t3.xyz;
    t1 = dot(t3.xyz, t3.xyz);
    t1 = inversesqrt(t1);
    t3.xyz = vec3(t1) * t3.xyz;
    t10_6.xyz = t0.wxy * t3.xyz;
    t10_6.xyz = t0.ywx * t3.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD2.w = t2.w;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1 = t10.y + t10.x;
    t1 = t10.z + t1;
    t1 = fract(t1);
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    vs_TEXCOORD4.z = t1;
    t1 = max(abs(t4.y), abs(t4.x));
    t1 = float(1.0) / t1;
    t10.x = min(abs(t4.y), abs(t4.x));
    t1 = t1 * t10.x;
    t10.x = t1 * t1;
    t19.x = t10.x * 0.0208350997 + -0.0851330012;
    t19.x = t10.x * t19.x + 0.180141002;
    t19.x = t10.x * t19.x + -0.330299497;
    t10.x = t10.x * t19.x + 0.999866009;
    t19.x = t10.x * t1;
    t19.x = t19.x * -2.0 + 1.57079637;
    tb28 = abs(t4.y)<abs(t4.x);
    t19.x = tb28 ? t19.x : float(0.0);
    t1 = t1 * t10.x + t19.x;
    tb10 = t4.y<(-t4.y);
    t10.x = tb10 ? -3.14159274 : float(0.0);
    t1 = t10.x + t1;
    t10.x = min(t4.y, (-t4.x));
    t19.x = max(t4.y, (-t4.x));
    tb19 = t19.x>=(-t19.x);
    tb10 = t10.x<(-t10.x);
    ti10 = int(uint(tb19) * 0xffffffffu & uint(tb10) * 0xffffffffu);
    t1 = (ti10 != 0) ? (-t1) : t1;
    tb10 = t1<0.0;
    t10.x = tb10 ? 6.28318548 : float(0.0);
    t1 = t10.x + t1;
    t1 = t1 + in_TEXCOORD1.z;
    t1 = t1 * _TreeInfo[int(tu20) + 0].y + 0.5;
    t1 = floor(t1);
    t1 = t1 / _TreeInfo[int(tu20) + 0].x;
    tb10 = t1>=(-t1);
    t1 = fract(abs(t1));
    t1 = (tb10) ? t1 : (-t1);
    t1 = t1 * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    tu1 = uint(t1);
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t2.xy;
    t16_7 = t0.y * t0.y;
    t16_7 = t0.x * t0.x + (-t16_7);
    t16_0 = t0.ywzx * t0;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_2 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.x;
  tmpvar_49.y = tmpvar_48.x;
  tmpvar_49.z = worldNormal_3.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.y;
  tmpvar_50.y = tmpvar_48.y;
  tmpvar_50.z = worldNormal_3.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_2.z;
  tmpvar_51.y = tmpvar_48.z;
  tmpvar_51.z = worldNormal_3.z;
  tmpvar_51.w = tmpvar_41.z;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_3;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_54 + (unity_SHC.xyz * (
    (normal_53.x * normal_53.x)
   - 
    (normal_53.y * normal_53.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_2 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.x;
  tmpvar_49.y = tmpvar_48.x;
  tmpvar_49.z = worldNormal_3.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.y;
  tmpvar_50.y = tmpvar_48.y;
  tmpvar_50.z = worldNormal_3.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_2.z;
  tmpvar_51.y = tmpvar_48.z;
  tmpvar_51.z = worldNormal_3.z;
  tmpvar_51.w = tmpvar_41.z;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_3;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  highp vec3 lightColor0_56;
  lightColor0_56 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_57;
  lightColor1_57 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_58;
  lightColor2_58 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_59;
  lightColor3_59 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_60;
  lightAttenSq_60 = unity_4LightAtten0;
  highp vec3 normal_61;
  normal_61 = worldNormal_3;
  highp vec3 col_62;
  highp vec4 ndotl_63;
  highp vec4 lengthSq_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosZ0 - tmpvar_41.z);
  lengthSq_64 = (tmpvar_65 * tmpvar_65);
  lengthSq_64 = (lengthSq_64 + (tmpvar_66 * tmpvar_66));
  lengthSq_64 = (lengthSq_64 + (tmpvar_67 * tmpvar_67));
  ndotl_63 = (tmpvar_65 * normal_61.x);
  ndotl_63 = (ndotl_63 + (tmpvar_66 * normal_61.y));
  ndotl_63 = (ndotl_63 + (tmpvar_67 * normal_61.z));
  highp vec4 tmpvar_68;
  tmpvar_68 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_63 * inversesqrt(lengthSq_64)));
  ndotl_63 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * (1.0/((1.0 + 
    (lengthSq_64 * lightAttenSq_60)
  ))));
  col_62 = (lightColor0_56 * tmpvar_69.x);
  col_62 = (col_62 + (lightColor1_57 * tmpvar_69.y));
  col_62 = (col_62 + (lightColor2_58 * tmpvar_69.z));
  col_62 = (col_62 + (lightColor3_59 * tmpvar_69.w));
  tmpvar_5 = ((x2_54 + (unity_SHC.xyz * 
    ((normal_53.x * normal_53.x) - (normal_53.y * normal_53.y))
  )) + col_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t10.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t10.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t20.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    t11 = float(1.0) / _ST_WindGlobal.z;
    t20.x = in_COLOR0.w * 255.0;
    tu20 = uint(t20.x);
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    t3.y = t29 * in_TEXCOORD1.y;
    t11 = (-t11) * 0.25 + t3.y;
    t11 = max(t11, 0.0);
    t11 = t11 * _ST_WindGlobal.z;
    t29 = log2(t11);
    t29 = t29 * _ST_WindGlobal.w;
    t29 = exp2(t29);
    tb30 = t11!=0.0;
    t11 = (tb30) ? t29 : t11;
    t2.x = t11 * t2.x;
    t11 = in_TEXCOORD0.x + -0.5;
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    t11 = t11 * in_TEXCOORD1.x;
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t29 = dot(t4.xyz, t4.xyz);
    t29 = inversesqrt(t29);
    t0.xy = vec2(t29) * t4.xz;
    t0.zw = (-t0.yy);
    t29 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t29 = inversesqrt(t29);
    t4.xy = vec2(t29) * t4.xy;
    t3.xz = vec2(t11) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t30 = dot(t3.xyz, t3.xyz);
    t30 = sqrt(t30);
    t2.xyw = t2.xyw * vec3(t30);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t2.x;
    t0.x = t4.y * _World2Object[0].x;
    t0.y = t4.y * _World2Object[1].x;
    t0.zw = t4.yy * _World2Object[2].xx;
    t3.x = (-t4.x) * _World2Object[0].z;
    t3.y = (-t4.x) * _World2Object[1].z;
    t3.zw = (-t4.xx) * _World2Object[2].zz;
    t0 = t0 + t3;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t3.xyz = t4.yyy * _Object2World[2].yzx;
    t3.xyz = _Object2World[0].yzx * t4.xxx + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_6.xyz = t0.wxy * t3.xyz;
    t10_6.xyz = t0.ywx * t3.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.w = t2.y;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.w = t2.w;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = t10.y + t10.x;
    t1.x = t10.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19.x = t10.x * 0.0208350997 + -0.0851330012;
    t19.x = t10.x * t19.x + 0.180141002;
    t19.x = t10.x * t19.x + -0.330299497;
    t10.x = t10.x * t19.x + 0.999866009;
    t19.x = t10.x * t1.x;
    t19.x = t19.x * -2.0 + 1.57079637;
    tb28 = abs(t4.y)<abs(t4.x);
    t19.x = tb28 ? t19.x : float(0.0);
    t1.x = t1.x * t10.x + t19.x;
    tb10 = t4.y<(-t4.y);
    t10.x = tb10 ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t4.y, (-t4.x));
    t19.x = max(t4.y, (-t4.x));
    tb19 = t19.x>=(-t19.x);
    tb10 = t10.x<(-t10.x);
    ti10 = int(uint(tb19) * 0xffffffffu & uint(tb10) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    tb10 = t1.x<0.0;
    t10.x = tb10 ? 6.28318548 : float(0.0);
    t1.x = t10.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    tb10 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb10) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    tu1 = uint(t1.x);
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t3.xy;
    t1 = (-t2.wwww) + unity_4LightPosZ0;
    t3 = (-t2.xxxx) + unity_4LightPosX0;
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    t4 = t0.yyyy * t2;
    t2 = t2 * t2;
    t2 = t3 * t3 + t2;
    t3 = t3 * t0.xxxx + t4;
    t3 = t1 * t0.wwww + t3;
    t1 = t1 * t1 + t2;
    t2 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t2 = t2 * t3;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t1 = t1 * t2;
    t2.xyz = t1.yyy * unity_LightColor[1].xyz;
    t2.xyz = unity_LightColor[0].xyz * t1.xxx + t2.xyz;
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t2.xyz;
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    t16_7.x = t0.y * t0.y;
    t16_7.x = t0.x * t0.x + (-t16_7.x);
    t16_0 = t0.ywzx * t0;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    t1.xyz = t1.xyz + t16_7.xyz;
    vs_TEXCOORD5.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_34.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_12.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_3 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_18));
  worldTangent_2 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.x;
  tmpvar_50.y = tmpvar_49.x;
  tmpvar_50.z = worldNormal_3.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_2.y;
  tmpvar_51.y = tmpvar_49.y;
  tmpvar_51.z = worldNormal_3.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_2.z;
  tmpvar_52.y = tmpvar_49.z;
  tmpvar_52.z = worldNormal_3.z;
  tmpvar_52.w = tmpvar_42.z;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_3;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  highp vec3 lightColor0_57;
  lightColor0_57 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_58;
  lightColor1_58 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_59;
  lightColor2_59 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_60;
  lightColor3_60 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_61;
  lightAttenSq_61 = unity_4LightAtten0;
  highp vec3 normal_62;
  normal_62 = worldNormal_3;
  highp vec3 col_63;
  highp vec4 ndotl_64;
  highp vec4 lengthSq_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosZ0 - tmpvar_42.z);
  lengthSq_65 = (tmpvar_66 * tmpvar_66);
  lengthSq_65 = (lengthSq_65 + (tmpvar_67 * tmpvar_67));
  lengthSq_65 = (lengthSq_65 + (tmpvar_68 * tmpvar_68));
  ndotl_64 = (tmpvar_66 * normal_62.x);
  ndotl_64 = (ndotl_64 + (tmpvar_67 * normal_62.y));
  ndotl_64 = (ndotl_64 + (tmpvar_68 * normal_62.z));
  highp vec4 tmpvar_69;
  tmpvar_69 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_64 * inversesqrt(lengthSq_65)));
  ndotl_64 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * (1.0/((1.0 + 
    (lengthSq_65 * lightAttenSq_61)
  ))));
  col_63 = (lightColor0_57 * tmpvar_70.x);
  col_63 = (col_63 + (lightColor1_58 * tmpvar_70.y));
  col_63 = (col_63 + (lightColor2_59 * tmpvar_70.z));
  col_63 = (col_63 + (lightColor3_60 * tmpvar_70.w));
  tmpvar_5 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + col_63);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_27.xz;
  billboardPos_8.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_8;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_33.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_8 = vPos_28;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_11.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_3 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_2 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_2.x;
  tmpvar_49.y = tmpvar_48.x;
  tmpvar_49.z = worldNormal_3.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.y;
  tmpvar_50.y = tmpvar_48.y;
  tmpvar_50.z = worldNormal_3.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_2.z;
  tmpvar_51.y = tmpvar_48.z;
  tmpvar_51.z = worldNormal_3.z;
  tmpvar_51.w = tmpvar_41.z;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_3;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_54 + (unity_SHC.xyz * (
    (normal_53.x * normal_53.x)
   - 
    (normal_53.y * normal_53.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t10.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t10.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t20.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    t11 = float(1.0) / _ST_WindGlobal.z;
    t20.x = in_COLOR0.w * 255.0;
    tu20 = uint(t20.x);
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    t3.y = t29 * in_TEXCOORD1.y;
    t11 = (-t11) * 0.25 + t3.y;
    t11 = max(t11, 0.0);
    t11 = t11 * _ST_WindGlobal.z;
    t29 = log2(t11);
    t29 = t29 * _ST_WindGlobal.w;
    t29 = exp2(t29);
    tb30 = t11!=0.0;
    t11 = (tb30) ? t29 : t11;
    t2.x = t11 * t2.x;
    t11 = in_TEXCOORD0.x + -0.5;
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    t11 = t11 * in_TEXCOORD1.x;
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t29 = dot(t4.xyz, t4.xyz);
    t29 = inversesqrt(t29);
    t0.xy = vec2(t29) * t4.xz;
    t0.zw = (-t0.yy);
    t29 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t29 = inversesqrt(t29);
    t4.xy = vec2(t29) * t4.xy;
    t3.xz = vec2(t11) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t30 = dot(t3.xyz, t3.xyz);
    t30 = sqrt(t30);
    t2.xyw = t2.xyw * vec3(t30);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t3.x;
    t0.x = t4.y * _World2Object[0].x;
    t0.y = t4.y * _World2Object[1].x;
    t0.zw = t4.yy * _World2Object[2].xx;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    t0 = t0 + t5;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1.x = dot(t5.xyz, t5.xyz);
    t1.x = inversesqrt(t1.x);
    t5.xyz = t1.xxx * t5.xyz;
    t10_6.xyz = t0.wxy * t5.xyz;
    t10_6.xyz = t0.ywx * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.w = t3.y;
    vs_TEXCOORD2.w = t3.z;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = t10.y + t10.x;
    t1.x = t10.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19.x = t10.x * 0.0208350997 + -0.0851330012;
    t19.x = t10.x * t19.x + 0.180141002;
    t19.x = t10.x * t19.x + -0.330299497;
    t10.x = t10.x * t19.x + 0.999866009;
    t19.x = t10.x * t1.x;
    t19.x = t19.x * -2.0 + 1.57079637;
    tb28 = abs(t4.y)<abs(t4.x);
    t19.x = tb28 ? t19.x : float(0.0);
    t1.x = t1.x * t10.x + t19.x;
    tb10 = t4.y<(-t4.y);
    t10.x = tb10 ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t4.y, (-t4.x));
    t19.x = max(t4.y, (-t4.x));
    tb19 = t19.x>=(-t19.x);
    tb10 = t10.x<(-t10.x);
    ti10 = int(uint(tb19) * 0xffffffffu & uint(tb10) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    tb10 = t1.x<0.0;
    t10.x = tb10 ? 6.28318548 : float(0.0);
    t1.x = t10.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    tb10 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb10) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    tu1 = uint(t1.x);
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t3.xy;
    t16_7 = t0.y * t0.y;
    t16_7 = t0.x * t0.x + (-t16_7);
    t16_0 = t0.ywzx * t0;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec95 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec95, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_28.xz;
  billboardPos_9.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_9;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_34.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_9 = vPos_29;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + _glesMultiTexCoord1.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_12.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_3 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_18));
  worldTangent_2 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_2.x;
  tmpvar_50.y = tmpvar_49.x;
  tmpvar_50.z = worldNormal_3.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_2.y;
  tmpvar_51.y = tmpvar_49.y;
  tmpvar_51.z = worldNormal_3.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_2.z;
  tmpvar_52.y = tmpvar_49.z;
  tmpvar_52.z = worldNormal_3.z;
  tmpvar_52.w = tmpvar_42.z;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_3;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  highp vec3 lightColor0_57;
  lightColor0_57 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_58;
  lightColor1_58 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_59;
  lightColor2_59 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_60;
  lightColor3_60 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_61;
  lightAttenSq_61 = unity_4LightAtten0;
  highp vec3 normal_62;
  normal_62 = worldNormal_3;
  highp vec3 col_63;
  highp vec4 ndotl_64;
  highp vec4 lengthSq_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosZ0 - tmpvar_42.z);
  lengthSq_65 = (tmpvar_66 * tmpvar_66);
  lengthSq_65 = (lengthSq_65 + (tmpvar_67 * tmpvar_67));
  lengthSq_65 = (lengthSq_65 + (tmpvar_68 * tmpvar_68));
  ndotl_64 = (tmpvar_66 * normal_62.x);
  ndotl_64 = (ndotl_64 + (tmpvar_67 * normal_62.y));
  ndotl_64 = (ndotl_64 + (tmpvar_68 * normal_62.z));
  highp vec4 tmpvar_69;
  tmpvar_69 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_64 * inversesqrt(lengthSq_65)));
  ndotl_64 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * (1.0/((1.0 + 
    (lengthSq_65 * lightAttenSq_61)
  ))));
  col_63 = (lightColor0_57 * tmpvar_70.x);
  col_63 = (col_63 + (lightColor1_58 * tmpvar_70.y));
  col_63 = (col_63 + (lightColor2_59 * tmpvar_70.z));
  col_63 = (col_63 + (lightColor3_60 * tmpvar_70.w));
  tmpvar_5 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + col_63);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t2.x = t10.x + in_TEXCOORD1.w;
    t2.y = in_TEXCOORD1.w * 0.800000012 + t10.y;
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = fract(t2.xy);
    t2.xy = t2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t2.xy) * abs(t2.xy);
    t2.xy = -abs(t2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t2.xy = t20.xy * t2.xy + vec2(-0.5, -0.5);
    t2.xy = t2.xy + t2.xy;
    t2.x = t2.y * t2.y + t2.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    t11 = float(1.0) / _ST_WindGlobal.z;
    t20.x = in_COLOR0.w * 255.0;
    tu20 = uint(t20.x);
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    t3.y = t29 * in_TEXCOORD1.y;
    t11 = (-t11) * 0.25 + t3.y;
    t11 = max(t11, 0.0);
    t11 = t11 * _ST_WindGlobal.z;
    t29 = log2(t11);
    t29 = t29 * _ST_WindGlobal.w;
    t29 = exp2(t29);
    tb30 = t11!=0.0;
    t11 = (tb30) ? t29 : t11;
    t2.x = t11 * t2.x;
    t11 = in_TEXCOORD0.x + -0.5;
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    t11 = t11 * in_TEXCOORD1.x;
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    t29 = dot(t4.xyz, t4.xyz);
    t29 = inversesqrt(t29);
    t0.xy = vec2(t29) * t4.xz;
    t0.zw = (-t0.yy);
    t29 = dot(t0.xz, t0.xw);
    t4.xy = t0.yx * vec2(-1.0, 1.0);
    t29 = inversesqrt(t29);
    t4.xy = vec2(t29) * t4.xy;
    t3.xz = vec2(t11) * t4.xy;
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    t5.y = t3.y;
    t2.x = dot(t5.xyz, t5.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyw = t2.xxx * t5.xyz;
    t30 = dot(t3.xyz, t3.xyz);
    t30 = sqrt(t30);
    t2.xyw = t2.xyw * vec3(t30);
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t2.wwww + t0;
    gl_Position = t0 + glstate_matrix_mvp[3];
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t3.x;
    t0.x = t4.y * _World2Object[0].x;
    t0.y = t4.y * _World2Object[1].x;
    t0.zw = t4.yy * _World2Object[2].xx;
    t5.x = (-t4.x) * _World2Object[0].z;
    t5.y = (-t4.x) * _World2Object[1].z;
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    t0 = t0 + t5;
    t1.x = dot(t0.xyw, t0.xyw);
    t1.x = inversesqrt(t1.x);
    t0 = t0 * t1.xxxx;
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    t1.x = dot(t5.xyz, t5.xyz);
    t1.x = inversesqrt(t1.x);
    t5.xyz = t1.xxx * t5.xyz;
    t10_6.xyz = t0.wxy * t5.xyz;
    t10_6.xyz = t0.ywx * t5.yzx + (-t10_6.xyz);
    t10_6.xyz = t10_6.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_6.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD1.w = t3.y;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD1.y = t10_6.y;
    vs_TEXCOORD2.y = t10_6.z;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD2.w = t3.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD3 = _Color;
    t1.x = t10.y + t10.x;
    t1.x = t10.z + t1.x;
    t1.x = fract(t1.x);
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    vs_TEXCOORD4.z = t1.x;
    t1.x = max(abs(t4.y), abs(t4.x));
    t1.x = float(1.0) / t1.x;
    t10.x = min(abs(t4.y), abs(t4.x));
    t1.x = t1.x * t10.x;
    t10.x = t1.x * t1.x;
    t19.x = t10.x * 0.0208350997 + -0.0851330012;
    t19.x = t10.x * t19.x + 0.180141002;
    t19.x = t10.x * t19.x + -0.330299497;
    t10.x = t10.x * t19.x + 0.999866009;
    t19.x = t10.x * t1.x;
    t19.x = t19.x * -2.0 + 1.57079637;
    tb28 = abs(t4.y)<abs(t4.x);
    t19.x = tb28 ? t19.x : float(0.0);
    t1.x = t1.x * t10.x + t19.x;
    tb10 = t4.y<(-t4.y);
    t10.x = tb10 ? -3.14159274 : float(0.0);
    t1.x = t10.x + t1.x;
    t10.x = min(t4.y, (-t4.x));
    t19.x = max(t4.y, (-t4.x));
    tb19 = t19.x>=(-t19.x);
    tb10 = t10.x<(-t10.x);
    ti10 = int(uint(tb19) * 0xffffffffu & uint(tb10) * 0xffffffffu);
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    tb10 = t1.x<0.0;
    t10.x = tb10 ? 6.28318548 : float(0.0);
    t1.x = t10.x + t1.x;
    t1.x = t1.x + in_TEXCOORD1.z;
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    tb10 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb10) ? t1.x : (-t1.x);
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    tu1 = uint(t1.x);
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    t1 = (-t3.xxxx) + unity_4LightPosX0;
    t4 = (-t3.yyyy) + unity_4LightPosY0;
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    t5 = t0.yyyy * t4;
    t4 = t4 * t4;
    t4 = t1 * t1 + t4;
    t1 = t1 * t0.xxxx + t5;
    t1 = t3 * t0.wwww + t1;
    t3 = t3 * t3 + t4;
    t4 = inversesqrt(t3);
    t3 = t3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    t1 = t1 * t4;
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    t1 = t3 * t1;
    t3.xyz = t1.yyy * unity_LightColor[1].xyz;
    t3.xyz = unity_LightColor[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t3.xyz;
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    t16_7.x = t0.y * t0.y;
    t16_7.x = t0.x * t0.x + (-t16_7.x);
    t16_0 = t0.ywzx * t0;
    t16_8.x = dot(unity_SHBr, t16_0);
    t16_8.y = dot(unity_SHBg, t16_0);
    t16_8.z = dot(unity_SHBb, t16_0);
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    t1.xyz = t1.xyz + t16_7.xyz;
    vs_TEXCOORD5.xyz = t1.xyz;
    t0 = t2.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t2.xxxx + t0;
    t0 = _Object2World[2] * t2.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec96 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec96, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_26;
  hPos_26 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_27;
  highp vec4 o_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (hPos_26 * 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = (tmpvar_29.y * _ProjectionParams.x);
  o_28.xy = (tmpvar_30 + tmpvar_29.w);
  o_28.zw = hPos_26.zw;
  highp vec3 tmpvar_31;
  tmpvar_31 = o_28.xyw;
  screenPos_27 = tmpvar_31;
  screenPos_27.xy = (screenPos_27.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_35;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = worldNormal_1;
  mediump vec4 normal_37;
  normal_37 = tmpvar_36;
  mediump vec3 x2_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_39);
  x2_38.y = dot (unity_SHBg, tmpvar_39);
  x2_38.z = dot (unity_SHBb, tmpvar_39);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_27;
  xlv_TEXCOORD5 = (x2_38 + (unity_SHC.xyz * (
    (normal_37.x * normal_37.x)
   - 
    (normal_37.y * normal_37.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
mediump float t16_2;
highp vec4 t3;
bool tb3;
mediump vec3 t16_4;
highp float t5;
highp float t6;
bool tb6;
highp vec2 t10;
highp vec2 t13;
highp float t15;
highp uint tu15;
highp float t16;
bool tb16;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t10.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t10.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    t5 = float(1.0) / _ST_WindGlobal.z;
    t10.x = in_TEXCOORD0.x + -0.5;
    t15 = in_COLOR0.w * 255.0;
    tu15 = uint(t15);
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    t10.x = t10.x * in_TEXCOORD1.x;
    t1.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    t1.w = t10.x * in_TEXCOORD1.y + t1.y;
    t5 = (-t5) * 0.25 + t1.w;
    t5 = max(t5, 0.0);
    t5 = t5 * _ST_WindGlobal.z;
    t10.x = log2(t5);
    t10.x = t10.x * _ST_WindGlobal.w;
    t10.x = exp2(t10.x);
    tb6 = t5!=0.0;
    t5 = (tb6) ? t10.x : t5;
    t0.x = t5 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t6 = dot(t0.xyz, t0.xyz);
    t6 = inversesqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t6 = dot(t1.xzw, t1.xzw);
    t6 = sqrt(t6);
    t0.xyz = t0.xyz * vec3(t6);
    t16_2 = _WindEnabled * _WindQuality;
    tb6 = 0.0<t16_2;
    t0.xyz = (bool(tb6)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t16 = dot(t1.xyz, t1.xyz);
    t16 = inversesqrt(t16);
    t1.xyz = vec3(t16) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t16 = in_TEXCOORD1.z + _CameraXZAngle;
    t16 = t16 * _TreeInfo[int(tu15) + 0].y + 0.5;
    t16 = floor(t16);
    t16 = t16 / _TreeInfo[int(tu15) + 0].x;
    tb3 = t16>=(-t16);
    t16 = fract(abs(t16));
    t16 = (tb3) ? t16 : (-t16);
    t15 = t16 * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    tu15 = uint(t15);
    tb16 = _ImageTexCoords[int(tu15) + 0].w<0.0;
    t3.xy = (-_ImageTexCoords[int(tu15) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu15) + 0].xy;
    t13.xy = _ImageTexCoords[int(tu15) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu15) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb16)) ? t3.xy : t13.xy;
    vs_TEXCOORD3.z = 0.0;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t3.xz = t0.xz * vec2(0.5, 0.5);
    t15 = t0.y * _ProjectionParams.x;
    t3.w = t15 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t0.xy = t3.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    t16_2 = t1.y * t1.y;
    t16_2 = t1.x * t1.x + (-t16_2);
    t16_0 = t1.yzzx * t1.xyzz;
    t16_4.x = dot(unity_SHBr, t16_0);
    t16_4.y = dot(unity_SHBg, t16_0);
    t16_4.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_4.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = worldNormal_1;
  mediump vec4 normal_38;
  normal_38 = tmpvar_37;
  mediump vec3 x2_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_40);
  x2_39.y = dot (unity_SHBg, tmpvar_40);
  x2_39.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_28;
  xlv_TEXCOORD5 = (x2_39 + (unity_SHC.xyz * (
    (normal_38.x * normal_38.x)
   - 
    (normal_38.y * normal_38.y)
  )));
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec3 tmpvar_33;
  tmpvar_33 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_37;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = worldNormal_1;
  mediump vec4 normal_39;
  normal_39 = tmpvar_38;
  mediump vec3 x2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_39.xyzz * normal_39.yzzx);
  x2_40.x = dot (unity_SHBr, tmpvar_41);
  x2_40.y = dot (unity_SHBg, tmpvar_41);
  x2_40.z = dot (unity_SHBb, tmpvar_41);
  highp vec3 lightColor0_42;
  lightColor0_42 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_43;
  lightColor1_43 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_44;
  lightColor2_44 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_45;
  lightColor3_45 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_46;
  lightAttenSq_46 = unity_4LightAtten0;
  highp vec3 normal_47;
  normal_47 = worldNormal_1;
  highp vec3 col_48;
  highp vec4 ndotl_49;
  highp vec4 lengthSq_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = (unity_4LightPosX0 - tmpvar_33.x);
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_4LightPosY0 - tmpvar_33.y);
  highp vec4 tmpvar_53;
  tmpvar_53 = (unity_4LightPosZ0 - tmpvar_33.z);
  lengthSq_50 = (tmpvar_51 * tmpvar_51);
  lengthSq_50 = (lengthSq_50 + (tmpvar_52 * tmpvar_52));
  lengthSq_50 = (lengthSq_50 + (tmpvar_53 * tmpvar_53));
  ndotl_49 = (tmpvar_51 * normal_47.x);
  ndotl_49 = (ndotl_49 + (tmpvar_52 * normal_47.y));
  ndotl_49 = (ndotl_49 + (tmpvar_53 * normal_47.z));
  highp vec4 tmpvar_54;
  tmpvar_54 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_49 * inversesqrt(lengthSq_50)));
  ndotl_49 = tmpvar_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_54 * (1.0/((1.0 + 
    (lengthSq_50 * lightAttenSq_46)
  ))));
  col_48 = (lightColor0_42 * tmpvar_55.x);
  col_48 = (col_48 + (lightColor1_43 * tmpvar_55.y));
  col_48 = (col_48 + (lightColor2_44 * tmpvar_55.z));
  col_48 = (col_48 + (lightColor3_45 * tmpvar_55.w));
  tmpvar_4 = ((x2_40 + (unity_SHC.xyz * 
    ((normal_39.x * normal_39.x) - (normal_39.y * normal_39.y))
  )) + col_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_33;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_28;
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
highp float t8;
bool tb8;
highp vec2 t14;
highp vec2 t18;
highp float t21;
highp uint tu21;
highp float t22;
bool tb22;
bool tb24;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t14.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_TEXCOORD0.x + -0.5;
    t21 = in_COLOR0.w * 255.0;
    tu21 = uint(t21);
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    t14.x = t14.x * in_TEXCOORD1.x;
    t1.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    t1.w = t14.x * in_TEXCOORD1.y + t1.y;
    t7 = (-t7) * 0.25 + t1.w;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t14.x = log2(t7);
    t14.x = t14.x * _ST_WindGlobal.w;
    t14.x = exp2(t14.x);
    tb8 = t7!=0.0;
    t7 = (tb8) ? t14.x : t7;
    t0.x = t7 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t8 = dot(t0.xyz, t0.xyz);
    t8 = inversesqrt(t8);
    t0.xyz = t0.xyz * vec3(t8);
    t8 = dot(t1.xzw, t1.xzw);
    t8 = sqrt(t8);
    t0.xyz = t0.xyz * vec3(t8);
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t0.xyz = (bool(tb8)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD2 = _Color;
    t22 = in_TEXCOORD1.z + _CameraXZAngle;
    t22 = t22 * _TreeInfo[int(tu21) + 0].y + 0.5;
    t22 = floor(t22);
    t22 = t22 / _TreeInfo[int(tu21) + 0].x;
    tb24 = t22>=(-t22);
    t22 = fract(abs(t22));
    t22 = (tb24) ? t22 : (-t22);
    t21 = t22 * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    tu21 = uint(t21);
    tb22 = _ImageTexCoords[int(tu21) + 0].w<0.0;
    t4.xy = (-_ImageTexCoords[int(tu21) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu21) + 0].xy;
    t18.xy = _ImageTexCoords[int(tu21) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu21) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb22)) ? t4.xy : t18.xy;
    vs_TEXCOORD3.z = 0.0;
    t4.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t4.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t4.xz = t0.xz * vec2(0.5, 0.5);
    t21 = t0.y * _ProjectionParams.x;
    t4.w = t21 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t0.xy = t4.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    t2 = (-t3.yyyy) + unity_4LightPosY0;
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    t4 = t1.yyyy * t2;
    t2 = t2 * t2;
    t2 = t0 * t0 + t2;
    t0 = t0 * t1.xxxx + t4;
    t0 = t3 * t1.zzzz + t0;
    t2 = t3 * t3 + t2;
    t3 = inversesqrt(t2);
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t2 * t0;
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_5.x = t1.y * t1.y;
    t16_5.x = t1.x * t1.x + (-t16_5.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_1);
    t16_6.y = dot(unity_SHBg, t16_1);
    t16_6.z = dot(unity_SHBb, t16_1);
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    t0.xyz = t0.xyz + t16_5.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec3 tmpvar_34;
  tmpvar_34 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_38;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_1;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  highp vec3 lightColor0_43;
  lightColor0_43 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_44;
  lightColor1_44 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_45;
  lightColor2_45 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_46;
  lightColor3_46 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_47;
  lightAttenSq_47 = unity_4LightAtten0;
  highp vec3 normal_48;
  normal_48 = worldNormal_1;
  highp vec3 col_49;
  highp vec4 ndotl_50;
  highp vec4 lengthSq_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_4LightPosX0 - tmpvar_34.x);
  highp vec4 tmpvar_53;
  tmpvar_53 = (unity_4LightPosY0 - tmpvar_34.y);
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosZ0 - tmpvar_34.z);
  lengthSq_51 = (tmpvar_52 * tmpvar_52);
  lengthSq_51 = (lengthSq_51 + (tmpvar_53 * tmpvar_53));
  lengthSq_51 = (lengthSq_51 + (tmpvar_54 * tmpvar_54));
  ndotl_50 = (tmpvar_52 * normal_48.x);
  ndotl_50 = (ndotl_50 + (tmpvar_53 * normal_48.y));
  ndotl_50 = (ndotl_50 + (tmpvar_54 * normal_48.z));
  highp vec4 tmpvar_55;
  tmpvar_55 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_50 * inversesqrt(lengthSq_51)));
  ndotl_50 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_55 * (1.0/((1.0 + 
    (lengthSq_51 * lightAttenSq_47)
  ))));
  col_49 = (lightColor0_43 * tmpvar_56.x);
  col_49 = (col_49 + (lightColor1_44 * tmpvar_56.y));
  col_49 = (col_49 + (lightColor2_45 * tmpvar_56.z));
  col_49 = (col_49 + (lightColor3_46 * tmpvar_56.w));
  tmpvar_4 = ((x2_41 + (unity_SHC.xyz * 
    ((normal_40.x * normal_40.x) - (normal_40.y * normal_40.y))
  )) + col_49);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_34;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = worldNormal_1;
  mediump vec4 normal_38;
  normal_38 = tmpvar_37;
  mediump vec3 x2_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_40);
  x2_39.y = dot (unity_SHBg, tmpvar_40);
  x2_39.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_28;
  xlv_TEXCOORD5 = (x2_39 + (unity_SHC.xyz * (
    (normal_38.x * normal_38.x)
   - 
    (normal_38.y * normal_38.y)
  )));
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
mediump vec3 t16_5;
highp float t6;
highp float t7;
bool tb7;
highp vec2 t12;
highp vec2 t15;
highp float t18;
highp uint tu18;
highp float t19;
bool tb19;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t12.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t12.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    t6 = float(1.0) / _ST_WindGlobal.z;
    t12.x = in_TEXCOORD0.x + -0.5;
    t18 = in_COLOR0.w * 255.0;
    tu18 = uint(t18);
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    t12.x = t12.x * in_TEXCOORD1.x;
    t1.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    t1.w = t12.x * in_TEXCOORD1.y + t1.y;
    t6 = (-t6) * 0.25 + t1.w;
    t6 = max(t6, 0.0);
    t6 = t6 * _ST_WindGlobal.z;
    t12.x = log2(t6);
    t12.x = t12.x * _ST_WindGlobal.w;
    t12.x = exp2(t12.x);
    tb7 = t6!=0.0;
    t6 = (tb7) ? t12.x : t6;
    t0.x = t6 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t7 = dot(t0.xyz, t0.xyz);
    t7 = inversesqrt(t7);
    t0.xyz = t0.xyz * vec3(t7);
    t7 = dot(t1.xzw, t1.xzw);
    t7 = sqrt(t7);
    t0.xyz = t0.xyz * vec3(t7);
    t16_2 = _WindEnabled * _WindQuality;
    tb7 = 0.0<t16_2;
    t0.xyz = (bool(tb7)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t19 = dot(t1.xyz, t1.xyz);
    t19 = inversesqrt(t19);
    t1.xyz = vec3(t19) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t19 = in_TEXCOORD1.z + _CameraXZAngle;
    t19 = t19 * _TreeInfo[int(tu18) + 0].y + 0.5;
    t19 = floor(t19);
    t19 = t19 / _TreeInfo[int(tu18) + 0].x;
    tb3 = t19>=(-t19);
    t19 = fract(abs(t19));
    t19 = (tb3) ? t19 : (-t19);
    t18 = t19 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    tu18 = uint(t18);
    tb19 = _ImageTexCoords[int(tu18) + 0].w<0.0;
    t3.xy = (-_ImageTexCoords[int(tu18) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu18) + 0].xy;
    t15.xy = _ImageTexCoords[int(tu18) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu18) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb19)) ? t3.xy : t15.xy;
    vs_TEXCOORD3.z = 0.0;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = t3.xyz + glstate_matrix_mvp[3].xyw;
    t18 = t3.y * _ProjectionParams.x;
    t4.w = t18 * 0.5;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t3.xyz;
    t16_2 = t1.y * t1.y;
    t16_2 = t1.x * t1.x + (-t16_2);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_5.x = dot(unity_SHBr, t16_1);
    t16_5.y = dot(unity_SHBg, t16_1);
    t16_5.z = dot(unity_SHBb, t16_1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_5.xyz;
    t1 = t0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.zzzz + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    vec3 txVec116 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec116, 0.0);
    t16_22 = (-_LightShadowData.x) + 1.0;
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec3 tmpvar_34;
  tmpvar_34 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_38;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_1;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  highp vec3 lightColor0_43;
  lightColor0_43 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_44;
  lightColor1_44 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_45;
  lightColor2_45 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_46;
  lightColor3_46 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_47;
  lightAttenSq_47 = unity_4LightAtten0;
  highp vec3 normal_48;
  normal_48 = worldNormal_1;
  highp vec3 col_49;
  highp vec4 ndotl_50;
  highp vec4 lengthSq_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_4LightPosX0 - tmpvar_34.x);
  highp vec4 tmpvar_53;
  tmpvar_53 = (unity_4LightPosY0 - tmpvar_34.y);
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosZ0 - tmpvar_34.z);
  lengthSq_51 = (tmpvar_52 * tmpvar_52);
  lengthSq_51 = (lengthSq_51 + (tmpvar_53 * tmpvar_53));
  lengthSq_51 = (lengthSq_51 + (tmpvar_54 * tmpvar_54));
  ndotl_50 = (tmpvar_52 * normal_48.x);
  ndotl_50 = (ndotl_50 + (tmpvar_53 * normal_48.y));
  ndotl_50 = (ndotl_50 + (tmpvar_54 * normal_48.z));
  highp vec4 tmpvar_55;
  tmpvar_55 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_50 * inversesqrt(lengthSq_51)));
  ndotl_50 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_55 * (1.0/((1.0 + 
    (lengthSq_51 * lightAttenSq_47)
  ))));
  col_49 = (lightColor0_43 * tmpvar_56.x);
  col_49 = (col_49 + (lightColor1_44 * tmpvar_56.y));
  col_49 = (col_49 + (lightColor2_45 * tmpvar_56.z));
  col_49 = (col_49 + (lightColor3_46 * tmpvar_56.w));
  tmpvar_4 = ((x2_41 + (unity_SHC.xyz * 
    ((normal_40.x * normal_40.x) - (normal_40.y * normal_40.y))
  )) + col_49);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_34;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp float t8;
highp float t9;
bool tb9;
highp vec2 t16;
highp vec2 t20;
highp float t24;
highp uint tu24;
highp float t25;
bool tb25;
bool tb27;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t16.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_TEXCOORD0.x + -0.5;
    t24 = in_COLOR0.w * 255.0;
    tu24 = uint(t24);
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    t16.x = t16.x * in_TEXCOORD1.x;
    t1.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    t1.w = t16.x * in_TEXCOORD1.y + t1.y;
    t8 = (-t8) * 0.25 + t1.w;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t16.x = log2(t8);
    t16.x = t16.x * _ST_WindGlobal.w;
    t16.x = exp2(t16.x);
    tb9 = t8!=0.0;
    t8 = (tb9) ? t16.x : t8;
    t0.x = t8 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    t0.xyz = t0.xyz * vec3(t9);
    t9 = dot(t1.xzw, t1.xzw);
    t9 = sqrt(t9);
    t0.xyz = t0.xyz * vec3(t9);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t0.xyz = (bool(tb9)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t1.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t1.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t1.xyz = t1.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t1.xyz = t1.xyz + t3.xyz;
    t25 = dot(t1.xyz, t1.xyz);
    t25 = inversesqrt(t25);
    t1.xyz = vec3(t25) * t1.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD2 = _Color;
    t25 = in_TEXCOORD1.z + _CameraXZAngle;
    t25 = t25 * _TreeInfo[int(tu24) + 0].y + 0.5;
    t25 = floor(t25);
    t25 = t25 / _TreeInfo[int(tu24) + 0].x;
    tb27 = t25>=(-t25);
    t25 = fract(abs(t25));
    t25 = (tb27) ? t25 : (-t25);
    t24 = t25 * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    tu24 = uint(t24);
    tb25 = _ImageTexCoords[int(tu24) + 0].w<0.0;
    t4.xy = (-_ImageTexCoords[int(tu24) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu24) + 0].xy;
    t20.xy = _ImageTexCoords[int(tu24) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu24) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb25)) ? t4.xy : t20.xy;
    vs_TEXCOORD3.z = 0.0;
    t4.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t4.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t4.xyz;
    t4.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t4.xyz;
    t4.xyz = t4.xyz + glstate_matrix_mvp[3].xyw;
    t24 = t4.y * _ProjectionParams.x;
    t5.w = t24 * 0.5;
    t5.xz = t4.xz * vec2(0.5, 0.5);
    t5.xy = t5.zz + t5.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t4.xy = t5.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t4.xyz;
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    t4 = (-t3.yyyy) + unity_4LightPosY0;
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    t5 = t1.yyyy * t4;
    t4 = t4 * t4;
    t4 = t2 * t2 + t4;
    t2 = t2 * t1.xxxx + t5;
    t2 = t3 * t1.zzzz + t2;
    t3 = t3 * t3 + t4;
    t4 = inversesqrt(t3);
    t3 = t3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    t2 = t2 * t4;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t2 = t3 * t2;
    t3.xyz = t2.yyy * unity_LightColor[1].xyz;
    t3.xyz = unity_LightColor[0].xyz * t2.xxx + t3.xyz;
    t3.xyz = unity_LightColor[2].xyz * t2.zzz + t3.xyz;
    t3.xyz = unity_LightColor[3].xyz * t2.www + t3.xyz;
    t16_6.x = t1.y * t1.y;
    t16_6.x = t1.x * t1.x + (-t16_6.x);
    t16_1 = t1.yzzx * t1.xyzz;
    t16_7.x = dot(unity_SHBr, t16_1);
    t16_7.y = dot(unity_SHBg, t16_1);
    t16_7.z = dot(unity_SHBb, t16_1);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t3.xyz = t3.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t3.xyz;
    t1 = t0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * t0.xxxx + t1;
    t0 = _Object2World[2] * t0.zzzz + t1;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    vec3 txVec117 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec117, 0.0);
    t16_22 = (-_LightShadowData.x) + 1.0;
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesVertex;
  mediump vec3 tmpvar_5;
  highp vec3 billboardPos_6;
  highp float angle_7;
  highp float tmpvar_8;
  tmpvar_8 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeInfo[int(tmpvar_8)];
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeSize[int(tmpvar_8)];
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (_glesVertex.xyz + tmpvar_11);
  angle_7 = _CameraXZAngle;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_10.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_6.xz = tmpvar_13.xz;
  billboardPos_6.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_10.y)
   + tmpvar_10.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_6;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_6, billboardPos_6));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_12.x + _glesMultiTexCoord1.w);
    tmpvar_19.y = (tmpvar_12.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_6 = vPos_14;
  };
  tmpvar_4.xyz = (_glesVertex.xyz + billboardPos_6);
  tmpvar_4.w = 1.0;
  angle_7 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_7 * tmpvar_9.y)
   + 0.5)) / tmpvar_9.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_9.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_9.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_5.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_5.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_12.x + tmpvar_12.y) + tmpvar_12.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_26;
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_4);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_36;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = worldNormal_1;
  mediump vec4 normal_38;
  normal_38 = tmpvar_37;
  mediump vec3 x2_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_40);
  x2_39.y = dot (unity_SHBg, tmpvar_40);
  x2_39.z = dot (unity_SHBb, tmpvar_40);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = screenPos_28;
  xlv_TEXCOORD5 = (x2_39 + (unity_SHC.xyz * (
    (normal_38.x * normal_38.x)
   - 
    (normal_38.y * normal_38.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump float t16_4;
mediump vec3 t16_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.www + t3.xyz;
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t3.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t18 = t0.y * _ProjectionParams.x;
    t1.w = t18 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    t16_4 = t2.y * t2.y;
    t16_4 = t2.x * t2.x + (-t16_4);
    t16_0 = t2.yzzx * t2.xyzz;
    t16_5.x = dot(unity_SHBr, t16_0);
    t16_5.y = dot(unity_SHBg, t16_0);
    t16_5.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_4) + t16_5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    t16_4.x = max(t16_9.z, t16_9.y);
    t16_4.x = max(t16_9.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_0);
    t16_5.y = dot(unity_SHAg, t16_0);
    t16_5.z = dot(unity_SHAb, t16_0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_37;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = worldNormal_1;
  mediump vec4 normal_39;
  normal_39 = tmpvar_38;
  mediump vec3 x2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_39.xyzz * normal_39.yzzx);
  x2_40.x = dot (unity_SHBr, tmpvar_41);
  x2_40.y = dot (unity_SHBg, tmpvar_41);
  x2_40.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD5 = (x2_40 + (unity_SHC.xyz * (
    (normal_39.x * normal_39.x)
   - 
    (normal_39.y * normal_39.y)
  )));
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec3 tmpvar_34;
  tmpvar_34 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_38;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_1;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  highp vec3 lightColor0_43;
  lightColor0_43 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_44;
  lightColor1_44 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_45;
  lightColor2_45 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_46;
  lightColor3_46 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_47;
  lightAttenSq_47 = unity_4LightAtten0;
  highp vec3 normal_48;
  normal_48 = worldNormal_1;
  highp vec3 col_49;
  highp vec4 ndotl_50;
  highp vec4 lengthSq_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_4LightPosX0 - tmpvar_34.x);
  highp vec4 tmpvar_53;
  tmpvar_53 = (unity_4LightPosY0 - tmpvar_34.y);
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosZ0 - tmpvar_34.z);
  lengthSq_51 = (tmpvar_52 * tmpvar_52);
  lengthSq_51 = (lengthSq_51 + (tmpvar_53 * tmpvar_53));
  lengthSq_51 = (lengthSq_51 + (tmpvar_54 * tmpvar_54));
  ndotl_50 = (tmpvar_52 * normal_48.x);
  ndotl_50 = (ndotl_50 + (tmpvar_53 * normal_48.y));
  ndotl_50 = (ndotl_50 + (tmpvar_54 * normal_48.z));
  highp vec4 tmpvar_55;
  tmpvar_55 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_50 * inversesqrt(lengthSq_51)));
  ndotl_50 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_55 * (1.0/((1.0 + 
    (lengthSq_51 * lightAttenSq_47)
  ))));
  col_49 = (lightColor0_43 * tmpvar_56.x);
  col_49 = (col_49 + (lightColor1_44 * tmpvar_56.y));
  col_49 = (col_49 + (lightColor2_45 * tmpvar_56.z));
  col_49 = (col_49 + (lightColor3_46 * tmpvar_56.w));
  tmpvar_4 = ((x2_41 + (unity_SHC.xyz * 
    ((normal_40.x * normal_40.x) - (normal_40.y * normal_40.y))
  )) + col_49);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_34;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD5 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_4;
highp vec2 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
bool tb8;
highp float t9;
highp vec2 t16;
highp vec2 t17;
highp uint tu17;
highp float t24;
bool tb24;
bool tb25;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t17.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t24 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t9 = in_TEXCOORD0.x + -0.5;
    t17.x = in_COLOR0.w * 255.0;
    tu17 = uint(t17.x);
    t9 = t9 * _TreeSize[int(tu17) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t2.xyz = vec3(t9) * _BillboardTangent.xyzx.xyz;
    t9 = in_TEXCOORD0.y * _TreeSize[int(tu17) + 0].y + _TreeSize[int(tu17) + 0].z;
    t2.w = t9 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t9 = log2(t1.x);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    tb25 = t1.x!=0.0;
    t1.x = (tb25) ? t9 : t1.x;
    t24 = t24 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t24) + t2.xz;
    t3.y = t2.w;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t1.xyw = vec3(t24) * t3.xyz;
    t24 = dot(t2.xzw, t2.xzw);
    t24 = sqrt(t24);
    t1.xyw = vec3(t24) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb24 = 0.0<t16_4;
    t1.xyw = (bool(tb24)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t24 = dot(t2.xyz, t2.xyz);
    t24 = inversesqrt(t24);
    t2.xyz = vec3(t24) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.www + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu17) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu17) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu17) + 0].x + _TreeInfo[int(tu17) + 0].z;
    tu0 = uint(t0.x);
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t5.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb8)) ? t16.xy : t5.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t24 = t0.y * _ProjectionParams.x;
    t1.w = t24 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    t1 = (-t3.yyyy) + unity_4LightPosY0;
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    t4 = t2.yyyy * t1;
    t1 = t1 * t1;
    t1 = t0 * t0 + t1;
    t0 = t0 * t2.xxxx + t4;
    t0 = t3 * t2.zzzz + t0;
    t1 = t3 * t3 + t1;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_6.x = t2.y * t2.y;
    t16_6.x = t2.x * t2.x + (-t16_6.x);
    t16_1 = t2.yzzx * t2.xyzz;
    t16_7.x = dot(unity_SHBr, t16_1);
    t16_7.y = dot(unity_SHBg, t16_1);
    t16_7.z = dot(unity_SHBb, t16_1);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t0.xyz = t0.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    t16_4.x = max(t16_9.z, t16_9.y);
    t16_4.x = max(t16_9.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_0);
    t16_5.y = dot(unity_SHAg, t16_0);
    t16_5.z = dot(unity_SHAb, t16_0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_39;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_1;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  highp vec3 lightColor0_44;
  lightColor0_44 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_45;
  lightColor1_45 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_46;
  lightColor2_46 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_47;
  lightColor3_47 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_48;
  lightAttenSq_48 = unity_4LightAtten0;
  highp vec3 normal_49;
  normal_49 = worldNormal_1;
  highp vec3 col_50;
  highp vec4 ndotl_51;
  highp vec4 lengthSq_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (unity_4LightPosX0 - tmpvar_35.x);
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosY0 - tmpvar_35.y);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosZ0 - tmpvar_35.z);
  lengthSq_52 = (tmpvar_53 * tmpvar_53);
  lengthSq_52 = (lengthSq_52 + (tmpvar_54 * tmpvar_54));
  lengthSq_52 = (lengthSq_52 + (tmpvar_55 * tmpvar_55));
  ndotl_51 = (tmpvar_53 * normal_49.x);
  ndotl_51 = (ndotl_51 + (tmpvar_54 * normal_49.y));
  ndotl_51 = (ndotl_51 + (tmpvar_55 * normal_49.z));
  highp vec4 tmpvar_56;
  tmpvar_56 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_51 * inversesqrt(lengthSq_52)));
  ndotl_51 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_56 * (1.0/((1.0 + 
    (lengthSq_52 * lightAttenSq_48)
  ))));
  col_50 = (lightColor0_44 * tmpvar_57.x);
  col_50 = (col_50 + (lightColor1_45 * tmpvar_57.y));
  col_50 = (col_50 + (lightColor2_46 * tmpvar_57.z));
  col_50 = (col_50 + (lightColor3_47 * tmpvar_57.w));
  tmpvar_4 = ((x2_42 + (unity_SHC.xyz * 
    ((normal_41.x * normal_41.x) - (normal_41.y * normal_41.y))
  )) + col_50);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_35;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_27;
  tmpvar_27 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_27;
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_37;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = worldNormal_1;
  mediump vec4 normal_39;
  normal_39 = tmpvar_38;
  mediump vec3 x2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_39.xyzz * normal_39.yzzx);
  x2_40.x = dot (unity_SHBr, tmpvar_41);
  x2_40.y = dot (unity_SHBg, tmpvar_41);
  x2_40.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_5));
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD5 = (x2_40 + (unity_SHC.xyz * (
    (normal_39.x * normal_39.x)
   - 
    (normal_39.y * normal_39.y)
  )));
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_4;
mediump vec3 t16_5;
bool tb6;
highp float t7;
highp vec2 t12;
highp vec2 t13;
highp uint tu13;
highp float t18;
bool tb18;
bool tb19;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t13.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t13.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t18 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t18 = _ST_WindGlobal.y * t18 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t7 = in_TEXCOORD0.x + -0.5;
    t13.x = in_COLOR0.w * 255.0;
    tu13 = uint(t13.x);
    t7 = t7 * _TreeSize[int(tu13) + 0].x;
    t7 = t7 * in_TEXCOORD1.x;
    t2.xyz = vec3(t7) * _BillboardTangent.xyzx.xyz;
    t7 = in_TEXCOORD0.y * _TreeSize[int(tu13) + 0].y + _TreeSize[int(tu13) + 0].z;
    t2.w = t7 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t7 = log2(t1.x);
    t7 = t7 * _ST_WindGlobal.w;
    t7 = exp2(t7);
    tb19 = t1.x!=0.0;
    t1.x = (tb19) ? t7 : t1.x;
    t18 = t18 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t18) + t2.xz;
    t3.y = t2.w;
    t18 = dot(t3.xyz, t3.xyz);
    t18 = inversesqrt(t18);
    t1.xyw = vec3(t18) * t3.xyz;
    t18 = dot(t2.xzw, t2.xzw);
    t18 = sqrt(t18);
    t1.xyw = vec3(t18) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb18 = 0.0<t16_4;
    t1.xyw = (bool(tb18)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t18 = dot(t2.xyz, t2.xyz);
    t18 = inversesqrt(t18);
    t2.xyz = vec3(t18) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.www + t3.xyz;
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu13) + 0].x;
    tb6 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb6) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu13) + 0].x + _TreeInfo[int(tu13) + 0].z;
    tu0 = uint(t0.x);
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t3.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t0.w = t0.y * _ProjectionParams.x;
    t3.xzw = t0.xzw * vec3(0.5, 0.5, 0.5);
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t0.xy = t3.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    t16_4 = t2.y * t2.y;
    t16_4 = t2.x * t2.x + (-t16_4);
    t16_0 = t2.yzzx * t2.xyzz;
    t16_5.x = dot(unity_SHBr, t16_0);
    t16_5.y = dot(unity_SHBg, t16_0);
    t16_5.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_4) + t16_5.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    t16_4.x = max(t16_9.z, t16_9.y);
    t16_4.x = max(t16_9.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    vec3 txVec97 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec97, 0.0);
    t16_4.x = (-_LightShadowData.x) + 1.0;
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_0);
    t16_5.y = dot(unity_SHAg, t16_0);
    t16_5.z = dot(unity_SHAb, t16_0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_1 = tmpvar_39;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_1;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  highp vec3 lightColor0_44;
  lightColor0_44 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_45;
  lightColor1_45 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_46;
  lightColor2_46 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_47;
  lightColor3_47 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_48;
  lightAttenSq_48 = unity_4LightAtten0;
  highp vec3 normal_49;
  normal_49 = worldNormal_1;
  highp vec3 col_50;
  highp vec4 ndotl_51;
  highp vec4 lengthSq_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (unity_4LightPosX0 - tmpvar_35.x);
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosY0 - tmpvar_35.y);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosZ0 - tmpvar_35.z);
  lengthSq_52 = (tmpvar_53 * tmpvar_53);
  lengthSq_52 = (lengthSq_52 + (tmpvar_54 * tmpvar_54));
  lengthSq_52 = (lengthSq_52 + (tmpvar_55 * tmpvar_55));
  ndotl_51 = (tmpvar_53 * normal_49.x);
  ndotl_51 = (ndotl_51 + (tmpvar_54 * normal_49.y));
  ndotl_51 = (ndotl_51 + (tmpvar_55 * normal_49.z));
  highp vec4 tmpvar_56;
  tmpvar_56 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_51 * inversesqrt(lengthSq_52)));
  ndotl_51 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_56 * (1.0/((1.0 + 
    (lengthSq_52 * lightAttenSq_48)
  ))));
  col_50 = (lightColor0_44 * tmpvar_57.x);
  col_50 = (col_50 + (lightColor1_45 * tmpvar_57.y));
  col_50 = (col_50 + (lightColor2_46 * tmpvar_57.z));
  col_50 = (col_50 + (lightColor3_47 * tmpvar_57.w));
  tmpvar_4 = ((x2_42 + (unity_SHC.xyz * 
    ((normal_41.x * normal_41.x) - (normal_41.y * normal_41.y))
  )) + col_50);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_35;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
bool tb8;
highp float t9;
highp vec2 t16;
highp vec2 t17;
highp uint tu17;
highp float t24;
bool tb24;
bool tb25;
void main()
{
    t0.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = fract(t1.xy);
    t1.xy = t1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t1.xy) * abs(t1.xy);
    t1.xy = -abs(t1.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t1.xy = t17.xy * t1.xy + vec2(-0.5, -0.5);
    t1.xy = t1.xy + t1.xy;
    t24 = t1.y * t1.y + t1.x;
    t1.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t24 = _ST_WindGlobal.y * t24 + t1.x;
    t1.x = float(1.0) / _ST_WindGlobal.z;
    t9 = in_TEXCOORD0.x + -0.5;
    t17.x = in_COLOR0.w * 255.0;
    tu17 = uint(t17.x);
    t9 = t9 * _TreeSize[int(tu17) + 0].x;
    t9 = t9 * in_TEXCOORD1.x;
    t2.xyz = vec3(t9) * _BillboardTangent.xyzx.xyz;
    t9 = in_TEXCOORD0.y * _TreeSize[int(tu17) + 0].y + _TreeSize[int(tu17) + 0].z;
    t2.w = t9 * in_TEXCOORD1.y + t2.y;
    t1.x = (-t1.x) * 0.25 + t2.w;
    t1.x = max(t1.x, 0.0);
    t1.x = t1.x * _ST_WindGlobal.z;
    t9 = log2(t1.x);
    t9 = t9 * _ST_WindGlobal.w;
    t9 = exp2(t9);
    tb25 = t1.x!=0.0;
    t1.x = (tb25) ? t9 : t1.x;
    t24 = t24 * t1.x;
    t3.xz = _ST_WindVector.xz * vec2(t24) + t2.xz;
    t3.y = t2.w;
    t24 = dot(t3.xyz, t3.xyz);
    t24 = inversesqrt(t24);
    t1.xyw = vec3(t24) * t3.xyz;
    t24 = dot(t2.xzw, t2.xzw);
    t24 = sqrt(t24);
    t1.xyw = vec3(t24) * t1.xyw;
    t16_4 = _WindEnabled * _WindQuality;
    tb24 = 0.0<t16_4;
    t1.xyw = (bool(tb24)) ? t1.xyw : t2.xwz;
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t1.wwww + t2;
    gl_Position = t2 + glstate_matrix_mvp[3];
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    t2.xyz = t2.xyz + t3.xyz;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    t2.xyz = t2.xyz + t3.xyz;
    t24 = dot(t2.xyz, t2.xyz);
    t24 = inversesqrt(t24);
    t2.xyz = vec3(t24) * t2.xyz;
    vs_TEXCOORD0.xyz = t2.xyz;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.www + t3.xyz;
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD2 = _Color;
    t0.x = t0.y + t0.x;
    t0.x = t0.z + t0.x;
    t0.x = fract(t0.x);
    t0.x = t0.x * _HueVariation.w;
    t0.x = clamp(t0.x, 0.0, 1.0);
    vs_TEXCOORD3.z = t0.x;
    t0.x = in_TEXCOORD1.z + _CameraXZAngle;
    t0.x = t0.x * _TreeInfo[int(tu17) + 0].y + 0.5;
    t0.x = floor(t0.x);
    t0.x = t0.x / _TreeInfo[int(tu17) + 0].x;
    tb8 = t0.x>=(-t0.x);
    t0.x = fract(abs(t0.x));
    t0.x = (tb8) ? t0.x : (-t0.x);
    t0.x = t0.x * _TreeInfo[int(tu17) + 0].x + _TreeInfo[int(tu17) + 0].z;
    tu0 = uint(t0.x);
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    t5.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    vs_TEXCOORD3.xy = (bool(tb8)) ? t16.xy : t5.xy;
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.www + t0.xyz;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t0.w = t0.y * _ProjectionParams.x;
    t5.xzw = t0.xzw * vec3(0.5, 0.5, 0.5);
    t5.xy = t5.zz + t5.xw;
    t5.xy = t5.xy * _ScreenParams.xy;
    t0.xy = t5.xy * vec2(0.25, 0.25);
    vs_TEXCOORD4.xyz = t0.xyz;
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    t4 = (-t3.yyyy) + unity_4LightPosY0;
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    t5 = t2.yyyy * t4;
    t4 = t4 * t4;
    t4 = t0 * t0 + t4;
    t0 = t0 * t2.xxxx + t5;
    t0 = t3 * t2.zzzz + t0;
    t3 = t3 * t3 + t4;
    t4 = inversesqrt(t3);
    t3 = t3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    t0 = t0 * t4;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t3 * t0;
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_6.x = t2.y * t2.y;
    t16_6.x = t2.x * t2.x + (-t16_6.x);
    t16_2 = t2.yzzx * t2.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t0.xyz = t0.xyz + t16_6.xyz;
    vs_TEXCOORD5.xyz = t0.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.wwww + t0;
    t0 = t0 + _Object2World[3];
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD6 = t0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    t16_4.x = max(t16_9.z, t16_9.y);
    t16_4.x = max(t16_9.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    vec3 txVec118 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec118, 0.0);
    t16_4.x = (-_LightShadowData.x) + 1.0;
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_0);
    t16_5.y = dot(unity_SHAg, t16_0);
    t16_5.z = dot(unity_SHAb, t16_0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_14.xz;
  billboardPos_7.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_15;
    vPos_15 = billboardPos_7;
    highp float fMoveAmount_16;
    highp float fAdjust_17;
    highp float fLength_18;
    fLength_18 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_19;
    tmpvar_19 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_17 = tmpvar_19;
    if ((tmpvar_19 != 0.0)) {
      fAdjust_17 = pow (tmpvar_19, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.x = (tmpvar_13.x + _glesMultiTexCoord1.w);
    tmpvar_20.y = (tmpvar_13.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_21;
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    tmpvar_21 = (((
      (tmpvar_22 * tmpvar_22)
     * 
      (3.0 - (2.0 * tmpvar_22))
    ) - 0.5) * 2.0);
    fMoveAmount_16 = ((_ST_WindGlobal.y * (tmpvar_21.x + 
      (tmpvar_21.y * tmpvar_21.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_16 = (fMoveAmount_16 * fAdjust_17);
    vPos_15.xz = (tmpvar_14.xz + (_ST_WindVector.xz * fMoveAmount_16));
    vPos_15 = (normalize(vPos_15) * fLength_18);
    billboardPos_7 = vPos_15;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_23;
  tmpvar_23 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_24;
  tmpvar_24 = (fract(abs(tmpvar_23)) * tmpvar_10.x);
  highp float tmpvar_25;
  if ((tmpvar_23 >= 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = -(tmpvar_24);
  };
  highp vec4 tmpvar_26;
  tmpvar_26 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_25))];
  if ((tmpvar_26.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_26.xy - (tmpvar_26.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_26.xy + (tmpvar_26.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_33;
  tmpvar_33 = (_Object2World * tmpvar_5).xyz;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = _Object2World[0].xyz;
  tmpvar_38[1] = _Object2World[1].xyz;
  tmpvar_38[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * _BillboardTangent));
  worldTangent_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_2.x;
  tmpvar_42.y = tmpvar_41.x;
  tmpvar_42.z = worldNormal_3.x;
  tmpvar_42.w = tmpvar_33.x;
  highp vec4 tmpvar_43;
  tmpvar_43.x = worldTangent_2.y;
  tmpvar_43.y = tmpvar_41.y;
  tmpvar_43.z = worldNormal_3.y;
  tmpvar_43.w = tmpvar_33.y;
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.z;
  tmpvar_44.y = tmpvar_41.z;
  tmpvar_44.z = worldNormal_3.z;
  tmpvar_44.w = tmpvar_33.z;
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_3;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_42;
  xlv_TEXCOORD1 = tmpvar_43;
  xlv_TEXCOORD2 = tmpvar_44;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = screenPos_28;
  xlv_TEXCOORD6 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
lowp vec3 t10_4;
mediump float t16_5;
mediump vec3 t16_6;
highp float t7;
highp vec2 t8;
bool tb8;
highp vec2 t14;
highp float t21;
highp uint tu21;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t14.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t14.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    t7 = float(1.0) / _ST_WindGlobal.z;
    t14.x = in_TEXCOORD0.x + -0.5;
    t21 = in_COLOR0.w * 255.0;
    tu21 = uint(t21);
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    t14.x = t14.x * in_TEXCOORD1.x;
    t1.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    t1.w = t14.x * in_TEXCOORD1.y + t1.y;
    t7 = (-t7) * 0.25 + t1.w;
    t7 = max(t7, 0.0);
    t7 = t7 * _ST_WindGlobal.z;
    t14.x = log2(t7);
    t14.x = t14.x * _ST_WindGlobal.w;
    t14.x = exp2(t14.x);
    tb8 = t7!=0.0;
    t7 = (tb8) ? t14.x : t7;
    t0.x = t7 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t8.x = dot(t0.xyz, t0.xyz);
    t8.x = inversesqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t8.x = dot(t1.xzw, t1.xzw);
    t8.x = sqrt(t8.x);
    t0.xyz = t0.xyz * t8.xxx;
    t16_2 = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2;
    t0.xyz = (bool(tb8)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t3;
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t3;
    t1.x = dot(t2.xyw, t2.xyw);
    t1.x = inversesqrt(t1.x);
    t2 = t1.xxxx * t2;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t1.x = dot(t3.xyz, t3.xyz);
    t1.x = inversesqrt(t1.x);
    t3.xyz = t1.xxx * t3.xyz;
    t10_4.xyz = t2.wxy * t3.xyz;
    t10_4.xyz = t2.ywx * t3.yzx + (-t10_4.xyz);
    t10_4.xyz = t10_4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_4.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_4.y;
    vs_TEXCOORD2.y = t10_4.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t1.x = in_TEXCOORD1.z + _CameraXZAngle;
    t1.x = t1.x * _TreeInfo[int(tu21) + 0].y + 0.5;
    t1.x = floor(t1.x);
    t1.x = t1.x / _TreeInfo[int(tu21) + 0].x;
    tb8 = t1.x>=(-t1.x);
    t1.x = fract(abs(t1.x));
    t1.x = (tb8) ? t1.x : (-t1.x);
    t21 = t1.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    tu21 = uint(t21);
    tb1 = _ImageTexCoords[int(tu21) + 0].w<0.0;
    t8.xy = (-_ImageTexCoords[int(tu21) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu21) + 0].xy;
    t3.xy = _ImageTexCoords[int(tu21) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu21) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t3.xy;
    vs_TEXCOORD4.z = 0.0;
    t1.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t1.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t1.xz = t0.xz * vec2(0.5, 0.5);
    t21 = t0.y * _ProjectionParams.x;
    t1.w = t21 * 0.5;
    t1.xy = t1.zz + t1.xw;
    t1.xy = t1.xy * _ScreenParams.xy;
    t0.xy = t1.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t0.xyz;
    t16_5 = t2.y * t2.y;
    t16_5 = t2.x * t2.x + (-t16_5);
    t16_0 = t2.ywzx * t2;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t0);
    t16_5.y = dot(unity_SHAg, t0);
    t16_5.z = dot(unity_SHAb, t0);
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_34;
  tmpvar_34 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_2 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_43;
  tmpvar_43.x = worldTangent_2.x;
  tmpvar_43.y = tmpvar_42.x;
  tmpvar_43.z = worldNormal_3.x;
  tmpvar_43.w = tmpvar_34.x;
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.y;
  tmpvar_44.y = tmpvar_42.y;
  tmpvar_44.z = worldNormal_3.y;
  tmpvar_44.w = tmpvar_34.y;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_2.z;
  tmpvar_45.y = tmpvar_42.z;
  tmpvar_45.z = worldNormal_3.z;
  tmpvar_45.w = tmpvar_34.z;
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = worldNormal_3;
  mediump vec4 normal_47;
  normal_47 = tmpvar_46;
  mediump vec3 x2_48;
  mediump vec4 tmpvar_49;
  tmpvar_49 = (normal_47.xyzz * normal_47.yzzx);
  x2_48.x = dot (unity_SHBr, tmpvar_49);
  x2_48.y = dot (unity_SHBg, tmpvar_49);
  x2_48.z = dot (unity_SHBb, tmpvar_49);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_29;
  xlv_TEXCOORD6 = (x2_48 + (unity_SHC.xyz * (
    (normal_47.x * normal_47.x)
   - 
    (normal_47.y * normal_47.y)
  )));
  xlv_TEXCOORD7 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_15.xz;
  billboardPos_8.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_8;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_14.x + _glesMultiTexCoord1.w);
    tmpvar_21.y = (tmpvar_14.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_8 = vPos_16;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_11.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_34;
  tmpvar_34 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_2 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_43;
  tmpvar_43.x = worldTangent_2.x;
  tmpvar_43.y = tmpvar_42.x;
  tmpvar_43.z = worldNormal_3.x;
  tmpvar_43.w = tmpvar_34.x;
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.y;
  tmpvar_44.y = tmpvar_42.y;
  tmpvar_44.z = worldNormal_3.y;
  tmpvar_44.w = tmpvar_34.y;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_2.z;
  tmpvar_45.y = tmpvar_42.z;
  tmpvar_45.z = worldNormal_3.z;
  tmpvar_45.w = tmpvar_34.z;
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = worldNormal_3;
  mediump vec4 normal_47;
  normal_47 = tmpvar_46;
  mediump vec3 x2_48;
  mediump vec4 tmpvar_49;
  tmpvar_49 = (normal_47.xyzz * normal_47.yzzx);
  x2_48.x = dot (unity_SHBr, tmpvar_49);
  x2_48.y = dot (unity_SHBg, tmpvar_49);
  x2_48.z = dot (unity_SHBb, tmpvar_49);
  highp vec3 lightColor0_50;
  lightColor0_50 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_51;
  lightColor1_51 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_52;
  lightColor2_52 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_53;
  lightColor3_53 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_54;
  lightAttenSq_54 = unity_4LightAtten0;
  highp vec3 normal_55;
  normal_55 = worldNormal_3;
  highp vec3 col_56;
  highp vec4 ndotl_57;
  highp vec4 lengthSq_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosX0 - tmpvar_34.x);
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosY0 - tmpvar_34.y);
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosZ0 - tmpvar_34.z);
  lengthSq_58 = (tmpvar_59 * tmpvar_59);
  lengthSq_58 = (lengthSq_58 + (tmpvar_60 * tmpvar_60));
  lengthSq_58 = (lengthSq_58 + (tmpvar_61 * tmpvar_61));
  ndotl_57 = (tmpvar_59 * normal_55.x);
  ndotl_57 = (ndotl_57 + (tmpvar_60 * normal_55.y));
  ndotl_57 = (ndotl_57 + (tmpvar_61 * normal_55.z));
  highp vec4 tmpvar_62;
  tmpvar_62 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_57 * inversesqrt(lengthSq_58)));
  ndotl_57 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * (1.0/((1.0 + 
    (lengthSq_58 * lightAttenSq_54)
  ))));
  col_56 = (lightColor0_50 * tmpvar_63.x);
  col_56 = (col_56 + (lightColor1_51 * tmpvar_63.y));
  col_56 = (col_56 + (lightColor2_52 * tmpvar_63.z));
  col_56 = (col_56 + (lightColor3_53 * tmpvar_63.w));
  tmpvar_5 = ((x2_48 + (unity_SHC.xyz * 
    ((normal_47.x * normal_47.x) - (normal_47.y * normal_47.y))
  )) + col_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_29;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp float t8;
highp float t9;
bool tb9;
highp vec2 t16;
highp vec2 t19;
highp float t24;
highp uint tu24;
highp float t25;
bool tb25;
void main()
{
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    t1.x = t0.x + in_TEXCOORD1.w;
    t1.y = in_TEXCOORD1.w * 0.800000012 + t0.y;
    t0.xy = t1.xy + vec2(0.5, 0.5);
    t0.xy = fract(t0.xy);
    t0.xy = t0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t16.xy = abs(t0.xy) * abs(t0.xy);
    t0.xy = -abs(t0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t0.xy = t16.xy * t0.xy + vec2(-0.5, -0.5);
    t0.xy = t0.xy + t0.xy;
    t0.x = t0.y * t0.y + t0.x;
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    t8 = float(1.0) / _ST_WindGlobal.z;
    t16.x = in_TEXCOORD0.x + -0.5;
    t24 = in_COLOR0.w * 255.0;
    tu24 = uint(t24);
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    t16.x = t16.x * in_TEXCOORD1.x;
    t1.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    t1.w = t16.x * in_TEXCOORD1.y + t1.y;
    t8 = (-t8) * 0.25 + t1.w;
    t8 = max(t8, 0.0);
    t8 = t8 * _ST_WindGlobal.z;
    t16.x = log2(t8);
    t16.x = t16.x * _ST_WindGlobal.w;
    t16.x = exp2(t16.x);
    tb9 = t8!=0.0;
    t8 = (tb9) ? t16.x : t8;
    t0.x = t8 * t0.x;
    t0.xz = _ST_WindVector.xz * t0.xx + t1.xz;
    t0.y = t1.w;
    t9 = dot(t0.xyz, t0.xyz);
    t9 = inversesqrt(t9);
    t0.xyz = t0.xyz * vec3(t9);
    t9 = dot(t1.xzw, t1.xzw);
    t9 = sqrt(t9);
    t0.xyz = t0.xyz * vec3(t9);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t0.xyz = (bool(tb9)) ? t0.xyz : t1.xwz;
    t0.xyz = t0.xyz + in_POSITION0.xyz;
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    gl_Position = t1 + glstate_matrix_mvp[3];
    t1.xyz = t0.yyy * _Object2World[1].xyz;
    t1.xyz = _Object2World[0].xyz * t0.xxx + t1.xyz;
    t1.xyz = _Object2World[2].xyz * t0.zzz + t1.xyz;
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    vs_TEXCOORD0.w = t1.x;
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = inversesqrt(t25);
    t3.xyz = vec3(t25) * t3.xyz;
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    t2 = t2 + t4;
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    t2 = t2 + t4;
    t25 = dot(t2.xyw, t2.xyw);
    t25 = inversesqrt(t25);
    t2 = vec4(t25) * t2;
    t10_5.xyz = t3.xyz * t2.wxy;
    t10_5.xyz = t2.ywx * t3.yzx + (-t10_5.xyz);
    t10_5.xyz = t10_5.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD0.y = t10_5.x;
    vs_TEXCOORD0.x = t3.z;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD1.x = t3.x;
    vs_TEXCOORD2.x = t3.y;
    vs_TEXCOORD1.w = t1.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.y = t10_5.y;
    vs_TEXCOORD2.y = t10_5.z;
    vs_TEXCOORD2.w = t1.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD3 = _Color;
    t25 = in_TEXCOORD1.z + _CameraXZAngle;
    t25 = t25 * _TreeInfo[int(tu24) + 0].y + 0.5;
    t25 = floor(t25);
    t25 = t25 / _TreeInfo[int(tu24) + 0].x;
    tb3 = t25>=(-t25);
    t25 = fract(abs(t25));
    t25 = (tb3) ? t25 : (-t25);
    t24 = t25 * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    tu24 = uint(t24);
    tb25 = _ImageTexCoords[int(tu24) + 0].w<0.0;
    t3.xy = (-_ImageTexCoords[int(tu24) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu24) + 0].xy;
    t19.xy = _ImageTexCoords[int(tu24) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu24) + 0].xy;
    vs_TEXCOORD4.xy = (bool(tb25)) ? t3.xy : t19.xy;
    vs_TEXCOORD4.z = 0.0;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t0.xyw = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t0.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t0.xyw;
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    t3.xz = t0.xz * vec2(0.5, 0.5);
    t24 = t0.y * _ProjectionParams.x;
    t3.w = t24 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t0.xy = t3.xy * vec2(0.25, 0.25);
    vs_TEXCOORD5.xyz = t0.xyz;
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    t4 = t2.yyyy * t3;
    t3 = t3 * t3;
    t3 = t0 * t0 + t3;
    t0 = t0 * t2.xxxx + t4;
    t0 = t1 * t2.wwww + t0;
    t1 = t1 * t1 + t3;
    t3 = inversesqrt(t1);
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    t0 = t0 * t3;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t0 = t1 * t0;
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    t16_6.x = t2.y * t2.y;
    t16_6.x = t2.x * t2.x + (-t16_6.x);
    t16_1 = t2.ywzx * t2;
    t16_7.x = dot(unity_SHBr, t16_1);
    t16_7.y = dot(unity_SHBg, t16_1);
    t16_7.z = dot(unity_SHBb, t16_1);
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    t0.xyz = t0.xyz + t16_6.xyz;
    vs_TEXCOORD6.xyz = t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    tb1 = t10_2.x<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_2.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    t0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t0);
    t16_5.y = dot(unity_SHAg, t0);
    t16_5.z = dot(unity_SHAb, t0);
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  lowp float tangentSign_1;
  lowp vec3 worldTangent_2;
  lowp vec3 worldNormal_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * _glesMultiTexCoord1.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_16.xz;
  billboardPos_9.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * _glesMultiTexCoord1.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_9;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_15.x + _glesMultiTexCoord1.w);
    tmpvar_22.y = (tmpvar_15.y + (_glesMultiTexCoord1.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_9 = vPos_17;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + _glesMultiTexCoord1.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_12.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_3 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_2 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = -(unity_WorldTransformParams.w);
  tangentSign_1 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = (((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx)) * tangentSign_1);
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_2.x;
  tmpvar_44.y = tmpvar_43.x;
  tmpvar_44.z = worldNormal_3.x;
  tmpvar_44.w = tmpvar_35.x;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_2.y;
  tmpvar_45.y = tmpvar_43.y;
  tmpvar_45.z = worldNormal_3.y;
  tmpvar_45.w = tmpvar_35.y;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_2.z;
  tmpvar_46.y = tmpvar_43.z;
  tmpvar_46.z = worldNormal_3.z;
  tmpvar_46.w = tmpvar_35.z;
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = worldNormal_3;
  mediump vec4 normal_48;
  normal_48 = tmpvar_47;
  mediump vec3 x2_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_50);
  x2_49.y = dot (unity_SHBg, tmpvar_50);
  x2_49.z = dot (unity_SHBb, tmpvar_50);
  highp vec3 lightColor0_51;
  lightColor0_51 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_52;
  lightColor1_52 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_53;
  lightColor2_53 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_54;
  lightColor3_54 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_55;
  lightAttenSq_55 = unity_4LightAtten0;
  highp vec3 normal_56;
  normal_56 = worldNormal_3;
  highp vec3 col_57;
  highp vec4 ndotl_58;
  highp vec4 lengthSq_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosX0 - tmpvar_35.x);
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosY0 - tmpvar_35.y);
  highp vec4 tmpvar_62;
  tmpvar_62 = (unity_4LightPosZ0 - tmpvar_35.z);
  lengthSq_59 = (tmpvar_60 * tmpvar_60);
  lengthSq_59 = (lengthSq_59 + (tmpvar_61 * tmpvar_61));
  lengthSq_59 = (lengthSq_59 + (tmpvar_62 * tmpvar_62));
  ndotl_58 = (tmpvar_60 * normal_56.x);
  ndotl_58 = (ndotl_58 + (tmpvar_61 * normal_56.y));
  ndotl_58 = (ndotl_58 + (tmpvar_62 * normal_56.z));
  highp vec4 tmpvar_63;
  tmpvar_63 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_58 * inversesqrt(lengthSq_59)));
  ndotl_58 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * (1.0/((1.0 + 
    (lengthSq_59 * lightAttenSq_55)
  ))));
  col_57 = (lightColor0_51 * tmpvar_64.x);
  col_57 = (col_57 + (lightColor1_52 * tmpvar_64.y));
  col_57 = (col_57 + (lightColor2_53 * tmpvar_64.z));
  col_57 = (col_57 + (lightColor3_54 * tmpvar_64.w));
  tmpvar_5 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + col_57);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_30;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);