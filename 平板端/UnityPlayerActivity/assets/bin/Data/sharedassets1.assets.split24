 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_15;
  highp vec3 rotatedWindVector_16;
  highp vec3 finalPosition_17;
  finalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_17 = (finalPosition_17 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_21;
    tmpvar_21 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_17 = (finalPosition_17 * tmpvar_22);
    finalPosition_17 = (normalize(finalPosition_17) * tmpvar_21);
  } else {
    highp vec3 tmpvar_23;
    tmpvar_23.x = tmpvar_4.w;
    tmpvar_23.y = tmpvar_5.x;
    tmpvar_23.z = tmpvar_5.y;
    finalPosition_17 = mix (finalPosition_17, tmpvar_23, unity_LODFade.xxx);
  };
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = finalPosition_17;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (finalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * rotatedWindVector_16.zxy) - (tmpvar_34.zxy * rotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (rotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    finalPosition_17 = vPos_27;
  };
  finalPosition_17 = (finalPosition_17 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_68;
  tmpvar_68.x = _Object2World[3].x;
  tmpvar_68.y = _Object2World[3].y;
  tmpvar_68.z = _Object2World[3].z;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = finalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = finalPosition_17;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (finalPosition_17 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((rotatedBranchAnchor_15 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    finalPosition_17 = vPos_69;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = finalPosition_17;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp float tmpvar_98;
    tmpvar_98 = (max ((finalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_68.x + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_68.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (finalPosition_17.xz + (rotatedWindVector_16.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    finalPosition_17 = vPos_94;
  };
  tmpvar_13.xyz = finalPosition_17;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_14.x)
   + 
    (v_103.xyz * tmpvar_14.y)
  ) + (v_104.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_105;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_6;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD4 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t16.x = t0.x + _Object2World[3].z;
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    t16.y = t32.x + in_NORMAL0.x;
    t16.xy = fract(t16.xy);
    t16.x = t16.y * 0.5 + t16.x;
    t16.x = t16.x + -0.300000012;
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t48 = dot(t3.xyz, t3.xyz);
    t48 = inversesqrt(t48);
    t3.xyz = vec3(t48) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb16.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb48 = in_COLOR0.w==0.0;
    t49 = in_TEXCOORD1.w + -1.0;
    t49 = unity_LODFade.x * t49 + 1.0;
    t5.xyz = vec3(t49) * t4.xyz;
    t49 = dot(t5.xyz, t5.xyz);
    t49 = sqrt(t49);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t51 = dot(t6.xyz, t6.xyz);
    t51 = inversesqrt(t51);
    t5.xyz = vec3(t51) * t6.xyz;
    t5.xyz = vec3(t49) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb48)) ? t5.xyz : t4.xyz;
    tb48 = t16_2.x<5.0;
    ti32 = int(uint(tb48) * 0xffffffffu & uint(tb16.y) * 0xffffffffu);
    if((uint(ti32))!=uint(0u)){
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb48 = t16_2.x==4.0;
        tb49 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t32.x = t32.x + t5.x;
        t32.x = t32.x + 0.5;
        t32.x = fract(t32.x);
        t32.x = t32.x * 2.0 + -1.0;
        t51 = abs(t32.x) * abs(t32.x);
        t32.x = -abs(t32.x) * 2.0 + 3.0;
        t32.x = t51 * t32.x + -0.5;
        t32.x = dot(t32.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t32.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb48){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t32.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t32.x);
            t32.xy = t8.xy + vec2(0.5, 0.5);
            t32.xy = fract(t32.xy);
            t32.xy = t32.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t32.xy) * abs(t32.xy);
            t32.xy = -abs(t32.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t32.xy = t8.xy * t32.xy + vec2(-0.5, -0.5);
            t32.xy = t32.xy + t32.xy;
            t49 = dot(t4.xyz, t4.xyz);
            t49 = sqrt(t49);
            t51 = t32.x * t32.x + t32.y;
            t52 = t6.z * in_TEXCOORD2.x;
            t51 = t51 * t52;
            t6.x = sin(t51);
            t8.x = cos(t51);
            t51 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t51);
            t24.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t24.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t24.y);
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            t12.z = t9.w * t5.z + t24.y;
            t52 = t5.z * t5.z;
            t12.w = t52 * t51 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t19 = dot(t3.xyz, t5.xyz);
            t19 = max(t19, -1.0);
            t19 = min(t19, 1.0);
            t8.w = t19 + t8.y;
            t51 = dot(t8.xzw, t8.xzw);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t8.zxw;
            t51 = -abs(t19) + 1.0;
            t51 = sqrt(t51);
            t52 = abs(t19) * -0.0187292993 + 0.0742610022;
            t52 = t52 * abs(t19) + -0.212114394;
            t52 = t52 * abs(t19) + 1.57072878;
            t6.x = t51 * t52;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb19 = t19<(-t19);
            t19 = tb19 ? t6.x : float(0.0);
            t19 = t52 * t51 + t19;
            t32.x = (-t32.y) * t32.y + t32.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t39.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t48 = t6.z * t6.z;
            t48 = t48 * t6.x + 1.0;
            t48 = t48 * 0.5;
            t48 = clamp(t48, 0.0, 1.0);
            t48 = log2(t48);
            t48 = t48 * t7.y;
            t48 = exp2(t48);
            t32.x = t6.y * t32.x;
            t32.x = t19 * t6.w + t32.x;
            t32.x = t7.x * t48 + t32.x;
            t32.x = t32.x * in_TEXCOORD2.x;
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            t32.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t48 = t5.x * t5.x;
            t9.w = t48 * t32.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t51 = dot(t5.xyz, t5.xyz);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t5.xyz;
            t4.xyz = vec3(t49) * t5.xyz;
        } else {
            t32.xy = in_NORMAL0.xy;
            t19 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t32.xy = in_NORMAL0.xy;
        t19 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb49 = t16_2.x>=3.0;
    if(tb49){
        tb49 = t16_2.x==5.0;
        if(tb49){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t49 = dot(t5.xyz, t5.xyz);
            t49 = inversesqrt(t49);
            t5.xyz = vec3(t49) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t49 = t0.x + _ST_WindBranch.x;
            t2.x = t49 + in_TEXCOORD0.w;
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t51 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t51 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb51 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            t51 = (-t2.y) * t2.z + t7.x;
            t51 = t7.y * t51 + t7.w;
            t52 = (-t51) + t7.x;
            t51 = t7.y * t52 + t51;
            t51 = t51 * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            t53 = t2.x * t53;
            t51 = t51 * t52 + t53;
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t51 = t51 * t52;
            t6.xyz = vec3(t51) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t49 * 0.100000001 + in_TEXCOORD0.w;
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t49 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t39.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t49 = t7.x * t7.y;
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            t51 = t2.w * _ST_WindVector.w;
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t49) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t49 = (-t0.x) + t7.x;
            t0.x = t7.y * t49 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t49 = (-_ST_WindVector.w) + 1.0;
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            t51 = t51 * t6.x;
            t0.x = t0.x * t49 + t51;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t49 = float(1.0) / _ST_WindGlobal.z;
    t49 = (-t49) * 0.25 + t4.y;
    t49 = max(t49, 0.0);
    t49 = t49 * _ST_WindGlobal.z;
    tb51 = t49!=0.0;
    t52 = log2(t49);
    t52 = t52 * _ST_WindGlobal.w;
    t52 = exp2(t52);
    t49 = (tb51) ? t52 : t49;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t37.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t37.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t51 = t5.y * t5.y + t5.x;
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t51 = _ST_WindGlobal.y * t51 + t52;
    t49 = t49 * t51;
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    t5.y = t4.y;
    t49 = dot(t5.xyz, t5.xyz);
    t49 = inversesqrt(t49);
    t3.xzw = vec3(t49) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t0.xyw = t32.yyy * t5.xyz;
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    t48 = dot(t0.xyz, t0.xyz);
    t48 = inversesqrt(t48);
    t0.xyz = vec3(t48) * t0.xyz;
    t16_2 = t0.yzzx * t0.xyzz;
    t16_15.x = dot(unity_SHBr, t16_2);
    t16_15.y = dot(unity_SHBg, t16_2);
    t16_15.z = dot(unity_SHBb, t16_2);
    t16_63 = t0.y * t0.y;
    t16_63 = t0.x * t0.x + (-t16_63);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    t2 = t3.zzzz * _Object2World[1];
    t2 = _Object2World[0] * t3.xxxx + t2;
    t2 = _Object2World[2] * t3.wwww + t2;
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD5 = t2;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    vec3 txVec71 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec71, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_16;
  highp vec3 rotatedWindVector_17;
  highp vec3 finalPosition_18;
  finalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_18 = (finalPosition_18 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_22;
    tmpvar_22 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_18 = (finalPosition_18 * tmpvar_23);
    finalPosition_18 = (normalize(finalPosition_18) * tmpvar_22);
  } else {
    highp vec3 tmpvar_24;
    tmpvar_24.x = tmpvar_4.w;
    tmpvar_24.y = tmpvar_5.x;
    tmpvar_24.z = tmpvar_5.y;
    finalPosition_18 = mix (finalPosition_18, tmpvar_24, unity_LODFade.xxx);
  };
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = finalPosition_18;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (finalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * rotatedWindVector_17.zxy) - (tmpvar_35.zxy * rotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (rotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_15 = vDirection_29;
    finalPosition_18 = vPos_28;
  };
  finalPosition_18 = (finalPosition_18 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_69;
  tmpvar_69.x = _Object2World[3].x;
  tmpvar_69.y = _Object2World[3].y;
  tmpvar_69.z = _Object2World[3].z;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = finalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = finalPosition_18;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (finalPosition_18 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((rotatedBranchAnchor_16 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    finalPosition_18 = vPos_70;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = finalPosition_18;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp float tmpvar_99;
    tmpvar_99 = (max ((finalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_69.x + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_69.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (finalPosition_18.xz + (rotatedWindVector_17.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    finalPosition_18 = vPos_95;
  };
  tmpvar_14.xyz = finalPosition_18;
  tmpvar_8 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_107;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_6;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  highp vec3 lightColor0_112;
  lightColor0_112 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_113;
  lightColor1_113 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_114;
  lightColor2_114 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_115;
  lightColor3_115 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_116;
  lightAttenSq_116 = unity_4LightAtten0;
  highp vec3 normal_117;
  normal_117 = worldNormal_6;
  highp vec3 col_118;
  highp vec4 ndotl_119;
  highp vec4 lengthSq_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosX0 - tmpvar_103.x);
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosY0 - tmpvar_103.y);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosZ0 - tmpvar_103.z);
  lengthSq_120 = (tmpvar_121 * tmpvar_121);
  lengthSq_120 = (lengthSq_120 + (tmpvar_122 * tmpvar_122));
  lengthSq_120 = (lengthSq_120 + (tmpvar_123 * tmpvar_123));
  ndotl_119 = (tmpvar_121 * normal_117.x);
  ndotl_119 = (ndotl_119 + (tmpvar_122 * normal_117.y));
  ndotl_119 = (ndotl_119 + (tmpvar_123 * normal_117.z));
  highp vec4 tmpvar_124;
  tmpvar_124 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_119 * inversesqrt(lengthSq_120)));
  ndotl_119 = tmpvar_124;
  highp vec4 tmpvar_125;
  tmpvar_125 = (tmpvar_124 * (1.0/((1.0 + 
    (lengthSq_120 * lightAttenSq_116)
  ))));
  col_118 = (lightColor0_112 * tmpvar_125.x);
  col_118 = (col_118 + (lightColor1_113 * tmpvar_125.y));
  col_118 = (col_118 + (lightColor2_114 * tmpvar_125.z));
  col_118 = (col_118 + (lightColor3_115 * tmpvar_125.w));
  tmpvar_9 = ((x2_110 + (unity_SHC.xyz * 
    ((normal_109.x * normal_109.x) - (normal_109.y * normal_109.y))
  )) + col_118);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_103;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t16.x = t0.x + _Object2World[3].z;
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    t16.y = t32.x + in_NORMAL0.x;
    t16.xy = fract(t16.xy);
    t16.x = t16.y * 0.5 + t16.x;
    t16.x = t16.x + -0.300000012;
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t48 = dot(t3.xyz, t3.xyz);
    t48 = inversesqrt(t48);
    t3.xyz = vec3(t48) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb16.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb48 = in_COLOR0.w==0.0;
    t49 = in_TEXCOORD1.w + -1.0;
    t49 = unity_LODFade.x * t49 + 1.0;
    t5.xyz = vec3(t49) * t4.xyz;
    t49 = dot(t5.xyz, t5.xyz);
    t49 = sqrt(t49);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t51 = dot(t6.xyz, t6.xyz);
    t51 = inversesqrt(t51);
    t5.xyz = vec3(t51) * t6.xyz;
    t5.xyz = vec3(t49) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb48)) ? t5.xyz : t4.xyz;
    tb48 = t16_2.x<5.0;
    ti32 = int(uint(tb48) * 0xffffffffu & uint(tb16.y) * 0xffffffffu);
    if((uint(ti32))!=uint(0u)){
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb48 = t16_2.x==4.0;
        tb49 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t32.x = t32.x + t5.x;
        t32.x = t32.x + 0.5;
        t32.x = fract(t32.x);
        t32.x = t32.x * 2.0 + -1.0;
        t51 = abs(t32.x) * abs(t32.x);
        t32.x = -abs(t32.x) * 2.0 + 3.0;
        t32.x = t51 * t32.x + -0.5;
        t32.x = dot(t32.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t32.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb48){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t32.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t32.x);
            t32.xy = t8.xy + vec2(0.5, 0.5);
            t32.xy = fract(t32.xy);
            t32.xy = t32.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t32.xy) * abs(t32.xy);
            t32.xy = -abs(t32.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t32.xy = t8.xy * t32.xy + vec2(-0.5, -0.5);
            t32.xy = t32.xy + t32.xy;
            t49 = dot(t4.xyz, t4.xyz);
            t49 = sqrt(t49);
            t51 = t32.x * t32.x + t32.y;
            t52 = t6.z * in_TEXCOORD2.x;
            t51 = t51 * t52;
            t6.x = sin(t51);
            t8.x = cos(t51);
            t51 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t51);
            t24.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t24.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t24.y);
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            t12.z = t9.w * t5.z + t24.y;
            t52 = t5.z * t5.z;
            t12.w = t52 * t51 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t19 = dot(t3.xyz, t5.xyz);
            t19 = max(t19, -1.0);
            t19 = min(t19, 1.0);
            t8.w = t19 + t8.y;
            t51 = dot(t8.xzw, t8.xzw);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t8.zxw;
            t51 = -abs(t19) + 1.0;
            t51 = sqrt(t51);
            t52 = abs(t19) * -0.0187292993 + 0.0742610022;
            t52 = t52 * abs(t19) + -0.212114394;
            t52 = t52 * abs(t19) + 1.57072878;
            t6.x = t51 * t52;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb19 = t19<(-t19);
            t19 = tb19 ? t6.x : float(0.0);
            t19 = t52 * t51 + t19;
            t32.x = (-t32.y) * t32.y + t32.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t39.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t48 = t6.z * t6.z;
            t48 = t48 * t6.x + 1.0;
            t48 = t48 * 0.5;
            t48 = clamp(t48, 0.0, 1.0);
            t48 = log2(t48);
            t48 = t48 * t7.y;
            t48 = exp2(t48);
            t32.x = t6.y * t32.x;
            t32.x = t19 * t6.w + t32.x;
            t32.x = t7.x * t48 + t32.x;
            t32.x = t32.x * in_TEXCOORD2.x;
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            t32.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t48 = t5.x * t5.x;
            t9.w = t48 * t32.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t51 = dot(t5.xyz, t5.xyz);
            t51 = inversesqrt(t51);
            t5.xyz = vec3(t51) * t5.xyz;
            t4.xyz = vec3(t49) * t5.xyz;
        } else {
            t32.xy = in_NORMAL0.xy;
            t19 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t32.xy = in_NORMAL0.xy;
        t19 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb49 = t16_2.x>=3.0;
    if(tb49){
        tb49 = t16_2.x==5.0;
        if(tb49){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t49 = dot(t5.xyz, t5.xyz);
            t49 = inversesqrt(t49);
            t5.xyz = vec3(t49) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t49 = t0.x + _ST_WindBranch.x;
            t2.x = t49 + in_TEXCOORD0.w;
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t51 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t51 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb51 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            t51 = (-t2.y) * t2.z + t7.x;
            t51 = t7.y * t51 + t7.w;
            t52 = (-t51) + t7.x;
            t51 = t7.y * t52 + t51;
            t51 = t51 * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            t53 = t2.x * t53;
            t51 = t51 * t52 + t53;
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t51 = t51 * t52;
            t6.xyz = vec3(t51) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t49 * 0.100000001 + in_TEXCOORD0.w;
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t49 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t39.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t39.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t49 = t7.x * t7.y;
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            t51 = t2.w * _ST_WindVector.w;
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t49) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t49 = (-t0.x) + t7.x;
            t0.x = t7.y * t49 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t49 = (-_ST_WindVector.w) + 1.0;
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            t51 = t51 * t6.x;
            t0.x = t0.x * t49 + t51;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t49 = float(1.0) / _ST_WindGlobal.z;
    t49 = (-t49) * 0.25 + t4.y;
    t49 = max(t49, 0.0);
    t49 = t49 * _ST_WindGlobal.z;
    tb51 = t49!=0.0;
    t52 = log2(t49);
    t52 = t52 * _ST_WindGlobal.w;
    t52 = exp2(t52);
    t49 = (tb51) ? t52 : t49;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t37.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t37.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t51 = t5.y * t5.y + t5.x;
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t51 = _ST_WindGlobal.y * t51 + t52;
    t49 = t49 * t51;
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    t5.y = t4.y;
    t49 = dot(t5.xyz, t5.xyz);
    t49 = inversesqrt(t49);
    t3.xzw = vec3(t49) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t5.x = _World2Object[0].x;
    t5.y = _World2Object[1].x;
    t5.z = _World2Object[2].x;
    t6.x = _World2Object[0].y;
    t6.y = _World2Object[1].y;
    t6.z = _World2Object[2].y;
    t0.xyw = t32.yyy * t6.xyz;
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    t48 = dot(t0.xyz, t0.xyz);
    t48 = inversesqrt(t48);
    t0.xyz = vec3(t48) * t0.xyz;
    t16_2 = t0.yzzx * t0.xyzz;
    t16_15.x = dot(unity_SHBr, t16_2);
    t16_15.y = dot(unity_SHBg, t16_2);
    t16_15.z = dot(unity_SHBb, t16_2);
    t16_63 = t0.y * t0.y;
    t16_63 = t0.x * t0.x + (-t16_63);
    t16_15.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    t5 = (-t4.yyyy) + unity_4LightPosY0;
    t6 = (-t4.zzzz) + unity_4LightPosZ0;
    t7 = t5 * t5;
    t7 = t2 * t2 + t7;
    t7 = t6 * t6 + t7;
    t5 = t0.yyyy * t5;
    t2 = t2 * t0.xxxx + t5;
    t2 = t6 * t0.zzzz + t2;
    t5 = inversesqrt(t7);
    t2 = t2 * t5;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t5 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    t2 = t2 * t5;
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    t5.xyz = t5.xyz + t16_15.xyz;
    t2 = t3.zzzz * _Object2World[1];
    t2 = _Object2World[0] * t3.xxxx + t2;
    t2 = _Object2World[2] * t3.wwww + t2;
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD1.xyz = t4.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD5 = t2;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0.x = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    vec3 txVec72 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec72, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp float tangentSign_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_15;
  highp vec3 rotatedWindVector_16;
  highp vec3 finalPosition_17;
  finalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_17 = (finalPosition_17 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_21;
    tmpvar_21 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_22[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_22[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_17 = (finalPosition_17 * tmpvar_22);
    finalPosition_17 = (normalize(finalPosition_17) * tmpvar_21);
  } else {
    highp vec3 tmpvar_23;
    tmpvar_23.x = tmpvar_4.w;
    tmpvar_23.y = tmpvar_5.x;
    tmpvar_23.z = tmpvar_5.y;
    finalPosition_17 = mix (finalPosition_17, tmpvar_23, unity_LODFade.xxx);
  };
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_18 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = finalPosition_17;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (finalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * rotatedWindVector_16.zxy) - (tmpvar_34.zxy * rotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (rotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    finalPosition_17 = vPos_27;
  };
  finalPosition_17 = (finalPosition_17 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_68;
  tmpvar_68.x = _Object2World[3].x;
  tmpvar_68.y = _Object2World[3].y;
  tmpvar_68.z = _Object2World[3].z;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = finalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = finalPosition_17;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (finalPosition_17 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((rotatedBranchAnchor_15 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_68.x + tmpvar_68.y));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    finalPosition_17 = vPos_69;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = finalPosition_17;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (finalPosition_17, finalPosition_17));
    highp float tmpvar_98;
    tmpvar_98 = (max ((finalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_68.x + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_68.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (finalPosition_17.xz + (rotatedWindVector_16.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    finalPosition_17 = vPos_94;
  };
  tmpvar_13.xyz = finalPosition_17;
  tmpvar_9 = tmpvar_10;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_14.x)
   + 
    (v_104.xyz * tmpvar_14.y)
  ) + (v_105.xyz * tmpvar_14.z)));
  worldNormal_8 = tmpvar_106;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = _Object2World[0].xyz;
  tmpvar_107[1] = _Object2World[1].xyz;
  tmpvar_107[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize((tmpvar_107 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_108;
  highp float tmpvar_109;
  tmpvar_109 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_6 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = (((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx)) * tangentSign_6);
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_7.x;
  tmpvar_111.y = tmpvar_110.x;
  tmpvar_111.z = worldNormal_8.x;
  tmpvar_111.w = tmpvar_102.x;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.y;
  tmpvar_112.y = tmpvar_110.y;
  tmpvar_112.z = worldNormal_8.y;
  tmpvar_112.w = tmpvar_102.y;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.z;
  tmpvar_113.y = tmpvar_110.z;
  tmpvar_113.z = worldNormal_8.z;
  tmpvar_113.w = tmpvar_102.z;
  lowp vec4 tmpvar_114;
  tmpvar_114.w = 1.0;
  tmpvar_114.xyz = worldNormal_8;
  mediump vec4 normal_115;
  normal_115 = tmpvar_114;
  mediump vec3 x2_116;
  mediump vec4 tmpvar_117;
  tmpvar_117 = (normal_115.xyzz * normal_115.yzzx);
  x2_116.x = dot (unity_SHBr, tmpvar_117);
  x2_116.y = dot (unity_SHBg, tmpvar_117);
  x2_116.z = dot (unity_SHBb, tmpvar_117);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_111;
  xlv_TEXCOORD1 = tmpvar_112;
  xlv_TEXCOORD2 = tmpvar_113;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = (x2_116 + (unity_SHC.xyz * (
    (normal_115.x * normal_115.x)
   - 
    (normal_115.y * normal_115.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2.x<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2.x==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2.x>=3.0;
    if(tb52){
        tb52 = t16_2.x==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.zw = _World2Object[2].yy;
    t4 = t34.yyyy * t4;
    t0 = t2 * t34.xxxx + t4;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.zw = _World2Object[2].zz;
    t0 = t2 * vec4(t20) + t0;
    t52 = dot(t0.xyw, t0.xyw);
    t52 = inversesqrt(t52);
    t0 = t0 * vec4(t52);
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    t52 = dot(t4.xyz, t4.xyz);
    t52 = inversesqrt(t52);
    t4.xyz = vec3(t52) * t4.xyz;
    t52 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_15.xyz = t0.wxy * t4.xyz;
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    t10_15.xyz = vec3(t52) * t10_15.xyz;
    t16_2 = t0.ywzx * t0;
    t16_16.x = dot(unity_SHBr, t16_2);
    t16_16.y = dot(unity_SHBg, t16_2);
    t16_16.z = dot(unity_SHBb, t16_2);
    t16_67 = t0.y * t0.y;
    t16_67 = t0.x * t0.x + (-t16_67);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD0.y = t10_15.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.w = t3.x;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD1.y = t10_15.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.w = t3.z;
    vs_TEXCOORD2.x = t4.y;
    vs_TEXCOORD2.y = t10_15.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD2.w = t3.w;
    vs_TEXCOORD3.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp float tangentSign_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_16;
  highp vec3 rotatedWindVector_17;
  highp vec3 finalPosition_18;
  finalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_18 = (finalPosition_18 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_22;
    tmpvar_22 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_18 = (finalPosition_18 * tmpvar_23);
    finalPosition_18 = (normalize(finalPosition_18) * tmpvar_22);
  } else {
    highp vec3 tmpvar_24;
    tmpvar_24.x = tmpvar_4.w;
    tmpvar_24.y = tmpvar_5.x;
    tmpvar_24.z = tmpvar_5.y;
    finalPosition_18 = mix (finalPosition_18, tmpvar_24, unity_LODFade.xxx);
  };
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = finalPosition_18;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (finalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * rotatedWindVector_17.zxy) - (tmpvar_35.zxy * rotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (rotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_15 = vDirection_29;
    finalPosition_18 = vPos_28;
  };
  finalPosition_18 = (finalPosition_18 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_69;
  tmpvar_69.x = _Object2World[3].x;
  tmpvar_69.y = _Object2World[3].y;
  tmpvar_69.z = _Object2World[3].z;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = finalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = finalPosition_18;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (finalPosition_18 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((rotatedBranchAnchor_16 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    finalPosition_18 = vPos_70;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = finalPosition_18;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp float tmpvar_99;
    tmpvar_99 = (max ((finalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_69.x + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_69.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (finalPosition_18.xz + (rotatedWindVector_17.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    finalPosition_18 = vPos_95;
  };
  tmpvar_14.xyz = finalPosition_18;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_6 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = (((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx)) * tangentSign_6);
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = tmpvar_111.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = tmpvar_111.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = tmpvar_111.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
  xlv_TEXCOORD6 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp float tangentSign_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_16;
  highp vec3 rotatedWindVector_17;
  highp vec3 finalPosition_18;
  finalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_18 = (finalPosition_18 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_22;
    tmpvar_22 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_18 = (finalPosition_18 * tmpvar_23);
    finalPosition_18 = (normalize(finalPosition_18) * tmpvar_22);
  } else {
    highp vec3 tmpvar_24;
    tmpvar_24.x = tmpvar_4.w;
    tmpvar_24.y = tmpvar_5.x;
    tmpvar_24.z = tmpvar_5.y;
    finalPosition_18 = mix (finalPosition_18, tmpvar_24, unity_LODFade.xxx);
  };
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = finalPosition_18;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (finalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * rotatedWindVector_17.zxy) - (tmpvar_35.zxy * rotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (rotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_15 = vDirection_29;
    finalPosition_18 = vPos_28;
  };
  finalPosition_18 = (finalPosition_18 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_69;
  tmpvar_69.x = _Object2World[3].x;
  tmpvar_69.y = _Object2World[3].y;
  tmpvar_69.z = _Object2World[3].z;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = finalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = finalPosition_18;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (finalPosition_18 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((rotatedBranchAnchor_16 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    finalPosition_18 = vPos_70;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = finalPosition_18;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp float tmpvar_99;
    tmpvar_99 = (max ((finalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_69.x + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_69.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (finalPosition_18.xz + (rotatedWindVector_17.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    finalPosition_18 = vPos_95;
  };
  tmpvar_14.xyz = finalPosition_18;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_6 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = (((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx)) * tangentSign_6);
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = tmpvar_111.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = tmpvar_111.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = tmpvar_111.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  highp vec3 lightColor0_119;
  lightColor0_119 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_120;
  lightColor1_120 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_121;
  lightColor2_121 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_122;
  lightColor3_122 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_123;
  lightAttenSq_123 = unity_4LightAtten0;
  highp vec3 normal_124;
  normal_124 = worldNormal_8;
  highp vec3 col_125;
  highp vec4 ndotl_126;
  highp vec4 lengthSq_127;
  highp vec4 tmpvar_128;
  tmpvar_128 = (unity_4LightPosX0 - tmpvar_103.x);
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_4LightPosY0 - tmpvar_103.y);
  highp vec4 tmpvar_130;
  tmpvar_130 = (unity_4LightPosZ0 - tmpvar_103.z);
  lengthSq_127 = (tmpvar_128 * tmpvar_128);
  lengthSq_127 = (lengthSq_127 + (tmpvar_129 * tmpvar_129));
  lengthSq_127 = (lengthSq_127 + (tmpvar_130 * tmpvar_130));
  ndotl_126 = (tmpvar_128 * normal_124.x);
  ndotl_126 = (ndotl_126 + (tmpvar_129 * normal_124.y));
  ndotl_126 = (ndotl_126 + (tmpvar_130 * normal_124.z));
  highp vec4 tmpvar_131;
  tmpvar_131 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_126 * inversesqrt(lengthSq_127)));
  ndotl_126 = tmpvar_131;
  highp vec4 tmpvar_132;
  tmpvar_132 = (tmpvar_131 * (1.0/((1.0 + 
    (lengthSq_127 * lightAttenSq_123)
  ))));
  col_125 = (lightColor0_119 * tmpvar_132.x);
  col_125 = (col_125 + (lightColor1_120 * tmpvar_132.y));
  col_125 = (col_125 + (lightColor2_121 * tmpvar_132.z));
  col_125 = (col_125 + (lightColor3_122 * tmpvar_132.w));
  tmpvar_10 = ((x2_117 + (unity_SHC.xyz * 
    ((normal_116.x * normal_116.x) - (normal_116.y * normal_116.y))
  )) + col_125);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2.x<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2.x==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2.x>=3.0;
    if(tb52){
        tb52 = t16_2.x==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.zw = _World2Object[2].yy;
    t4 = t34.yyyy * t4;
    t0 = t2 * t34.xxxx + t4;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.zw = _World2Object[2].zz;
    t0 = t2 * vec4(t20) + t0;
    t52 = dot(t0.xyw, t0.xyw);
    t52 = inversesqrt(t52);
    t0 = t0 * vec4(t52);
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    t52 = dot(t4.xyz, t4.xyz);
    t52 = inversesqrt(t52);
    t4.xyz = vec3(t52) * t4.xyz;
    t52 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_15.xyz = t0.wxy * t4.xyz;
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    t10_15.xyz = vec3(t52) * t10_15.xyz;
    t16_2 = t0.ywzx * t0;
    t16_16.x = dot(unity_SHBr, t16_2);
    t16_16.y = dot(unity_SHBg, t16_2);
    t16_16.z = dot(unity_SHBb, t16_2);
    t16_67 = t0.y * t0.y;
    t16_67 = t0.x * t0.x + (-t16_67);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    t5 = (-t3.zzzz) + unity_4LightPosY0;
    t6 = (-t3.wwww) + unity_4LightPosZ0;
    t7 = t5 * t5;
    t7 = t2 * t2 + t7;
    t7 = t6 * t6 + t7;
    t5 = t0.yyyy * t5;
    t2 = t2 * t0.xxxx + t5;
    t2 = t6 * t0.wwww + t2;
    t5 = inversesqrt(t7);
    t2 = t2 * t5;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t5 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    t2 = t2 * t5;
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    t5.xyz = t5.xyz + t16_16.xyz;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD0.y = t10_15.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.w = t3.x;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD1.y = t10_15.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.w = t3.z;
    vs_TEXCOORD2.x = t4.y;
    vs_TEXCOORD2.y = t10_15.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD2.w = t3.w;
    vs_TEXCOORD3.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp float tangentSign_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  lowp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13.xy = tmpvar_3.xy;
  tmpvar_12.w = _Color.w;
  tmpvar_12.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_13.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_17;
  highp vec3 rotatedWindVector_18;
  highp vec3 finalPosition_19;
  finalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    rotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_19 = (finalPosition_19 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_23;
    tmpvar_23 = sqrt(dot (finalPosition_19, finalPosition_19));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_19 = (finalPosition_19 * tmpvar_24);
    finalPosition_19 = (normalize(finalPosition_19) * tmpvar_23);
  } else {
    highp vec3 tmpvar_25;
    tmpvar_25.x = tmpvar_4.w;
    tmpvar_25.y = tmpvar_5.x;
    tmpvar_25.z = tmpvar_5.y;
    finalPosition_19 = mix (finalPosition_19, tmpvar_25, unity_LODFade.xxx);
  };
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = finalPosition_19;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (finalPosition_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * rotatedWindVector_18.zxy) - (tmpvar_36.zxy * rotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (rotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_16 = vDirection_30;
    finalPosition_19 = vPos_29;
  };
  finalPosition_19 = (finalPosition_19 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_70;
  tmpvar_70.x = _Object2World[3].x;
  tmpvar_70.y = _Object2World[3].y;
  tmpvar_70.z = _Object2World[3].z;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = finalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = finalPosition_19;
      highp float fTime_73;
      highp float fAdherenceScale_74;
      highp vec3 vWindVector_75;
      vWindVector_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_73 = (_ST_WindBranch.x + (tmpvar_70.x + tmpvar_70.y));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (fTime_73 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((fTime_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_73 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((fTime_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_77 = (fOscillation_77 * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (finalPosition_19 + ((vWindVector_75 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((fTime_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_74 = (1.0 - ((tmpvar_84.x * tmpvar_84.y) * (
        (tmpvar_84.x * tmpvar_84.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_74 = (fAdherenceScale_74 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((rotatedBranchAnchor_17 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_74) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp float fTime_87;
      highp vec3 vWindVector_88;
      vWindVector_88 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_87 = (_ST_WindBranch.x + (tmpvar_70.x + tmpvar_70.y));
      highp vec4 vOscillations_89;
      highp float fOscillation_90;
      fOscillation_90 = 1.0;
      highp float fAmount_91;
      highp float fTarget_92;
      highp vec4 tmpvar_93;
      tmpvar_93.w = 0.0;
      tmpvar_93.x = (fTime_87 + _glesMultiTexCoord0.w);
      tmpvar_93.y = ((fTime_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_93.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_94;
      tmpvar_94 = abs(((
        fract((tmpvar_93 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_94 * tmpvar_94)
       * 
        (3.0 - (2.0 * tmpvar_94))
      ) - 0.5) * 2.0);
      highp float tmpvar_95;
      tmpvar_95 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_92 = 1.0;
      fAmount_91 = tmpvar_95;
      if ((tmpvar_95 < 0.0)) {
        fTarget_92 = -1.0;
        fAmount_91 = -(tmpvar_95);
      };
      fOscillation_90 = (((
        mix (mix (tmpvar_95, fTarget_92, fAmount_91), fTarget_92, fAmount_91)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_86 = (vPos_71 + ((vWindVector_88 * fOscillation_90) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    finalPosition_19 = vPos_71;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_96;
    vPos_96 = finalPosition_19;
    highp float fMoveAmount_97;
    highp float fAdjust_98;
    highp float fLength_99;
    fLength_99 = sqrt(dot (finalPosition_19, finalPosition_19));
    highp float tmpvar_100;
    tmpvar_100 = (max ((finalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_98 = tmpvar_100;
    if ((tmpvar_100 != 0.0)) {
      fAdjust_98 = pow (tmpvar_100, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_101;
    tmpvar_101.zw = vec2(0.0, 0.0);
    tmpvar_101.x = (tmpvar_70.x + _ST_WindGlobal.x);
    tmpvar_101.y = (tmpvar_70.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_102;
    highp vec4 tmpvar_103;
    tmpvar_103 = abs(((
      fract((tmpvar_101 + 0.5))
     * 2.0) - 1.0));
    tmpvar_102 = (((
      (tmpvar_103 * tmpvar_103)
     * 
      (3.0 - (2.0 * tmpvar_103))
    ) - 0.5) * 2.0);
    fMoveAmount_97 = ((_ST_WindGlobal.y * (tmpvar_102.x + 
      (tmpvar_102.y * tmpvar_102.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_97 = (fMoveAmount_97 * fAdjust_98);
    vPos_96.xz = (finalPosition_19.xz + (rotatedWindVector_18.xz * fMoveAmount_97));
    vPos_96 = (normalize(vPos_96) * fLength_99);
    finalPosition_19 = vPos_96;
  };
  tmpvar_15.xyz = finalPosition_19;
  tmpvar_9 = tmpvar_12;
  highp vec3 tmpvar_104;
  tmpvar_104 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_6 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112 = (((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx)) * tangentSign_6);
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.x;
  tmpvar_113.y = tmpvar_112.x;
  tmpvar_113.z = worldNormal_8.x;
  tmpvar_113.w = tmpvar_104.x;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.y;
  tmpvar_114.y = tmpvar_112.y;
  tmpvar_114.z = worldNormal_8.y;
  tmpvar_114.w = tmpvar_104.y;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_7.z;
  tmpvar_115.y = tmpvar_112.z;
  tmpvar_115.z = worldNormal_8.z;
  tmpvar_115.w = tmpvar_104.z;
  lowp vec4 tmpvar_116;
  tmpvar_116.w = 1.0;
  tmpvar_116.xyz = worldNormal_8;
  mediump vec4 normal_117;
  normal_117 = tmpvar_116;
  mediump vec3 x2_118;
  mediump vec4 tmpvar_119;
  tmpvar_119 = (normal_117.xyzz * normal_117.yzzx);
  x2_118.x = dot (unity_SHBr, tmpvar_119);
  x2_118.y = dot (unity_SHBg, tmpvar_119);
  x2_118.z = dot (unity_SHBb, tmpvar_119);
  highp vec3 lightColor0_120;
  lightColor0_120 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_121;
  lightColor1_121 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_122;
  lightColor2_122 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_123;
  lightColor3_123 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_124;
  lightAttenSq_124 = unity_4LightAtten0;
  highp vec3 normal_125;
  normal_125 = worldNormal_8;
  highp vec3 col_126;
  highp vec4 ndotl_127;
  highp vec4 lengthSq_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_4LightPosX0 - tmpvar_104.x);
  highp vec4 tmpvar_130;
  tmpvar_130 = (unity_4LightPosY0 - tmpvar_104.y);
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_4LightPosZ0 - tmpvar_104.z);
  lengthSq_128 = (tmpvar_129 * tmpvar_129);
  lengthSq_128 = (lengthSq_128 + (tmpvar_130 * tmpvar_130));
  lengthSq_128 = (lengthSq_128 + (tmpvar_131 * tmpvar_131));
  ndotl_127 = (tmpvar_129 * normal_125.x);
  ndotl_127 = (ndotl_127 + (tmpvar_130 * normal_125.y));
  ndotl_127 = (ndotl_127 + (tmpvar_131 * normal_125.z));
  highp vec4 tmpvar_132;
  tmpvar_132 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_127 * inversesqrt(lengthSq_128)));
  ndotl_127 = tmpvar_132;
  highp vec4 tmpvar_133;
  tmpvar_133 = (tmpvar_132 * (1.0/((1.0 + 
    (lengthSq_128 * lightAttenSq_124)
  ))));
  col_126 = (lightColor0_120 * tmpvar_133.x);
  col_126 = (col_126 + (lightColor1_121 * tmpvar_133.y));
  col_126 = (col_126 + (lightColor2_122 * tmpvar_133.z));
  col_126 = (col_126 + (lightColor3_123 * tmpvar_133.w));
  tmpvar_10 = ((x2_118 + (unity_SHC.xyz * 
    ((normal_117.x * normal_117.x) - (normal_117.y * normal_117.y))
  )) + col_126);
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp float tangentSign_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_16;
  highp vec3 rotatedWindVector_17;
  highp vec3 finalPosition_18;
  finalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    rotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_18 = (finalPosition_18 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_22;
    tmpvar_22 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_23[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_23[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_18 = (finalPosition_18 * tmpvar_23);
    finalPosition_18 = (normalize(finalPosition_18) * tmpvar_22);
  } else {
    highp vec3 tmpvar_24;
    tmpvar_24.x = tmpvar_4.w;
    tmpvar_24.y = tmpvar_5.x;
    tmpvar_24.z = tmpvar_5.y;
    finalPosition_18 = mix (finalPosition_18, tmpvar_24, unity_LODFade.xxx);
  };
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_19 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = finalPosition_18;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (finalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * rotatedWindVector_17.zxy) - (tmpvar_35.zxy * rotatedWindVector_17.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (rotatedWindVector_17, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_15 = vDirection_29;
    finalPosition_18 = vPos_28;
  };
  finalPosition_18 = (finalPosition_18 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_69;
  tmpvar_69.x = _Object2World[3].x;
  tmpvar_69.y = _Object2World[3].y;
  tmpvar_69.z = _Object2World[3].z;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = finalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = finalPosition_18;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (finalPosition_18 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((rotatedBranchAnchor_16 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_69.x + tmpvar_69.y));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    finalPosition_18 = vPos_70;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = finalPosition_18;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (finalPosition_18, finalPosition_18));
    highp float tmpvar_99;
    tmpvar_99 = (max ((finalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_69.x + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_69.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (finalPosition_18.xz + (rotatedWindVector_17.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    finalPosition_18 = vPos_95;
  };
  tmpvar_14.xyz = finalPosition_18;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_15.x)
   + 
    (v_105.xyz * tmpvar_15.y)
  ) + (v_106.xyz * tmpvar_15.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_6 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = (((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx)) * tangentSign_6);
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = tmpvar_111.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = tmpvar_111.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = tmpvar_111.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
  xlv_TEXCOORD6 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2.x<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2.x==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2.x>=3.0;
    if(tb52){
        tb52 = t16_2.x==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.zw = _World2Object[2].yy;
    t5 = t34.yyyy * t5;
    t0 = t2 * t34.xxxx + t5;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.zw = _World2Object[2].zz;
    t0 = t2 * vec4(t20) + t0;
    t52 = dot(t0.xyw, t0.xyw);
    t52 = inversesqrt(t52);
    t0 = t0 * vec4(t52);
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t5.xyz = vec3(t52) * t5.xyz;
    t52 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_15.xyz = t0.wxy * t5.xyz;
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    t10_15.xyz = vec3(t52) * t10_15.xyz;
    t16_2 = t0.ywzx * t0;
    t16_16.x = dot(unity_SHBr, t16_2);
    t16_16.y = dot(unity_SHBg, t16_2);
    t16_16.z = dot(unity_SHBb, t16_2);
    t16_67 = t0.y * t0.y;
    t16_67 = t0.x * t0.x + (-t16_67);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    t2 = t3.zzzz * _Object2World[1];
    t2 = _Object2World[0] * t3.xxxx + t2;
    t2 = _Object2World[2] * t3.wwww + t2;
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD0.y = t10_15.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.w = t4.x;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD1.y = t10_15.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.w = t4.y;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD2.y = t10_15.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD2.w = t4.z;
    vs_TEXCOORD3.w = _Color.w;
    vs_TEXCOORD6 = t2;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec73 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec73, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp float tangentSign_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  lowp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13.xy = tmpvar_3.xy;
  tmpvar_12.w = _Color.w;
  tmpvar_12.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_13.z = tmpvar_14;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_17;
  highp vec3 rotatedWindVector_18;
  highp vec3 finalPosition_19;
  finalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    rotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  finalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if ((_glesColor.w == 0.0)) {
    finalPosition_19 = (finalPosition_19 * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
    highp float tmpvar_23;
    tmpvar_23 = sqrt(dot (finalPosition_19, finalPosition_19));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = glstate_matrix_invtrans_modelview0[0].xyz;
    tmpvar_24[1] = glstate_matrix_invtrans_modelview0[1].xyz;
    tmpvar_24[2] = glstate_matrix_invtrans_modelview0[2].xyz;
    finalPosition_19 = (finalPosition_19 * tmpvar_24);
    finalPosition_19 = (normalize(finalPosition_19) * tmpvar_23);
  } else {
    highp vec3 tmpvar_25;
    tmpvar_25.x = tmpvar_4.w;
    tmpvar_25.y = tmpvar_5.x;
    tmpvar_25.z = tmpvar_5.y;
    finalPosition_19 = mix (finalPosition_19, tmpvar_25, unity_LODFade.xxx);
  };
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_20 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = finalPosition_19;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (finalPosition_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * rotatedWindVector_18.zxy) - (tmpvar_36.zxy * rotatedWindVector_18.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (rotatedWindVector_18, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_16 = vDirection_30;
    finalPosition_19 = vPos_29;
  };
  finalPosition_19 = (finalPosition_19 + _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_70;
  tmpvar_70.x = _Object2World[3].x;
  tmpvar_70.y = _Object2World[3].y;
  tmpvar_70.z = _Object2World[3].z;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = finalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = finalPosition_19;
      highp float fTime_73;
      highp float fAdherenceScale_74;
      highp vec3 vWindVector_75;
      vWindVector_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_73 = (_ST_WindBranch.x + (tmpvar_70.x + tmpvar_70.y));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (fTime_73 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((fTime_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_73 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((fTime_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_77 = (fOscillation_77 * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (finalPosition_19 + ((vWindVector_75 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((fTime_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_74 = (1.0 - ((tmpvar_84.x * tmpvar_84.y) * (
        (tmpvar_84.x * tmpvar_84.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_74 = (fAdherenceScale_74 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((rotatedBranchAnchor_17 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_74) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp float fTime_87;
      highp vec3 vWindVector_88;
      vWindVector_88 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_87 = (_ST_WindBranch.x + (tmpvar_70.x + tmpvar_70.y));
      highp vec4 vOscillations_89;
      highp float fOscillation_90;
      fOscillation_90 = 1.0;
      highp float fAmount_91;
      highp float fTarget_92;
      highp vec4 tmpvar_93;
      tmpvar_93.w = 0.0;
      tmpvar_93.x = (fTime_87 + _glesMultiTexCoord0.w);
      tmpvar_93.y = ((fTime_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_93.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_94;
      tmpvar_94 = abs(((
        fract((tmpvar_93 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_94 * tmpvar_94)
       * 
        (3.0 - (2.0 * tmpvar_94))
      ) - 0.5) * 2.0);
      highp float tmpvar_95;
      tmpvar_95 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_92 = 1.0;
      fAmount_91 = tmpvar_95;
      if ((tmpvar_95 < 0.0)) {
        fTarget_92 = -1.0;
        fAmount_91 = -(tmpvar_95);
      };
      fOscillation_90 = (((
        mix (mix (tmpvar_95, fTarget_92, fAmount_91), fTarget_92, fAmount_91)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_86 = (vPos_71 + ((vWindVector_88 * fOscillation_90) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    finalPosition_19 = vPos_71;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_96;
    vPos_96 = finalPosition_19;
    highp float fMoveAmount_97;
    highp float fAdjust_98;
    highp float fLength_99;
    fLength_99 = sqrt(dot (finalPosition_19, finalPosition_19));
    highp float tmpvar_100;
    tmpvar_100 = (max ((finalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_98 = tmpvar_100;
    if ((tmpvar_100 != 0.0)) {
      fAdjust_98 = pow (tmpvar_100, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_101;
    tmpvar_101.zw = vec2(0.0, 0.0);
    tmpvar_101.x = (tmpvar_70.x + _ST_WindGlobal.x);
    tmpvar_101.y = (tmpvar_70.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_102;
    highp vec4 tmpvar_103;
    tmpvar_103 = abs(((
      fract((tmpvar_101 + 0.5))
     * 2.0) - 1.0));
    tmpvar_102 = (((
      (tmpvar_103 * tmpvar_103)
     * 
      (3.0 - (2.0 * tmpvar_103))
    ) - 0.5) * 2.0);
    fMoveAmount_97 = ((_ST_WindGlobal.y * (tmpvar_102.x + 
      (tmpvar_102.y * tmpvar_102.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_97 = (fMoveAmount_97 * fAdjust_98);
    vPos_96.xz = (finalPosition_19.xz + (rotatedWindVector_18.xz * fMoveAmount_97));
    vPos_96 = (normalize(vPos_96) * fLength_99);
    finalPosition_19 = vPos_96;
  };
  tmpvar_15.xyz = finalPosition_19;
  tmpvar_9 = tmpvar_12;
  highp vec3 tmpvar_104;
  tmpvar_104 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_6 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112 = (((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx)) * tangentSign_6);
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.x;
  tmpvar_113.y = tmpvar_112.x;
  tmpvar_113.z = worldNormal_8.x;
  tmpvar_113.w = tmpvar_104.x;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.y;
  tmpvar_114.y = tmpvar_112.y;
  tmpvar_114.z = worldNormal_8.y;
  tmpvar_114.w = tmpvar_104.y;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_7.z;
  tmpvar_115.y = tmpvar_112.z;
  tmpvar_115.z = worldNormal_8.z;
  tmpvar_115.w = tmpvar_104.z;
  lowp vec4 tmpvar_116;
  tmpvar_116.w = 1.0;
  tmpvar_116.xyz = worldNormal_8;
  mediump vec4 normal_117;
  normal_117 = tmpvar_116;
  mediump vec3 x2_118;
  mediump vec4 tmpvar_119;
  tmpvar_119 = (normal_117.xyzz * normal_117.yzzx);
  x2_118.x = dot (unity_SHBr, tmpvar_119);
  x2_118.y = dot (unity_SHBg, tmpvar_119);
  x2_118.z = dot (unity_SHBb, tmpvar_119);
  highp vec3 lightColor0_120;
  lightColor0_120 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_121;
  lightColor1_121 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_122;
  lightColor2_122 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_123;
  lightColor3_123 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_124;
  lightAttenSq_124 = unity_4LightAtten0;
  highp vec3 normal_125;
  normal_125 = worldNormal_8;
  highp vec3 col_126;
  highp vec4 ndotl_127;
  highp vec4 lengthSq_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_4LightPosX0 - tmpvar_104.x);
  highp vec4 tmpvar_130;
  tmpvar_130 = (unity_4LightPosY0 - tmpvar_104.y);
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_4LightPosZ0 - tmpvar_104.z);
  lengthSq_128 = (tmpvar_129 * tmpvar_129);
  lengthSq_128 = (lengthSq_128 + (tmpvar_130 * tmpvar_130));
  lengthSq_128 = (lengthSq_128 + (tmpvar_131 * tmpvar_131));
  ndotl_127 = (tmpvar_129 * normal_125.x);
  ndotl_127 = (ndotl_127 + (tmpvar_130 * normal_125.y));
  ndotl_127 = (ndotl_127 + (tmpvar_131 * normal_125.z));
  highp vec4 tmpvar_132;
  tmpvar_132 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_127 * inversesqrt(lengthSq_128)));
  ndotl_127 = tmpvar_132;
  highp vec4 tmpvar_133;
  tmpvar_133 = (tmpvar_132 * (1.0/((1.0 + 
    (lengthSq_128 * lightAttenSq_124)
  ))));
  col_126 = (lightColor0_120 * tmpvar_133.x);
  col_126 = (col_126 + (lightColor1_121 * tmpvar_133.y));
  col_126 = (col_126 + (lightColor2_122 * tmpvar_133.z));
  col_126 = (col_126 + (lightColor3_123 * tmpvar_133.w));
  tmpvar_10 = ((x2_118 + (unity_SHC.xyz * 
    ((normal_117.x * normal_117.x) - (normal_117.y * normal_117.y))
  )) + col_126);
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t17.x = t0.x + _Object2World[3].z;
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    t17.y = t34.x + in_NORMAL0.x;
    t17.xy = fract(t17.xy);
    t17.x = t17.y * 0.5 + t17.x;
    t17.x = t17.x + -0.300000012;
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t51 = dot(t3.xyz, t3.xyz);
    t51 = inversesqrt(t51);
    t3.xyz = vec3(t51) * t3.xyz;
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, vec3(tb17.xxx));
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    tb51 = in_COLOR0.w==0.0;
    t52 = in_TEXCOORD1.w + -1.0;
    t52 = unity_LODFade.x * t52 + 1.0;
    t5.xyz = vec3(t52) * t4.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = sqrt(t52);
    t6.x = dot(t5.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
    t6.y = dot(t5.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
    t6.z = dot(t5.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
    t54 = dot(t6.xyz, t6.xyz);
    t54 = inversesqrt(t54);
    t5.xyz = vec3(t54) * t6.xyz;
    t5.xyz = vec3(t52) * t5.xyz;
    t6.x = in_TEXCOORD1.w;
    t6.yz = in_TEXCOORD3.xy;
    t6.xyz = (-t4.xyz) + t6.xyz;
    t4.xyz = unity_LODFade.xxx * t6.xyz + t4.xyz;
    t4.xyz = (bool(tb51)) ? t5.xyz : t4.xyz;
    tb51 = t16_2.x<5.0;
    ti34 = int(uint(tb51) * 0xffffffffu & uint(tb17.y) * 0xffffffffu);
    if((uint(ti34))!=uint(0u)){
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        tb51 = t16_2.x==4.0;
        tb52 = 0.0<in_TEXCOORD2.w;
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        t34.x = t34.x + t5.x;
        t34.x = t34.x + 0.5;
        t34.x = fract(t34.x);
        t34.x = t34.x * 2.0 + -1.0;
        t54 = abs(t34.x) * abs(t34.x);
        t34.x = -abs(t34.x) * 2.0 + 3.0;
        t34.x = t54 * t34.x + -0.5;
        t34.x = dot(t34.xx, t5.yy);
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.0625, 1.0, 16.0);
        t5.xyz = fract(t5.xyz);
        t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        t5.xyz = t34.xxx * t5.xyz;
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        if(tb51){
            t5 = in_TEXCOORD2.yyyy * vec4(0.0625, 1.0, 16.0, 30.2999992);
            t5 = fract(t5);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            t34.x = t5.w * 3.0;
            t8.y = t5.w * 3.0 + t6.x;
            t8.x = t6.x * 0.75 + (-t34.x);
            t34.xy = t8.xy + vec2(0.5, 0.5);
            t34.xy = fract(t34.xy);
            t34.xy = t34.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t8.xy = abs(t34.xy) * abs(t34.xy);
            t34.xy = -abs(t34.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t34.xy = t8.xy * t34.xy + vec2(-0.5, -0.5);
            t34.xy = t34.xy + t34.xy;
            t52 = dot(t4.xyz, t4.xyz);
            t52 = sqrt(t52);
            t54 = t34.x * t34.x + t34.y;
            t55 = t6.z * in_TEXCOORD2.x;
            t54 = t54 * t55;
            t6.x = sin(t54);
            t8.x = cos(t54);
            t54 = (-t8.x) + 1.0;
            t9 = t5.xxxy * vec4(t54);
            t25.xyz = t5.zxy * t6.xxx;
            t10.xy = t9.zy * t5.zy + t25.zx;
            t11.xy = t9.xw * t5.xy + t8.xx;
            t10.z = t9.w * t5.z + (-t25.y);
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            t12.z = t9.w * t5.z + t25.y;
            t55 = t5.z * t5.z;
            t12.w = t55 * t54 + t8.x;
            t8.xyz = t3.yzx * t5.zxy;
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            t20 = dot(t3.xyz, t5.xyz);
            t20 = max(t20, -1.0);
            t20 = min(t20, 1.0);
            t8.w = t20 + t8.y;
            t54 = dot(t8.xzw, t8.xzw);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t8.zxw;
            t54 = -abs(t20) + 1.0;
            t54 = sqrt(t54);
            t55 = abs(t20) * -0.0187292993 + 0.0742610022;
            t55 = t55 * abs(t20) + -0.212114394;
            t55 = t55 * abs(t20) + 1.57072878;
            t6.x = t54 * t55;
            t6.x = t6.x * -2.0 + 3.14159274;
            tb20 = t20<(-t20);
            t20 = tb20 ? t6.x : float(0.0);
            t20 = t55 * t54 + t20;
            t34.x = (-t34.y) * t34.y + t34.x;
            t8.x = t5.w * 3.0 + t7.z;
            t8.y = t8.x * 0.870000005;
            t6.xz = t8.xy + vec2(0.5, 0.5);
            t6.xz = fract(t6.xz);
            t6.xz = t6.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t6.xz) * abs(t6.xz);
            t6.xz = -abs(t6.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xz = t41.xy * t6.xz + vec2(-0.5, -0.5);
            t6.xz = t6.xz + t6.xz;
            t51 = t6.z * t6.z;
            t51 = t51 * t6.x + 1.0;
            t51 = t51 * 0.5;
            t51 = clamp(t51, 0.0, 1.0);
            t51 = log2(t51);
            t51 = t51 * t7.y;
            t51 = exp2(t51);
            t34.x = t6.y * t34.x;
            t34.x = t20 * t6.w + t34.x;
            t34.x = t7.x * t51 + t34.x;
            t34.x = t34.x * in_TEXCOORD2.x;
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            t34.x = (-t7.x) + 1.0;
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            t6.xyz = t5.xyz * t6.xxx;
            t9.xy = t8.zy * t5.xz + t6.zx;
            t13.xy = t8.xw * t5.yz + t7.xx;
            t9.z = t8.w * t5.x + (-t6.y);
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            t14.z = t8.w * t5.x + t6.y;
            t51 = t5.x * t5.x;
            t9.w = t51 * t34.x + t7.x;
            t11.z = t12.x;
            t11.w = t10.x;
            t13.z = t9.y;
            t13.w = t14.y;
            t5.x = dot(t11.xzw, t13.xzw);
            t14.w = t13.y;
            t5.y = dot(t11.xwz, t14.xzw);
            t5.z = dot(t11.xzw, t9.xzw);
            t10.w = t11.y;
            t6.x = dot(t10.ywz, t13.xzw);
            t6.y = dot(t10.yzw, t14.xzw);
            t6.z = dot(t10.ywz, t9.xzw);
            t7.x = dot(t12.yzw, t13.xzw);
            t7.y = dot(t12.ywz, t14.xzw);
            t7.z = dot(t12.yzw, t9.xzw);
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            t5.x = dot(t5.xyz, t4.xyz);
            t5.y = dot(t6.xyz, t4.xyz);
            t5.z = dot(t7.xyz, t4.xyz);
            t54 = dot(t5.xyz, t5.xyz);
            t54 = inversesqrt(t54);
            t5.xyz = vec3(t54) * t5.xyz;
            t4.xyz = vec3(t52) * t5.xyz;
        } else {
            t34.xy = in_NORMAL0.xy;
            t20 = in_NORMAL0.z;
        //ENDIF
        }
    } else {
        t34.xy = in_NORMAL0.xy;
        t20 = in_NORMAL0.z;
    //ENDIF
    }
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    tb52 = t16_2.x>=3.0;
    if(tb52){
        tb52 = t16_2.x==5.0;
        if(tb52){
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            t52 = dot(t5.xyz, t5.xyz);
            t52 = inversesqrt(t52);
            t5.xyz = vec3(t52) * t5.xyz;
            t6.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            t52 = t0.x + _ST_WindBranch.x;
            t2.x = t52 + in_TEXCOORD0.w;
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t54 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t54 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t7 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t7 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t7.w = t2.z * t2.y;
            tb54 = t7.w<0.0;
            t7.y = (-t7.w);
            t7.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            t54 = (-t2.y) * t2.z + t7.x;
            t54 = t7.y * t54 + t7.w;
            t55 = (-t54) + t7.x;
            t54 = t7.y * t55 + t54;
            t54 = t54 * _ST_WindBranchTwitch.x;
            t55 = (-_ST_WindVector.w) + 1.0;
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            t56 = t2.x * t56;
            t54 = t54 * t55 + t56;
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t54 = t54 * t55;
            t6.xyz = vec3(t54) * t6.xyz;
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            t7.x = t52 * 0.100000001 + in_TEXCOORD0.w;
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t7.y = t52 * 0.100000001 + in_TEXCOORD0.w;
            t7.xy = t7.xy + vec2(0.5, 0.5);
            t7.xy = fract(t7.xy);
            t7.xy = t7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t41.xy = abs(t7.xy) * abs(t7.xy);
            t7.xy = -abs(t7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t7.xy = t41.xy * t7.xy + vec2(-0.5, -0.5);
            t7.xy = t7.xy + t7.xy;
            t7.xy = t7.xy * t7.xy;
            t52 = t7.x * t7.y;
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            t54 = t2.w * _ST_WindVector.w;
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            t5.xyz = vec3(t52) * t5.xyz;
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
        } else {
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t6.x = t0.x + in_TEXCOORD0.w;
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            t6.z = t0.x * 0.5;
            t6.xyz = t6.xyz + vec3(0.5, 0.5, 0.5);
            t6.xyz = fract(t6.xyz);
            t6.xyz = t6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            t6.xyz = -abs(t6.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.5, -0.5, -0.5);
            t6.xyz = t6.xyz + t6.xyz;
            t2.w = t6.z * t6.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t6.y) * t6.z + t7.x;
            t0.x = t7.y * t0.x + t2.w;
            t52 = (-t0.x) + t7.x;
            t0.x = t7.y * t52 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t52 = (-_ST_WindVector.w) + 1.0;
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            t54 = t54 * t6.x;
            t0.x = t0.x * t52 + t54;
            t5.xyz = t0.xxx * t5.xyz;
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t4.xyz, t4.xyz);
    t0.x = sqrt(t0.x);
    t52 = float(1.0) / _ST_WindGlobal.z;
    t52 = (-t52) * 0.25 + t4.y;
    t52 = max(t52, 0.0);
    t52 = t52 * _ST_WindGlobal.z;
    tb54 = t52!=0.0;
    t55 = log2(t52);
    t55 = t55 * _ST_WindGlobal.w;
    t55 = exp2(t55);
    t52 = (tb54) ? t55 : t52;
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    t5.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t5.xy = t5.xy + vec2(0.5, 0.5);
    t5.xy = fract(t5.xy);
    t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t39.xy = abs(t5.xy) * abs(t5.xy);
    t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t5.xy = t39.xy * t5.xy + vec2(-0.5, -0.5);
    t5.xy = t5.xy + t5.xy;
    t54 = t5.y * t5.y + t5.x;
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t54 = _ST_WindGlobal.y * t54 + t55;
    t52 = t52 * t54;
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    t5.y = t4.y;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t3.xzw = vec3(t52) * t5.xyz;
    t3.xzw = t0.xxx * t3.xzw;
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.zw = _World2Object[2].yy;
    t5 = t34.yyyy * t5;
    t0 = t2 * t34.xxxx + t5;
    t2.x = _World2Object[0].z;
    t2.y = _World2Object[1].z;
    t2.zw = _World2Object[2].zz;
    t0 = t2 * vec4(t20) + t0;
    t52 = dot(t0.xyw, t0.xyw);
    t52 = inversesqrt(t52);
    t0 = t0 * vec4(t52);
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    t52 = dot(t5.xyz, t5.xyz);
    t52 = inversesqrt(t52);
    t5.xyz = vec3(t52) * t5.xyz;
    t52 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_15.xyz = t0.wxy * t5.xyz;
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    t10_15.xyz = vec3(t52) * t10_15.xyz;
    t16_2 = t0.ywzx * t0;
    t16_16.x = dot(unity_SHBr, t16_2);
    t16_16.y = dot(unity_SHBg, t16_2);
    t16_16.z = dot(unity_SHBb, t16_2);
    t16_67 = t0.y * t0.y;
    t16_67 = t0.x * t0.x + (-t16_67);
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    t6 = (-t4.yyyy) + unity_4LightPosY0;
    t7 = (-t4.zzzz) + unity_4LightPosZ0;
    t8 = t6 * t6;
    t8 = t2 * t2 + t8;
    t8 = t7 * t7 + t8;
    t6 = t0.yyyy * t6;
    t2 = t2 * t0.xxxx + t6;
    t2 = t7 * t0.wwww + t2;
    t6 = inversesqrt(t8);
    t2 = t2 * t6;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t6 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    t2 = t2 * t6;
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    t6.xyz = t6.xyz + t16_16.xyz;
    t2 = t3.zzzz * _Object2World[1];
    t2 = _Object2World[0] * t3.xxxx + t2;
    t2 = _Object2World[2] * t3.wwww + t2;
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD0.y = t10_15.x;
    vs_TEXCOORD0.z = t0.x;
    vs_TEXCOORD0.w = t4.x;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD1.y = t10_15.y;
    vs_TEXCOORD1.z = t0.y;
    vs_TEXCOORD1.w = t4.y;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD2.y = t10_15.z;
    vs_TEXCOORD2.z = t0.w;
    vs_TEXCOORD2.w = t4.z;
    vs_TEXCOORD3.w = _Color.w;
    vs_TEXCOORD6 = t2;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    tb15 = t10_1.x<0.0;
    if((int(tb15) * int(0xffffffffu))!=0){discard;}
    t16_2.x = max(t10_0.z, t10_0.y);
    t16_2.x = max(t10_0.x, t16_2.x);
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    t16_3.x = max(t16_7.z, t16_7.y);
    t16_3.x = max(t16_7.x, t16_3.x);
    t16_2.x = t16_2.x / t16_3.x;
    t16_0 = t16_2.x * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec74 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec74, 0.0);
    t16_3.x = (-_LightShadowData.x) + 1.0;
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_1.xyz = t10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    t0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t0);
    t16_4.y = dot(unity_SHAg, t0);
    t16_4.z = dot(unity_SHAb, t0);
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    t16_17 = max(t16_17, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    SV_Target0.xyz = t16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_9;
  highp vec3 rotatedWindVector_10;
  highp vec3 finalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  finalPosition_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    rotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((rotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    finalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = finalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (finalPosition_11, finalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((finalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (finalPosition_11.xz + (rotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    finalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = finalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_3;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
  xlv_TEXCOORD5 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD5 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    t15 = dot(t8.xyz, t8.xyz);
    t15 = inversesqrt(t15);
    t8.xy = vec2(t15) * t8.xz;
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, vec2(bvec2(tb1)));
    tb22 = t16_0.x>=3.0;
    if(tb22){
        tb22 = t16_0.x==5.0;
        if(tb22){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t22 = dot(t2.xyz, t2.xyz);
            t22 = inversesqrt(t22);
            t2.xyz = vec3(t22) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t0.x = t22 + in_TEXCOORD0.w;
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t23 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t23 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb23 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            t23 = (-t0.y) * t0.z + t4.x;
            t23 = t4.y * t23 + t4.w;
            t24 = (-t23) + t4.x;
            t23 = t4.y * t24 + t23;
            t23 = t23 * _ST_WindBranchTwitch.x;
            t24 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t23 = t23 * t24 + t4.x;
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t23 = t23 * t24;
            t3.xyz = vec3(t23) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t18.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t22 = t4.x * t4.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t23 = t0.w * _ST_WindVector.w;
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t22) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t4.x = t22 + in_TEXCOORD0.w;
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t22 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t22 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb22 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            t22 = (-t4.y) * t4.z + t5.x;
            t22 = t5.y * t22 + t0.w;
            t23 = (-t22) + t5.x;
            t22 = t5.y * t23 + t22;
            t22 = t22 * _ST_WindBranchTwitch.x;
            t23 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t4.x;
            t22 = t22 * t23 + t24;
            t3.xyz = vec3(t22) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t22 = dot(t2.xyz, t2.xyz);
    t22 = sqrt(t22);
    t23 = float(1.0) / _ST_WindGlobal.z;
    t23 = (-t23) * 0.25 + t2.y;
    t23 = max(t23, 0.0);
    t23 = t23 * _ST_WindGlobal.z;
    tb3 = t23!=0.0;
    t10 = log2(t23);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    t23 = (tb3) ? t10 : t23;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t17.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    t23 = t23 * t3.x;
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    t3.y = t2.y;
    t8.x = dot(t3.xyz, t3.xyz);
    t8.x = inversesqrt(t8.x);
    t3.xyz = t8.xxx * t3.xyz;
    t8.xyz = vec3(t22) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t22 = t2.y * _ProjectionParams.x;
    t3.w = t22 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t16_0 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_27 = t1.y * t1.y;
    t16_27 = t1.x * t1.x + (-t16_27);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_9 = max(t16_9, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_9).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_3;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  highp vec3 lightColor0_66;
  lightColor0_66 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_67;
  lightColor1_67 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_68;
  lightColor2_68 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_69;
  lightColor3_69 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_70;
  lightAttenSq_70 = unity_4LightAtten0;
  highp vec3 normal_71;
  normal_71 = worldNormal_3;
  highp vec3 col_72;
  highp vec4 ndotl_73;
  highp vec4 lengthSq_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_74 = (tmpvar_75 * tmpvar_75);
  lengthSq_74 = (lengthSq_74 + (tmpvar_76 * tmpvar_76));
  lengthSq_74 = (lengthSq_74 + (tmpvar_77 * tmpvar_77));
  ndotl_73 = (tmpvar_75 * normal_71.x);
  ndotl_73 = (ndotl_73 + (tmpvar_76 * normal_71.y));
  ndotl_73 = (ndotl_73 + (tmpvar_77 * normal_71.z));
  highp vec4 tmpvar_78;
  tmpvar_78 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_73 * inversesqrt(lengthSq_74)));
  ndotl_73 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (tmpvar_78 * (1.0/((1.0 + 
    (lengthSq_74 * lightAttenSq_70)
  ))));
  col_72 = (lightColor0_66 * tmpvar_79.x);
  col_72 = (col_72 + (lightColor1_67 * tmpvar_79.y));
  col_72 = (col_72 + (lightColor2_68 * tmpvar_79.z));
  col_72 = (col_72 + (lightColor3_69 * tmpvar_79.w));
  tmpvar_6 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + col_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD5 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    tb25 = t16_0.x>=3.0;
    if(tb25){
        tb25 = t16_0.x==5.0;
        if(tb25){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t25 = dot(t2.xyz, t2.xyz);
            t25 = inversesqrt(t25);
            t2.xyz = vec3(t25) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb26 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            t26 = (-t0.y) * t0.z + t4.x;
            t26 = t4.y * t26 + t4.w;
            t27 = (-t26) + t4.x;
            t26 = t4.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t26 = t26 * t27 + t4.x;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t3.xyz = vec3(t26) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t20.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t25 = t4.x * t4.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t25) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t25 = t2.y * _ProjectionParams.x;
    t3.w = t25 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = inversesqrt(t25);
    t3.xyz = vec3(t25) * t3.xyz;
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_30 = t3.y * t3.y;
    t16_30 = t3.x * t3.x + (-t16_30);
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    t4 = (-t1.yyyy) + unity_4LightPosY0;
    t5 = (-t1.zzzz) + unity_4LightPosZ0;
    t7 = t4 * t4;
    t7 = t0 * t0 + t7;
    t7 = t5 * t5 + t7;
    t4 = t3.yyyy * t4;
    t0 = t0 * t3.xxxx + t4;
    t0 = t5 * t3.zzzz + t0;
    t4 = inversesqrt(t7);
    t0 = t0 * t4;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    t0 = t0 * t4;
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    t4.xyz = t4.xyz + t16_6.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD5.xyz = t4.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_9 = max(t16_9, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_3;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_6 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    t15 = dot(t8.xyz, t8.xyz);
    t15 = inversesqrt(t15);
    t8.xy = vec2(t15) * t8.xz;
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, vec2(bvec2(tb1)));
    tb22 = t16_0.x>=3.0;
    if(tb22){
        tb22 = t16_0.x==5.0;
        if(tb22){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t22 = dot(t2.xyz, t2.xyz);
            t22 = inversesqrt(t22);
            t2.xyz = vec3(t22) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t0.x = t22 + in_TEXCOORD0.w;
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t23 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t23 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb23 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            t23 = (-t0.y) * t0.z + t4.x;
            t23 = t4.y * t23 + t4.w;
            t24 = (-t23) + t4.x;
            t23 = t4.y * t24 + t23;
            t23 = t23 * _ST_WindBranchTwitch.x;
            t24 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t23 = t23 * t24 + t4.x;
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t23 = t23 * t24;
            t3.xyz = vec3(t23) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t18.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t18.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t22 = t4.x * t4.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t23 = t0.w * _ST_WindVector.w;
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t22) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t4.x = t22 + in_TEXCOORD0.w;
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t22 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t22 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb22 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            t22 = (-t4.y) * t4.z + t5.x;
            t22 = t5.y * t22 + t0.w;
            t23 = (-t22) + t5.x;
            t22 = t5.y * t23 + t22;
            t22 = t22 * _ST_WindBranchTwitch.x;
            t23 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t4.x;
            t22 = t22 * t23 + t24;
            t3.xyz = vec3(t22) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t22 = dot(t2.xyz, t2.xyz);
    t22 = sqrt(t22);
    t23 = float(1.0) / _ST_WindGlobal.z;
    t23 = (-t23) * 0.25 + t2.y;
    t23 = max(t23, 0.0);
    t23 = t23 * _ST_WindGlobal.z;
    tb3 = t23!=0.0;
    t10 = log2(t23);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    t23 = (tb3) ? t10 : t23;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t17.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    t23 = t23 * t3.x;
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    t3.y = t2.y;
    t8.x = dot(t3.xyz, t3.xyz);
    t8.x = inversesqrt(t8.x);
    t3.xyz = t8.xxx * t3.xyz;
    t8.xyz = vec3(t22) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t22 = t2.y * _ProjectionParams.x;
    t3.w = t22 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = inversesqrt(t22);
    t3.xyz = vec3(t22) * t3.xyz;
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_27 = t3.y * t3.y;
    t16_27 = t3.x * t3.x + (-t16_27);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD0.xyz = t3.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD6 = t0;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_4 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_4 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    vec3 txVec92 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec92, 0.0);
    t16_14 = (-_LightShadowData.x) + 1.0;
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_12 = max(t16_12, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_3;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_6 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec4 t8;
highp vec3 t10;
highp float t12;
highp float t19;
highp vec2 t21;
highp vec2 t22;
highp float t28;
bool tb28;
highp float t29;
bool tb29;
highp float t30;
mediump float t16_33;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t10.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t10.xyz;
    t10.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t10.xyz;
    t19 = dot(t10.xyz, t10.xyz);
    t19 = inversesqrt(t19);
    t10.xy = vec2(t19) * t10.xz;
    t10.xy = mix(vec2(0.0, 0.0), t10.xy, vec2(bvec2(tb1)));
    tb28 = t16_0.x>=3.0;
    if(tb28){
        tb28 = t16_0.x==5.0;
        if(tb28){
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            t28 = dot(t2.xyz, t2.xyz);
            t28 = inversesqrt(t28);
            t2.xyz = vec3(t28) * t2.xyz;
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t28 = _Object2World[3].y + _Object2World[3].x;
            t28 = t28 + _ST_WindBranch.x;
            t0.x = t28 + in_TEXCOORD0.w;
            t0.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t29 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t29 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t4 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t4 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t4.w = t0.z * t0.y;
            tb29 = t4.w<0.0;
            t4.y = (-t4.w);
            t4.xz = vec2(-1.0, 1.0);
            t4.xy = (bool(tb29)) ? t4.xy : t4.zw;
            t29 = (-t0.y) * t0.z + t4.x;
            t29 = t4.y * t29 + t4.w;
            t30 = (-t29) + t4.x;
            t29 = t4.y * t30 + t29;
            t29 = t29 * _ST_WindBranchTwitch.x;
            t30 = (-_ST_WindVector.w) + 1.0;
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t4.x = t0.x * t4.x;
            t29 = t29 * t30 + t4.x;
            t30 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t29 = t29 * t30;
            t3.xyz = vec3(t29) * t3.xyz;
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t4.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t4.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t4.xy = t4.xy + vec2(0.5, 0.5);
            t4.xy = fract(t4.xy);
            t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t22.xy = abs(t4.xy) * abs(t4.xy);
            t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
            t4.xy = t4.xy + t4.xy;
            t4.xy = t4.xy * t4.xy;
            t28 = t4.x * t4.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t29 = t0.w * _ST_WindVector.w;
            t28 = t29 * _ST_WindBranchWhip.x + t28;
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            t2.xyz = vec3(t28) * t2.xyz;
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t28 = _Object2World[3].y + _Object2World[3].x;
            t28 = t28 + _ST_WindBranch.x;
            t4.x = t28 + in_TEXCOORD0.w;
            t4.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t28 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t28 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb28 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb28)) ? t0.xy : t0.zw;
            t28 = (-t4.y) * t4.z + t5.x;
            t28 = t5.y * t28 + t0.w;
            t29 = (-t28) + t5.x;
            t28 = t5.y * t29 + t28;
            t28 = t28 * _ST_WindBranchTwitch.x;
            t29 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t4.x;
            t28 = t28 * t29 + t30;
            t3.xyz = vec3(t28) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t2.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t28 = dot(t2.xyz, t2.xyz);
    t28 = sqrt(t28);
    t29 = float(1.0) / _ST_WindGlobal.z;
    t29 = (-t29) * 0.25 + t2.y;
    t29 = max(t29, 0.0);
    t29 = t29 * _ST_WindGlobal.z;
    tb3 = t29!=0.0;
    t12 = log2(t29);
    t12 = t12 * _ST_WindGlobal.w;
    t12 = exp2(t12);
    t29 = (tb3) ? t12 : t29;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t21.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t21.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t12;
    t29 = t29 * t3.x;
    t3.xz = t10.xy * vec2(t29) + t2.xz;
    t3.y = t2.y;
    t10.x = dot(t3.xyz, t3.xyz);
    t10.x = inversesqrt(t10.x);
    t3.xyz = t10.xxx * t3.xyz;
    t10.xyz = vec3(t28) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t10.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t28 = t2.y * _ProjectionParams.x;
    t3.w = t28 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    t28 = dot(t4.xyz, t4.xyz);
    t28 = inversesqrt(t28);
    t4.xyz = vec3(t28) * t4.xyz;
    t16_0 = t4.yzzx * t4.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_33 = t4.y * t4.y;
    t16_33 = t4.x * t4.x + (-t16_33);
    t16_6.xyz = unity_SHC.xyz * vec3(t16_33) + t16_6.xyz;
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    t7 = (-t3.zzzz) + unity_4LightPosZ0;
    t8 = t5 * t5;
    t8 = t0 * t0 + t8;
    t8 = t7 * t7 + t8;
    t5 = t4.yyyy * t5;
    t0 = t0 * t4.xxxx + t5;
    t0 = t7 * t4.zzzz + t0;
    t5 = inversesqrt(t8);
    t0 = t0 * t5;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    t0 = t0 * t5;
    t5.xyz = t0.yyy * unity_LightColor[1].xyz;
    t5.xyz = unity_LightColor[0].xyz * t0.xxx + t5.xyz;
    t5.xyz = unity_LightColor[2].xyz * t0.zzz + t5.xyz;
    t5.xyz = unity_LightColor[3].xyz * t0.www + t5.xyz;
    t5.xyz = t5.xyz + t16_6.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD0.xyz = t4.xyz;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD6 = t0;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD5.xyz = t5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_4 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_4 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    vec3 txVec93 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec93, 0.0);
    t16_14 = (-_LightShadowData.x) + 1.0;
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_12 = max(t16_12, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  tmpvar_8 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_10;
  highp vec3 rotatedWindVector_11;
  highp vec3 finalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  finalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    rotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((rotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    finalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = finalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (finalPosition_12, finalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((finalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (finalPosition_12.xz + (rotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    finalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = finalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2.x;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2.x>=3.0;
    if(tb25){
        tb25 = t16_2.x==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb27 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            t27 = (-t2.y) * t2.z + t5.x;
            t27 = t5.y * t27 + t5.w;
            t28 = (-t27) + t5.x;
            t27 = t5.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t24 = t3.y * _ProjectionParams.x;
    t4.w = t24 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t16_2 = t0.yzzx * t0.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_31 = t0.y * t0.y;
    t16_31 = t0.x * t0.x + (-t16_31);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
mediump float t16_11;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    t16_9 = max(t16_2.z, t16_2.y);
    t16_9 = max(t16_9, t16_2.x);
    t16_11 = max(t10_1.z, t10_1.y);
    t16_11 = max(t10_1.x, t16_11);
    t16_9 = t16_11 / t16_9;
    t16_1 = t16_9 * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_9 = max(t16_9, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_3;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_3;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_6 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2.x;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2.x>=3.0;
    if(tb28){
        tb28 = t16_2.x==5.0;
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb30 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            t30 = (-t2.y) * t2.z + t5.x;
            t30 = t5.y * t30 + t5.w;
            t31 = (-t30) + t5.x;
            t30 = t5.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t30 = t30 * t31 + t5.x;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t4.xyz = vec3(t30) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t27 = t3.y * _ProjectionParams.x;
    t4.w = t27 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    t27 = dot(t4.xyz, t4.xyz);
    t27 = inversesqrt(t27);
    t4.xyz = vec3(t27) * t4.xyz;
    t16_2 = t4.yzzx * t4.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_34 = t4.y * t4.y;
    t16_34 = t4.x * t4.x + (-t16_34);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    t5 = (-t0.yyyy) + unity_4LightPosY0;
    t6 = (-t0.zzzz) + unity_4LightPosZ0;
    t8 = t5 * t5;
    t8 = t2 * t2 + t8;
    t8 = t6 * t6 + t8;
    t5 = t4.yyyy * t5;
    t2 = t2 * t4.xxxx + t5;
    t2 = t6 * t4.zzzz + t2;
    t5 = inversesqrt(t8);
    t2 = t2 * t5;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    t2 = t2 * t5;
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    t5.xyz = t5.xyz + t16_7.xyz;
    vs_TEXCOORD0.xyz = t4.xyz;
    vs_TEXCOORD1.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t3.xyz;
    vs_TEXCOORD5.xyz = t5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
mediump float t16_11;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_3 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_3 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    t16_9 = max(t16_2.z, t16_2.y);
    t16_9 = max(t16_9, t16_2.x);
    t16_11 = max(t10_1.z, t10_1.y);
    t16_11 = max(t10_1.x, t16_11);
    t16_9 = t16_11 / t16_9;
    t16_1 = t16_9 * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_9 = max(t16_9, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((rotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    finalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = finalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    finalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = finalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_3;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_3;
  highp vec3 col_74;
  highp vec4 ndotl_75;
  highp vec4 lengthSq_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_59.z);
  lengthSq_76 = (tmpvar_77 * tmpvar_77);
  lengthSq_76 = (lengthSq_76 + (tmpvar_78 * tmpvar_78));
  lengthSq_76 = (lengthSq_76 + (tmpvar_79 * tmpvar_79));
  ndotl_75 = (tmpvar_77 * normal_73.x);
  ndotl_75 = (ndotl_75 + (tmpvar_78 * normal_73.y));
  ndotl_75 = (ndotl_75 + (tmpvar_79 * normal_73.z));
  highp vec4 tmpvar_80;
  tmpvar_80 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_75 * inversesqrt(lengthSq_76)));
  ndotl_75 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (tmpvar_80 * (1.0/((1.0 + 
    (lengthSq_76 * lightAttenSq_72)
  ))));
  col_74 = (lightColor0_68 * tmpvar_81.x);
  col_74 = (col_74 + (lightColor1_69 * tmpvar_81.y));
  col_74 = (col_74 + (lightColor2_70 * tmpvar_81.z));
  col_74 = (col_74 + (lightColor3_71 * tmpvar_81.w));
  tmpvar_6 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + col_74);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_3;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2.x;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2.x>=3.0;
    if(tb25){
        tb25 = t16_2.x==5.0;
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb27 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            t27 = (-t2.y) * t2.z + t5.x;
            t27 = t5.y * t27 + t5.w;
            t28 = (-t27) + t5.x;
            t27 = t5.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t27 = t27 * t28 + t5.x;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t4.xyz = vec3(t27) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t24 = t3.y * _ProjectionParams.x;
    t4.w = t24 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    t24 = dot(t4.xyz, t4.xyz);
    t24 = inversesqrt(t24);
    t4.xyz = vec3(t24) * t4.xyz;
    t16_2 = t4.yzzx * t4.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_31 = t4.y * t4.y;
    t16_31 = t4.x * t4.x + (-t16_31);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    t2 = t0.yyyy * _Object2World[1];
    t2 = _Object2World[0] * t0.xxxx + t2;
    t0 = _Object2World[2] * t0.zzzz + t2;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    vs_TEXCOORD0.xyz = t4.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD6 = t0;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_4 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_4 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    t16_12 = max(t16_2.z, t16_2.y);
    t16_12 = max(t16_12, t16_2.x);
    t16_14 = max(t10_1.z, t10_1.y);
    t16_14 = max(t10_1.x, t16_14);
    t16_12 = t16_14 / t16_12;
    t16_1 = t16_12 * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    vec3 txVec75 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec75, 0.0);
    t16_14 = (-_LightShadowData.x) + 1.0;
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_12 = max(t16_12, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((rotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    finalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = finalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    finalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = finalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_3;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_3;
  highp vec3 col_74;
  highp vec4 ndotl_75;
  highp vec4 lengthSq_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_59.z);
  lengthSq_76 = (tmpvar_77 * tmpvar_77);
  lengthSq_76 = (lengthSq_76 + (tmpvar_78 * tmpvar_78));
  lengthSq_76 = (lengthSq_76 + (tmpvar_79 * tmpvar_79));
  ndotl_75 = (tmpvar_77 * normal_73.x);
  ndotl_75 = (ndotl_75 + (tmpvar_78 * normal_73.y));
  ndotl_75 = (ndotl_75 + (tmpvar_79 * normal_73.z));
  highp vec4 tmpvar_80;
  tmpvar_80 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_75 * inversesqrt(lengthSq_76)));
  ndotl_75 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (tmpvar_80 * (1.0/((1.0 + 
    (lengthSq_76 * lightAttenSq_72)
  ))));
  col_74 = (lightColor0_68 * tmpvar_81.x);
  col_74 = (col_74 + (lightColor1_69 * tmpvar_81.y));
  col_74 = (col_74 + (lightColor2_70 * tmpvar_81.z));
  col_74 = (col_74 + (lightColor3_71 * tmpvar_81.w));
  tmpvar_6 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + col_74);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t25;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
mediump float t16_37;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t10.x = t0.x + _Object2World[3].z;
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    t10.y = t20.x + in_NORMAL0.x;
    t10.xy = fract(t10.xy);
    t10.x = t10.y * 0.5 + t10.x;
    t10.x = t10.x + -0.300000012;
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb10 = 0.0<t16_2.x;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t20.x = dot(t3.xyz, t3.xyz);
    t20.x = inversesqrt(t20.x);
    t20.xy = t20.xx * t3.xz;
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, vec2(bvec2(tb10)));
    tb31 = t16_2.x>=3.0;
    if(tb31){
        tb31 = t16_2.x==5.0;
        if(tb31){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t31 = dot(t3.xyz, t3.xyz);
            t31 = inversesqrt(t31);
            t3.xyz = vec3(t31) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t31 = t0.x + _ST_WindBranch.x;
            t2.x = t31 + in_TEXCOORD0.w;
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t33 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t33 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb33 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb33)) ? t5.xy : t5.zw;
            t33 = (-t2.y) * t2.z + t5.x;
            t33 = t5.y * t33 + t5.w;
            t34 = (-t33) + t5.x;
            t33 = t5.y * t34 + t33;
            t33 = t33 * _ST_WindBranchTwitch.x;
            t34 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t33 = t33 * t34 + t5.x;
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t33 = t33 * t34;
            t4.xyz = vec3(t33) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t31 * 0.100000001 + in_TEXCOORD0.w;
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t31 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t25.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t25.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t31 = t5.x * t5.y;
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            t33 = t2.w * _ST_WindVector.w;
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t31) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t31 = (-t0.x) + t6.x;
            t0.x = t6.y * t31 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            t33 = t33 * t5.x;
            t0.x = t0.x * t31 + t33;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t31 = float(1.0) / _ST_WindGlobal.z;
    t31 = (-t31) * 0.25 + t3.y;
    t31 = max(t31, 0.0);
    t31 = t31 * _ST_WindGlobal.z;
    tb33 = t31!=0.0;
    t4.x = log2(t31);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t31 = (tb33) ? t4.x : t31;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t24.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t24.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t33 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    t31 = t31 * t33;
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    t4.y = t3.y;
    t20.x = dot(t4.xyz, t4.xyz);
    t20.x = inversesqrt(t20.x);
    t4.xyz = t20.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t30 = t3.y * _ProjectionParams.x;
    t4.w = t30 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t5.x = _World2Object[0].x;
    t5.y = _World2Object[1].x;
    t5.z = _World2Object[2].x;
    t6.x = _World2Object[0].y;
    t6.y = _World2Object[1].y;
    t6.z = _World2Object[2].y;
    t6.xyz = t6.xyz * in_NORMAL0.yyy;
    t5.xyz = t5.xyz * in_NORMAL0.xxx + t6.xyz;
    t6.x = _World2Object[0].z;
    t6.y = _World2Object[1].z;
    t6.z = _World2Object[2].z;
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    t30 = dot(t5.xyz, t5.xyz);
    t30 = inversesqrt(t30);
    t5.xyz = vec3(t30) * t5.xyz;
    t16_2 = t5.yzzx * t5.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_37 = t5.y * t5.y;
    t16_37 = t5.x * t5.x + (-t16_37);
    t16_7.xyz = unity_SHC.xyz * vec3(t16_37) + t16_7.xyz;
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    t6 = (-t4.yyyy) + unity_4LightPosY0;
    t8 = (-t4.zzzz) + unity_4LightPosZ0;
    t9 = t6 * t6;
    t9 = t2 * t2 + t9;
    t9 = t8 * t8 + t9;
    t6 = t5.yyyy * t6;
    t2 = t2 * t5.xxxx + t6;
    t2 = t8 * t5.zzzz + t2;
    t6 = inversesqrt(t9);
    t2 = t2 * t6;
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    t2 = t2 * t6;
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    t6.xyz = t6.xyz + t16_7.xyz;
    t2 = t0.yyyy * _Object2World[1];
    t2 = _Object2World[0] * t0.xxxx + t2;
    t0 = _Object2World[2] * t0.zzzz + t2;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    vs_TEXCOORD0.xyz = t5.xyz;
    vs_TEXCOORD1.xyz = t4.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD6 = t0;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t3.xyz;
    vs_TEXCOORD5.xyz = t6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_4 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_4 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_2.x = dot(unity_SHAr, t16_0);
    t16_2.y = dot(unity_SHAg, t16_0);
    t16_2.z = dot(unity_SHAb, t16_0);
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    t16_12 = max(t16_2.z, t16_2.y);
    t16_12 = max(t16_12, t16_2.x);
    t16_14 = max(t10_1.z, t10_1.y);
    t16_14 = max(t10_1.x, t16_14);
    t16_12 = t16_14 / t16_12;
    t16_1 = t16_12 * 0.5 + 0.5;
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    vec3 txVec76 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec76, 0.0);
    t16_14 = (-_LightShadowData.x) + 1.0;
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_12 = max(t16_12, 0.0);
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((rotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    finalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = finalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    finalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = finalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.x;
  tmpvar_67.y = tmpvar_66.x;
  tmpvar_67.z = worldNormal_5.x;
  tmpvar_67.w = tmpvar_58.x;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.y;
  tmpvar_68.y = tmpvar_66.y;
  tmpvar_68.z = worldNormal_5.y;
  tmpvar_68.w = tmpvar_58.y;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.z;
  tmpvar_69.y = tmpvar_66.z;
  tmpvar_69.z = worldNormal_5.z;
  tmpvar_69.w = tmpvar_58.z;
  lowp vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = worldNormal_5;
  mediump vec4 normal_71;
  normal_71 = tmpvar_70;
  mediump vec3 x2_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_73);
  x2_72.y = dot (unity_SHBg, tmpvar_73);
  x2_72.z = dot (unity_SHBb, tmpvar_73);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
  xlv_TEXCOORD6 = (x2_72 + (unity_SHC.xyz * (
    (normal_71.x * normal_71.x)
   - 
    (normal_71.y * normal_71.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_8 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb30 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            t30 = (-t2.y) * t2.z + t5.x;
            t30 = t5.y * t30 + t5.w;
            t31 = (-t30) + t5.x;
            t30 = t5.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t30 = t30 * t31 + t5.x;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t4.xyz = vec3(t30) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t27 = t3.y * _ProjectionParams.x;
    t4.w = t27 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.zw = _World2Object[2].yy;
    t4 = t4 * in_NORMAL0.yyyy;
    t2 = t2 * in_NORMAL0.xxxx + t4;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.zw = _World2Object[2].zz;
    t2 = t4 * in_NORMAL0.zzzz + t2;
    t27 = dot(t2.xyw, t2.xyw);
    t27 = inversesqrt(t27);
    t2 = vec4(t27) * t2;
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    t27 = dot(t4.xyz, t4.xyz);
    t27 = inversesqrt(t27);
    t4.xyz = vec3(t27) * t4.xyz;
    t27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t2.wxy * t4.xyz;
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t27) * t10_7.xyz;
    t16_5 = t2.ywzx * t2;
    t16_8.x = dot(unity_SHBr, t16_5);
    t16_8.y = dot(unity_SHBg, t16_5);
    t16_8.z = dot(unity_SHBb, t16_5);
    t16_35 = t2.y * t2.y;
    t16_35 = t2.x * t2.x + (-t16_35);
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.w = t0.x;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.w = t0.y;
    vs_TEXCOORD2.x = t4.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD2.w = t0.z;
    vs_TEXCOORD3.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    t16_15 = max(t16_0.z, t16_0.y);
    t16_15 = max(t16_15, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_15 = t16_2.x / t16_15;
    t16_1 = t16_15 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_3.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    t1.w = 1.0;
    t16_4.x = dot(unity_SHAr, t1);
    t16_4.y = dot(unity_SHAg, t1);
    t16_4.z = dot(unity_SHAb, t1);
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    t16_15 = max(t16_15, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((rotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    finalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = finalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    finalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = finalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = tmpvar_67.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = tmpvar_67.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = tmpvar_67.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_5;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((rotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    finalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = finalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    finalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = finalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = tmpvar_67.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = tmpvar_67.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = tmpvar_67.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_5;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  highp vec3 lightColor0_75;
  lightColor0_75 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_76;
  lightColor1_76 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_77;
  lightColor2_77 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_78;
  lightColor3_78 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_79;
  lightAttenSq_79 = unity_4LightAtten0;
  highp vec3 normal_80;
  normal_80 = worldNormal_5;
  highp vec3 col_81;
  highp vec4 ndotl_82;
  highp vec4 lengthSq_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosZ0 - tmpvar_59.z);
  lengthSq_83 = (tmpvar_84 * tmpvar_84);
  lengthSq_83 = (lengthSq_83 + (tmpvar_85 * tmpvar_85));
  lengthSq_83 = (lengthSq_83 + (tmpvar_86 * tmpvar_86));
  ndotl_82 = (tmpvar_84 * normal_80.x);
  ndotl_82 = (ndotl_82 + (tmpvar_85 * normal_80.y));
  ndotl_82 = (ndotl_82 + (tmpvar_86 * normal_80.z));
  highp vec4 tmpvar_87;
  tmpvar_87 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_82 * inversesqrt(lengthSq_83)));
  ndotl_82 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (tmpvar_87 * (1.0/((1.0 + 
    (lengthSq_83 * lightAttenSq_79)
  ))));
  col_81 = (lightColor0_75 * tmpvar_88.x);
  col_81 = (col_81 + (lightColor1_76 * tmpvar_88.y));
  col_81 = (col_81 + (lightColor2_77 * tmpvar_88.z));
  col_81 = (col_81 + (lightColor3_78 * tmpvar_88.w));
  tmpvar_7 = ((x2_73 + (unity_SHC.xyz * 
    ((normal_72.x * normal_72.x) - (normal_72.y * normal_72.y))
  )) + col_81);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_8 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t27;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
mediump float t16_41;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t11.x = t0.x + _Object2World[3].z;
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    t11.y = t22.x + in_NORMAL0.x;
    t11.xy = fract(t11.xy);
    t11.x = t11.y * 0.5 + t11.x;
    t11.x = t11.x + -0.300000012;
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb11 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t22.x = dot(t3.xyz, t3.xyz);
    t22.x = inversesqrt(t22.x);
    t22.xy = t22.xx * t3.xz;
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, vec2(bvec2(tb11)));
    tb34 = t16_2>=3.0;
    if(tb34){
        tb34 = t16_2==5.0;
        if(tb34){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t34 = dot(t3.xyz, t3.xyz);
            t34 = inversesqrt(t34);
            t3.xyz = vec3(t34) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t34 = t0.x + _ST_WindBranch.x;
            t2.x = t34 + in_TEXCOORD0.w;
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t36 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t36 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb36 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb36)) ? t5.xy : t5.zw;
            t36 = (-t2.y) * t2.z + t5.x;
            t36 = t5.y * t36 + t5.w;
            t37 = (-t36) + t5.x;
            t36 = t5.y * t37 + t36;
            t36 = t36 * _ST_WindBranchTwitch.x;
            t37 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t36 = t36 * t37 + t5.x;
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t36 = t36 * t37;
            t4.xyz = vec3(t36) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t34 * 0.100000001 + in_TEXCOORD0.w;
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t34 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t27.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t27.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t34 = t5.x * t5.y;
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            t36 = t2.w * _ST_WindVector.w;
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t34) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t34 = (-t0.x) + t6.x;
            t0.x = t6.y * t34 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t34 = (-_ST_WindVector.w) + 1.0;
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            t36 = t36 * t5.x;
            t0.x = t0.x * t34 + t36;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t34 = float(1.0) / _ST_WindGlobal.z;
    t34 = (-t34) * 0.25 + t3.y;
    t34 = max(t34, 0.0);
    t34 = t34 * _ST_WindGlobal.z;
    tb36 = t34!=0.0;
    t4.x = log2(t34);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t34 = (tb36) ? t4.x : t34;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t26.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t26.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t36 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    t34 = t34 * t36;
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    t4.y = t3.y;
    t22.x = dot(t4.xyz, t4.xyz);
    t22.x = inversesqrt(t22.x);
    t4.xyz = t22.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t33 = t3.y * _ProjectionParams.x;
    t4.w = t33 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.zw = _World2Object[2].yy;
    t4 = t4 * in_NORMAL0.yyyy;
    t2 = t2 * in_NORMAL0.xxxx + t4;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.zw = _World2Object[2].zz;
    t2 = t4 * in_NORMAL0.zzzz + t2;
    t33 = dot(t2.xyw, t2.xyw);
    t33 = inversesqrt(t33);
    t2 = vec4(t33) * t2;
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    t33 = dot(t4.xyz, t4.xyz);
    t33 = inversesqrt(t33);
    t4.xyz = vec3(t33) * t4.xyz;
    t33 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t2.wxy * t4.xyz;
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t33) * t10_7.xyz;
    t16_5 = t2.ywzx * t2;
    t16_8.x = dot(unity_SHBr, t16_5);
    t16_8.y = dot(unity_SHBg, t16_5);
    t16_8.z = dot(unity_SHBb, t16_5);
    t16_41 = t2.y * t2.y;
    t16_41 = t2.x * t2.x + (-t16_41);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    t6 = (-t0.yyyy) + unity_4LightPosY0;
    t9 = (-t0.zzzz) + unity_4LightPosZ0;
    t10 = t6 * t6;
    t10 = t5 * t5 + t10;
    t10 = t9 * t9 + t10;
    t6 = t2.yyyy * t6;
    t5 = t5 * t2.xxxx + t6;
    t5 = t9 * t2.wwww + t5;
    t6 = inversesqrt(t10);
    t5 = t5 * t6;
    t5 = max(t5, vec4(0.0, 0.0, 0.0, 0.0));
    t6 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    t5 = t5 * t6;
    t6.xyz = t5.yyy * unity_LightColor[1].xyz;
    t6.xyz = unity_LightColor[0].xyz * t5.xxx + t6.xyz;
    t6.xyz = unity_LightColor[2].xyz * t5.zzz + t6.xyz;
    t6.xyz = unity_LightColor[3].xyz * t5.www + t6.xyz;
    t6.xyz = t6.xyz + t16_8.xyz;
    vs_TEXCOORD0.x = t4.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.w = t0.x;
    vs_TEXCOORD1.x = t4.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.w = t0.y;
    vs_TEXCOORD2.x = t4.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD2.w = t0.z;
    vs_TEXCOORD3.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t3.xyz;
    vs_TEXCOORD6.xyz = t6.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    t16_15 = max(t16_0.z, t16_0.y);
    t16_15 = max(t16_15, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_15 = t16_2.x / t16_15;
    t16_1 = t16_15 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_3.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    t1.w = 1.0;
    t16_4.x = dot(unity_SHAr, t1);
    t16_4.y = dot(unity_SHAg, t1);
    t16_4.z = dot(unity_SHAb, t1);
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    t16_15 = max(t16_15, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20.x = _Object2World[3].x;
  tmpvar_20.y = _Object2World[3].y;
  tmpvar_20.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_20.x + tmpvar_20.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((rotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_20.x + tmpvar_20.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    finalPosition_15 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = finalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_20.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_20.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    finalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = finalPosition_15;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = tmpvar_68.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = tmpvar_68.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = tmpvar_68.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_5;
  highp vec3 col_82;
  highp vec4 ndotl_83;
  highp vec4 lengthSq_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_84 = (tmpvar_85 * tmpvar_85);
  lengthSq_84 = (lengthSq_84 + (tmpvar_86 * tmpvar_86));
  lengthSq_84 = (lengthSq_84 + (tmpvar_87 * tmpvar_87));
  ndotl_83 = (tmpvar_85 * normal_81.x);
  ndotl_83 = (ndotl_83 + (tmpvar_86 * normal_81.y));
  ndotl_83 = (ndotl_83 + (tmpvar_87 * normal_81.z));
  highp vec4 tmpvar_88;
  tmpvar_88 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_83 * inversesqrt(lengthSq_84)));
  ndotl_83 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (tmpvar_88 * (1.0/((1.0 + 
    (lengthSq_84 * lightAttenSq_80)
  ))));
  col_82 = (lightColor0_76 * tmpvar_89.x);
  col_82 = (col_82 + (lightColor1_77 * tmpvar_89.y));
  col_82 = (col_82 + (lightColor2_78 * tmpvar_89.z));
  col_82 = (col_82 + (lightColor3_79 * tmpvar_89.w));
  tmpvar_7 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + col_82);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19.x = _Object2World[3].x;
  tmpvar_19.y = _Object2World[3].y;
  tmpvar_19.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((rotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_19.x + tmpvar_19.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    finalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = finalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_19.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_19.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    finalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = finalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = tmpvar_67.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = tmpvar_67.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = tmpvar_67.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_5;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t9.x = t0.x + _Object2World[3].z;
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    t9.y = t18.x + in_NORMAL0.x;
    t9.xy = fract(t9.xy);
    t9.x = t9.y * 0.5 + t9.x;
    t9.x = t9.x + -0.300000012;
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb9 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t18.x = dot(t3.xyz, t3.xyz);
    t18.x = inversesqrt(t18.x);
    t18.xy = t18.xx * t3.xz;
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, vec2(bvec2(tb9)));
    tb28 = t16_2>=3.0;
    if(tb28){
        tb28 = t16_2==5.0;
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = t0.x + _ST_WindBranch.x;
            t2.x = t28 + in_TEXCOORD0.w;
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t30 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t30 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb30 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            t30 = (-t2.y) * t2.z + t5.x;
            t30 = t5.y * t30 + t5.w;
            t31 = (-t30) + t5.x;
            t30 = t5.y * t31 + t30;
            t30 = t30 * _ST_WindBranchTwitch.x;
            t31 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t30 = t30 * t31 + t5.x;
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t30 = t30 * t31;
            t4.xyz = vec3(t30) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t30 = t2.w * _ST_WindVector.w;
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t28 = (-t0.x) + t6.x;
            t0.x = t6.y * t28 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t5.x;
            t0.x = t0.x * t28 + t30;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t28 = float(1.0) / _ST_WindGlobal.z;
    t28 = (-t28) * 0.25 + t3.y;
    t28 = max(t28, 0.0);
    t28 = t28 * _ST_WindGlobal.z;
    tb30 = t28!=0.0;
    t4.x = log2(t28);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t28 = (tb30) ? t4.x : t28;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t22.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t22.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t30 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    t28 = t28 * t30;
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    t4.y = t3.y;
    t18.x = dot(t4.xyz, t4.xyz);
    t18.x = inversesqrt(t18.x);
    t4.xyz = t18.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t27 = t3.y * _ProjectionParams.x;
    t4.w = t27 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.zw = _World2Object[2].yy;
    t5 = t5 * in_NORMAL0.yyyy;
    t2 = t2 * in_NORMAL0.xxxx + t5;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.zw = _World2Object[2].zz;
    t2 = t5 * in_NORMAL0.zzzz + t2;
    t27 = dot(t2.xyw, t2.xyw);
    t27 = inversesqrt(t27);
    t2 = vec4(t27) * t2;
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    t27 = dot(t5.xyz, t5.xyz);
    t27 = inversesqrt(t27);
    t5.xyz = vec3(t27) * t5.xyz;
    t27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t2.wxy * t5.xyz;
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t27) * t10_7.xyz;
    t16_6 = t2.ywzx * t2;
    t16_8.x = dot(unity_SHBr, t16_6);
    t16_8.y = dot(unity_SHBg, t16_6);
    t16_8.z = dot(unity_SHBb, t16_6);
    t16_35 = t2.y * t2.y;
    t16_35 = t2.x * t2.x + (-t16_35);
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    t6 = t0.yyyy * _Object2World[1];
    t6 = _Object2World[0] * t0.xxxx + t6;
    t0 = _Object2World[2] * t0.zzzz + t6;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.w = t4.x;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.w = t4.y;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD2.w = t4.z;
    vs_TEXCOORD3.w = _Color.w;
    vs_TEXCOORD7 = t0;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    t16_15 = max(t16_0.z, t16_0.y);
    t16_15 = max(t16_15, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_15 = t16_2.x / t16_15;
    t16_1 = t16_15 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec94 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec94, 0.0);
    t16_2.x = (-_LightShadowData.x) + 1.0;
    t16_15 = t16_15 * t16_2.x + _LightShadowData.x;
    t16_2.xyz = vec3(t16_15) * _LightColor0.xyz;
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_3.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    t1.w = 1.0;
    t16_4.x = dot(unity_SHAr, t1);
    t16_4.y = dot(unity_SHAg, t1);
    t16_4.z = dot(unity_SHAb, t1);
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    t16_15 = max(t16_15, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_WorldTransformParams;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp float tangentSign_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20.x = _Object2World[3].x;
  tmpvar_20.y = _Object2World[3].y;
  tmpvar_20.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_20.x + tmpvar_20.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((rotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_20.x + tmpvar_20.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    finalPosition_15 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = finalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_20.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_20.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    finalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = finalPosition_15;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = (_glesTANGENT.w * unity_WorldTransformParams.w);
  tangentSign_3 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = (((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx)) * tangentSign_3);
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = tmpvar_68.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = tmpvar_68.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = tmpvar_68.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_5;
  highp vec3 col_82;
  highp vec4 ndotl_83;
  highp vec4 lengthSq_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_84 = (tmpvar_85 * tmpvar_85);
  lengthSq_84 = (lengthSq_84 + (tmpvar_86 * tmpvar_86));
  lengthSq_84 = (lengthSq_84 + (tmpvar_87 * tmpvar_87));
  ndotl_83 = (tmpvar_85 * normal_81.x);
  ndotl_83 = (ndotl_83 + (tmpvar_86 * normal_81.y));
  ndotl_83 = (ndotl_83 + (tmpvar_87 * normal_81.z));
  highp vec4 tmpvar_88;
  tmpvar_88 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_83 * inversesqrt(lengthSq_84)));
  ndotl_83 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (tmpvar_88 * (1.0/((1.0 + 
    (lengthSq_84 * lightAttenSq_80)
  ))));
  col_82 = (lightColor0_76 * tmpvar_89.x);
  col_82 = (col_82 + (lightColor1_77 * tmpvar_89.y));
  col_82 = (col_82 + (lightColor2_78 * tmpvar_89.z));
  col_82 = (col_82 + (lightColor3_79 * tmpvar_89.w));
  tmpvar_7 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + col_82);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec2 t12;
bool tb12;
highp vec2 t24;
highp vec2 t28;
highp vec2 t29;
highp float t36;
highp float t37;
bool tb37;
highp float t39;
bool tb39;
highp float t40;
mediump float t16_44;
void main()
{
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t12.x = t0.x + _Object2World[3].z;
    t24.x = in_POSITION0.x + in_NORMAL0.y;
    t12.y = t24.x + in_NORMAL0.x;
    t12.xy = fract(t12.xy);
    t12.x = t12.y * 0.5 + t12.x;
    t12.x = t12.x + -0.300000012;
    t1.z = t12.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2 = _WindEnabled * _WindQuality;
    tb12 = 0.0<t16_2;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t24.x = dot(t3.xyz, t3.xyz);
    t24.x = inversesqrt(t24.x);
    t24.xy = t24.xx * t3.xz;
    t24.xy = mix(vec2(0.0, 0.0), t24.xy, vec2(bvec2(tb12)));
    tb37 = t16_2>=3.0;
    if(tb37){
        tb37 = t16_2==5.0;
        if(tb37){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t37 = dot(t3.xyz, t3.xyz);
            t37 = inversesqrt(t37);
            t3.xyz = vec3(t37) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t37 = t0.x + _ST_WindBranch.x;
            t2.x = t37 + in_TEXCOORD0.w;
            t2.y = t37 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t39 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t39 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t5 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t5.w = t2.z * t2.y;
            tb39 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb39)) ? t5.xy : t5.zw;
            t39 = (-t2.y) * t2.z + t5.x;
            t39 = t5.y * t39 + t5.w;
            t40 = (-t39) + t5.x;
            t39 = t5.y * t40 + t39;
            t39 = t39 * _ST_WindBranchTwitch.x;
            t40 = (-_ST_WindVector.w) + 1.0;
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            t5.x = t2.x * t5.x;
            t39 = t39 * t40 + t5.x;
            t40 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t39 = t39 * t40;
            t4.xyz = vec3(t39) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            t5.x = t37 * 0.100000001 + in_TEXCOORD0.w;
            t37 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t37 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t29.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t29.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t37 = t5.x * t5.y;
            t37 = (-t37) * _ST_WindTurbulences.x + 1.0;
            t39 = t2.w * _ST_WindVector.w;
            t37 = t39 * _ST_WindBranchWhip.x + t37;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t37) * t3.xyz;
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t37 = (-t0.x) + t6.x;
            t0.x = t6.y * t37 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t37 = (-_ST_WindVector.w) + 1.0;
            t39 = (-_ST_WindBranchTwitch.x) + 1.0;
            t39 = t39 * t5.x;
            t0.x = t0.x * t37 + t39;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
        //ENDIF
        }
    } else {
        t3.xyz = in_POSITION0.xyz;
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t37 = float(1.0) / _ST_WindGlobal.z;
    t37 = (-t37) * 0.25 + t3.y;
    t37 = max(t37, 0.0);
    t37 = t37 * _ST_WindGlobal.z;
    tb39 = t37!=0.0;
    t4.x = log2(t37);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t37 = (tb39) ? t4.x : t37;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t28.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t28.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t39 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t39 = _ST_WindGlobal.y * t39 + t4.x;
    t37 = t37 * t39;
    t4.xz = t24.xy * vec2(t37) + t3.xz;
    t4.y = t3.y;
    t24.x = dot(t4.xyz, t4.xyz);
    t24.x = inversesqrt(t24.x);
    t4.xyz = t24.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb12)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t36 = t3.y * _ProjectionParams.x;
    t4.w = t36 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    t2.x = _World2Object[0].x;
    t2.y = _World2Object[1].x;
    t2.zw = _World2Object[2].xx;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.zw = _World2Object[2].yy;
    t5 = t5 * in_NORMAL0.yyyy;
    t2 = t2 * in_NORMAL0.xxxx + t5;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.zw = _World2Object[2].zz;
    t2 = t5 * in_NORMAL0.zzzz + t2;
    t36 = dot(t2.xyw, t2.xyw);
    t36 = inversesqrt(t36);
    t2 = vec4(t36) * t2;
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    t36 = dot(t5.xyz, t5.xyz);
    t36 = inversesqrt(t36);
    t5.xyz = vec3(t36) * t5.xyz;
    t36 = in_TANGENT0.w * unity_WorldTransformParams.w;
    t10_7.xyz = t2.wxy * t5.xyz;
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    t10_7.xyz = vec3(t36) * t10_7.xyz;
    t16_6 = t2.ywzx * t2;
    t16_8.x = dot(unity_SHBr, t16_6);
    t16_8.y = dot(unity_SHBg, t16_6);
    t16_8.z = dot(unity_SHBb, t16_6);
    t16_44 = t2.y * t2.y;
    t16_44 = t2.x * t2.x + (-t16_44);
    t16_8.xyz = unity_SHC.xyz * vec3(t16_44) + t16_8.xyz;
    t6 = (-t4.xxxx) + unity_4LightPosX0;
    t9 = (-t4.yyyy) + unity_4LightPosY0;
    t10 = (-t4.zzzz) + unity_4LightPosZ0;
    t11 = t9 * t9;
    t11 = t6 * t6 + t11;
    t11 = t10 * t10 + t11;
    t9 = t2.yyyy * t9;
    t6 = t6 * t2.xxxx + t9;
    t6 = t10 * t2.wwww + t6;
    t9 = inversesqrt(t11);
    t6 = t6 * t9;
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    t9 = t11 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t9 = vec4(1.0, 1.0, 1.0, 1.0) / t9;
    t6 = t6 * t9;
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    t9.xyz = t16_8.xyz + t9.xyz;
    t6 = t0.yyyy * _Object2World[1];
    t6 = _Object2World[0] * t0.xxxx + t6;
    t0 = _Object2World[2] * t0.zzzz + t6;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    vs_TEXCOORD0.x = t5.z;
    vs_TEXCOORD0.y = t10_7.x;
    vs_TEXCOORD0.z = t2.x;
    vs_TEXCOORD0.w = t4.x;
    vs_TEXCOORD1.x = t5.x;
    vs_TEXCOORD1.y = t10_7.y;
    vs_TEXCOORD1.z = t2.y;
    vs_TEXCOORD1.w = t4.y;
    vs_TEXCOORD2.x = t5.y;
    vs_TEXCOORD2.y = t10_7.z;
    vs_TEXCOORD2.z = t2.w;
    vs_TEXCOORD2.w = t4.z;
    vs_TEXCOORD3.w = _Color.w;
    vs_TEXCOORD7 = t0;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD4.xyz = t1.xyz;
    vs_TEXCOORD5.xyz = t3.xyz;
    vs_TEXCOORD6.xyz = t9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1.x + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    t16_15 = max(t16_0.z, t16_0.y);
    t16_15 = max(t16_15, t16_0.x);
    t16_2.x = max(t10_1.z, t10_1.y);
    t16_2.x = max(t10_1.x, t16_2.x);
    t16_15 = t16_2.x / t16_15;
    t16_1 = t16_15 * 0.5 + 0.5;
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    vec3 txVec95 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec95, 0.0);
    t16_2.x = (-_LightShadowData.x) + 1.0;
    t16_15 = t16_15 * t16_2.x + _LightShadowData.x;
    t16_2.xyz = vec3(t16_15) * _LightColor0.xyz;
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    t10_3.xyz = t10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    t1.w = 1.0;
    t16_4.x = dot(unity_SHAr, t1);
    t16_4.y = dot(unity_SHAg, t1);
    t16_4.z = dot(unity_SHAb, t1);
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    t16_15 = max(t16_15, 0.0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    SV_Target0.xyz = t16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_11;
  highp vec3 rotatedWindVector_12;
  highp vec3 finalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  finalPosition_13 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    rotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_14;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    finalPosition_13 = vPos_18;
  };
  highp vec3 tmpvar_22;
  tmpvar_22.x = _Object2World[3].x;
  tmpvar_22.y = _Object2World[3].y;
  tmpvar_22.z = _Object2World[3].z;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = finalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = finalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (finalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((rotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_22.x + tmpvar_22.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    finalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = finalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (finalPosition_13, finalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((finalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_22.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_22.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (finalPosition_13.xz + (rotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    finalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = finalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_4;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
  xlv_TEXCOORD5 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    t15 = dot(t8.xyz, t8.xyz);
    t15 = inversesqrt(t15);
    t8.xy = vec2(t15) * t8.xz;
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, vec2(bvec2(tb1)));
    tb22 = t16_0.x==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t9 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t9 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    tb23 = t16_0.x>=3.0;
    if(tb23){
        if(tb22){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t22 = dot(t3.xyz, t3.xyz);
            t22 = inversesqrt(t22);
            t3.xyz = vec3(t22) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t0.x = t22 + in_TEXCOORD0.w;
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t23 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t23 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb23 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            t23 = (-t0.y) * t0.z + t5.x;
            t23 = t5.y * t23 + t5.w;
            t24 = (-t23) + t5.x;
            t23 = t5.y * t24 + t23;
            t23 = t23 * _ST_WindBranchTwitch.x;
            t24 = (-_ST_WindVector.w) + 1.0;
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            t25 = t0.x * t25;
            t23 = t23 * t24 + t25;
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t23 = t23 * t24;
            t4.xyz = vec3(t23) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t19.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t19.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t22 = t5.x * t5.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t23 = t0.w * _ST_WindVector.w;
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t22) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t4.x = t22 + in_TEXCOORD0.w;
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t22 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t22 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb22 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            t22 = (-t4.y) * t4.z + t5.x;
            t22 = t5.y * t22 + t0.w;
            t23 = (-t22) + t5.x;
            t22 = t5.y * t23 + t22;
            t22 = t22 * _ST_WindBranchTwitch.x;
            t23 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t4.x;
            t22 = t22 * t23 + t24;
            t3.xyz = vec3(t22) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t22 = dot(t2.xyz, t2.xyz);
    t22 = sqrt(t22);
    t23 = float(1.0) / _ST_WindGlobal.z;
    t23 = (-t23) * 0.25 + t2.y;
    t23 = max(t23, 0.0);
    t23 = t23 * _ST_WindGlobal.z;
    tb3 = t23!=0.0;
    t10 = log2(t23);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    t23 = (tb3) ? t10 : t23;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t17.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    t23 = t23 * t3.x;
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    t3.y = t2.y;
    t8.x = dot(t3.xyz, t3.xyz);
    t8.x = inversesqrt(t8.x);
    t3.xyz = t8.xxx * t3.xyz;
    t8.xyz = vec3(t22) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t22 = t2.y * _ProjectionParams.x;
    t3.w = t22 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t1.x = _World2Object[0].x;
    t1.y = _World2Object[1].x;
    t1.z = _World2Object[2].x;
    t3.x = _World2Object[0].y;
    t3.y = _World2Object[1].y;
    t3.z = _World2Object[2].y;
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    t3.x = _World2Object[0].z;
    t3.y = _World2Object[1].z;
    t3.z = _World2Object[2].z;
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    t22 = dot(t1.xyz, t1.xyz);
    t22 = inversesqrt(t22);
    t1.xyz = vec3(t22) * t1.xyz;
    t16_0 = t1.yzzx * t1.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_27 = t1.y * t1.y;
    t16_27 = t1.x * t1.x + (-t16_27);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    vs_TEXCOORD0.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_11.x)
   + 
    (v_64.xyz * tmpvar_11.y)
  ) + (v_65.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_66;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_4;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_11.x)
   + 
    (v_65.xyz * tmpvar_11.y)
  ) + (v_66.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_4;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_4;
  highp vec3 col_78;
  highp vec4 ndotl_79;
  highp vec4 lengthSq_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosZ0 - tmpvar_63.z);
  lengthSq_80 = (tmpvar_81 * tmpvar_81);
  lengthSq_80 = (lengthSq_80 + (tmpvar_82 * tmpvar_82));
  lengthSq_80 = (lengthSq_80 + (tmpvar_83 * tmpvar_83));
  ndotl_79 = (tmpvar_81 * normal_77.x);
  ndotl_79 = (ndotl_79 + (tmpvar_82 * normal_77.y));
  ndotl_79 = (ndotl_79 + (tmpvar_83 * normal_77.z));
  highp vec4 tmpvar_84;
  tmpvar_84 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_79 * inversesqrt(lengthSq_80)));
  ndotl_79 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (tmpvar_84 * (1.0/((1.0 + 
    (lengthSq_80 * lightAttenSq_76)
  ))));
  col_78 = (lightColor0_72 * tmpvar_85.x);
  col_78 = (col_78 + (lightColor1_73 * tmpvar_85.y));
  col_78 = (col_78 + (lightColor2_74 * tmpvar_85.z));
  col_78 = (col_78 + (lightColor3_75 * tmpvar_85.w));
  tmpvar_7 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + col_78);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    t17 = dot(t9.xyz, t9.xyz);
    t17 = inversesqrt(t17);
    t9.xy = vec2(t17) * t9.xz;
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, vec2(bvec2(tb1)));
    tb25 = t16_0.x==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t10 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t10 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    tb26 = t16_0.x>=3.0;
    if(tb26){
        if(tb25){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t25 = dot(t3.xyz, t3.xyz);
            t25 = inversesqrt(t25);
            t3.xyz = vec3(t25) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t0.x = t25 + in_TEXCOORD0.w;
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t26 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t26 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb26 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            t26 = (-t0.y) * t0.z + t5.x;
            t26 = t5.y * t26 + t5.w;
            t27 = (-t26) + t5.x;
            t26 = t5.y * t27 + t26;
            t26 = t26 * _ST_WindBranchTwitch.x;
            t27 = (-_ST_WindVector.w) + 1.0;
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            t28 = t0.x * t28;
            t26 = t26 * t27 + t28;
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t26 = t26 * t27;
            t4.xyz = vec3(t26) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t21.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t21.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t25 = t5.x * t5.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t26 = t0.w * _ST_WindVector.w;
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t25 = _Object2World[3].y + _Object2World[3].x;
            t25 = t25 + _ST_WindBranch.x;
            t4.x = t25 + in_TEXCOORD0.w;
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t25 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t25 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb25 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            t25 = (-t4.y) * t4.z + t5.x;
            t25 = t5.y * t25 + t0.w;
            t26 = (-t25) + t5.x;
            t25 = t5.y * t26 + t25;
            t25 = t25 * _ST_WindBranchTwitch.x;
            t26 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t4.x;
            t25 = t25 * t26 + t27;
            t3.xyz = vec3(t25) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t25 = dot(t2.xyz, t2.xyz);
    t25 = sqrt(t25);
    t26 = float(1.0) / _ST_WindGlobal.z;
    t26 = (-t26) * 0.25 + t2.y;
    t26 = max(t26, 0.0);
    t26 = t26 * _ST_WindGlobal.z;
    tb3 = t26!=0.0;
    t11 = log2(t26);
    t11 = t11 * _ST_WindGlobal.w;
    t11 = exp2(t11);
    t26 = (tb3) ? t11 : t26;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t19.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t19.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    t26 = t26 * t3.x;
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    t3.y = t2.y;
    t9.x = dot(t3.xyz, t3.xyz);
    t9.x = inversesqrt(t9.x);
    t3.xyz = t9.xxx * t3.xyz;
    t9.xyz = vec3(t25) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t25 = t2.y * _ProjectionParams.x;
    t3.w = t25 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t25 = dot(t3.xyz, t3.xyz);
    t25 = inversesqrt(t25);
    t3.xyz = vec3(t25) * t3.xyz;
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_30 = t3.y * t3.y;
    t16_30 = t3.x * t3.x + (-t16_30);
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    t4 = (-t1.yyyy) + unity_4LightPosY0;
    t5 = (-t1.zzzz) + unity_4LightPosZ0;
    t7 = t4 * t4;
    t7 = t0 * t0 + t7;
    t7 = t5 * t5 + t7;
    t4 = t3.yyyy * t4;
    t0 = t0 * t3.xxxx + t4;
    t0 = t5 * t3.zzzz + t0;
    t4 = inversesqrt(t7);
    t0 = t0 * t4;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    t0 = t0 * t4;
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    t4.xyz = t4.xyz + t16_6.xyz;
    vs_TEXCOORD0.xyz = t3.xyz;
    vs_TEXCOORD1.xyz = t1.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD5.xyz = t4.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_5 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_5 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_18 = max(t16_18, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_64;
  tmpvar_64 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_12.x)
   + 
    (v_66.xyz * tmpvar_12.y)
  ) + (v_67.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_4;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_64.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_64.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_64.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_59;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_11.x)
   + 
    (v_64.xyz * tmpvar_11.y)
  ) + (v_65.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_66;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_4;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    t15 = dot(t8.xyz, t8.xyz);
    t15 = inversesqrt(t15);
    t8.xy = vec2(t15) * t8.xz;
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, vec2(bvec2(tb1)));
    tb22 = t16_0.x==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t9 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t9 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    tb23 = t16_0.x>=3.0;
    if(tb23){
        if(tb22){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t22 = dot(t3.xyz, t3.xyz);
            t22 = inversesqrt(t22);
            t3.xyz = vec3(t22) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t0.x = t22 + in_TEXCOORD0.w;
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t23 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t23 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb23 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            t23 = (-t0.y) * t0.z + t5.x;
            t23 = t5.y * t23 + t5.w;
            t24 = (-t23) + t5.x;
            t23 = t5.y * t24 + t23;
            t23 = t23 * _ST_WindBranchTwitch.x;
            t24 = (-_ST_WindVector.w) + 1.0;
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            t25 = t0.x * t25;
            t23 = t23 * t24 + t25;
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t23 = t23 * t24;
            t4.xyz = vec3(t23) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t22 * 0.100000001 + in_TEXCOORD0.w;
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t22 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t19.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t19.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t22 = t5.x * t5.y;
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            t23 = t0.w * _ST_WindVector.w;
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t22) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t22 = _Object2World[3].y + _Object2World[3].x;
            t22 = t22 + _ST_WindBranch.x;
            t4.x = t22 + in_TEXCOORD0.w;
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t22 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t22 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb22 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            t22 = (-t4.y) * t4.z + t5.x;
            t22 = t5.y * t22 + t0.w;
            t23 = (-t22) + t5.x;
            t22 = t5.y * t23 + t22;
            t22 = t22 * _ST_WindBranchTwitch.x;
            t23 = (-_ST_WindVector.w) + 1.0;
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            t24 = t24 * t4.x;
            t22 = t22 * t23 + t24;
            t3.xyz = vec3(t22) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t22 = dot(t2.xyz, t2.xyz);
    t22 = sqrt(t22);
    t23 = float(1.0) / _ST_WindGlobal.z;
    t23 = (-t23) * 0.25 + t2.y;
    t23 = max(t23, 0.0);
    t23 = t23 * _ST_WindGlobal.z;
    tb3 = t23!=0.0;
    t10 = log2(t23);
    t10 = t10 * _ST_WindGlobal.w;
    t10 = exp2(t10);
    t23 = (tb3) ? t10 : t23;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t17.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t17.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    t23 = t23 * t3.x;
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    t3.y = t2.y;
    t8.x = dot(t3.xyz, t3.xyz);
    t8.x = inversesqrt(t8.x);
    t3.xyz = t8.xxx * t3.xyz;
    t8.xyz = vec3(t22) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t22 = t2.y * _ProjectionParams.x;
    t3.w = t22 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    t3.x = _World2Object[0].x;
    t3.y = _World2Object[1].x;
    t3.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    t22 = dot(t3.xyz, t3.xyz);
    t22 = inversesqrt(t22);
    t3.xyz = vec3(t22) * t3.xyz;
    t16_0 = t3.yzzx * t3.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_27 = t3.y * t3.y;
    t16_27 = t3.x * t3.x + (-t16_27);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD0.xyz = t3.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD6 = t0;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    vec3 txVec96 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec96, 0.0);
    t16_22 = (-_LightShadowData.x) + 1.0;
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_13;
  highp vec3 rotatedWindVector_14;
  highp vec3 finalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  finalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    finalPosition_15 = vPos_20;
  };
  highp vec3 tmpvar_24;
  tmpvar_24.x = _Object2World[3].x;
  tmpvar_24.y = _Object2World[3].y;
  tmpvar_24.z = _Object2World[3].z;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = finalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = finalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (finalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((rotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_24.x + tmpvar_24.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    finalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = finalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (finalPosition_15, finalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((finalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_24.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_24.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (finalPosition_15.xz + (rotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    finalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = finalPosition_15;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_64;
  tmpvar_64 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_12.x)
   + 
    (v_66.xyz * tmpvar_12.y)
  ) + (v_67.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_4;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_64.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_64.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_64.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_59;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec4 t8;
highp vec3 t10;
highp float t11;
highp float t12;
highp float t19;
highp vec2 t21;
highp vec2 t23;
highp float t28;
bool tb28;
highp float t29;
bool tb29;
highp float t30;
highp float t31;
mediump float t16_33;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t16_0.x = _WindEnabled * _WindQuality;
    tb1 = 0.0<t16_0.x;
    t10.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t10.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t10.xyz;
    t10.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t10.xyz;
    t19 = dot(t10.xyz, t10.xyz);
    t19 = inversesqrt(t19);
    t10.xy = vec2(t19) * t10.xz;
    t10.xy = mix(vec2(0.0, 0.0), t10.xy, vec2(bvec2(tb1)));
    tb28 = t16_0.x==5.0;
    tb2 = in_TEXCOORD0.x<0.5;
    t2.x = tb2 ? 0.75 : float(0.0);
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t2.x = t11 * _ST_WindFrondRipple.z + t2.x;
    t2.x = t2.x + 0.5;
    t2.x = fract(t2.x);
    t2.x = t2.x * 2.0 + -1.0;
    t11 = abs(t2.x) * abs(t2.x);
    t2.x = -abs(t2.x) * 2.0 + 3.0;
    t2.x = t11 * t2.x + -0.5;
    t2.x = t2.x * in_TEXCOORD2.y;
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t2.xyz = (bool(tb28)) ? t2.xyz : in_POSITION0.xyz;
    tb29 = t16_0.x>=3.0;
    if(tb29){
        if(tb28){
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            t28 = dot(t3.xyz, t3.xyz);
            t28 = inversesqrt(t28);
            t3.xyz = vec3(t28) * t3.xyz;
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t28 = _Object2World[3].y + _Object2World[3].x;
            t28 = t28 + _ST_WindBranch.x;
            t0.x = t28 + in_TEXCOORD0.w;
            t0.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t29 = t0.x * _ST_WindBranchTwitch.y;
            t0.z = t29 * 0.5;
            t0.w = t0.x + (-in_TEXCOORD0.z);
            t0 = t0 + vec4(0.5, 0.5, 0.5, 1.5);
            t0 = fract(t0);
            t0 = t0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t5 = abs(t0) * abs(t0);
            t0 = -abs(t0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t0 = t5 * t0 + vec4(-0.5, -0.5, -0.5, -0.5);
            t0 = t0 + t0;
            t5.w = t0.z * t0.y;
            tb29 = t5.w<0.0;
            t5.y = (-t5.w);
            t5.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb29)) ? t5.xy : t5.zw;
            t29 = (-t0.y) * t0.z + t5.x;
            t29 = t5.y * t29 + t5.w;
            t30 = (-t29) + t5.x;
            t29 = t5.y * t30 + t29;
            t29 = t29 * _ST_WindBranchTwitch.x;
            t30 = (-_ST_WindVector.w) + 1.0;
            t31 = (-_ST_WindBranchTwitch.x) + 1.0;
            t31 = t0.x * t31;
            t29 = t29 * t30 + t31;
            t30 = t0.w * _ST_WindBranchWhip.x + 1.0;
            t29 = t29 * t30;
            t4.xyz = vec3(t29) * t4.xyz;
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            t5.x = t28 * 0.100000001 + in_TEXCOORD0.w;
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t5.y = t28 * 0.100000001 + in_TEXCOORD0.w;
            t5.xy = t5.xy + vec2(0.5, 0.5);
            t5.xy = fract(t5.xy);
            t5.xy = t5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t23.xy = abs(t5.xy) * abs(t5.xy);
            t5.xy = -abs(t5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t5.xy = t23.xy * t5.xy + vec2(-0.5, -0.5);
            t5.xy = t5.xy + t5.xy;
            t5.xy = t5.xy * t5.xy;
            t28 = t5.x * t5.y;
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            t29 = t0.w * _ST_WindVector.w;
            t28 = t29 * _ST_WindBranchWhip.x + t28;
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            t3.xyz = vec3(t28) * t3.xyz;
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
        } else {
            t3.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t3.xyz = fract(t3.xyz);
            t3.xyz = t3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            t28 = _Object2World[3].y + _Object2World[3].x;
            t28 = t28 + _ST_WindBranch.x;
            t4.x = t28 + in_TEXCOORD0.w;
            t4.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t28 = t4.x * _ST_WindBranchTwitch.y;
            t4.z = t28 * 0.5;
            t4.xyz = t4.xyz + vec3(0.5, 0.5, 0.5);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            t4.xyz = -abs(t4.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.5, -0.5, -0.5);
            t4.xyz = t4.xyz + t4.xyz;
            t0.w = t4.z * t4.y;
            tb28 = t0.w<0.0;
            t0.y = (-t0.w);
            t0.xz = vec2(-1.0, 1.0);
            t5.xy = (bool(tb28)) ? t0.xy : t0.zw;
            t28 = (-t4.y) * t4.z + t5.x;
            t28 = t5.y * t28 + t0.w;
            t29 = (-t28) + t5.x;
            t28 = t5.y * t29 + t28;
            t28 = t28 * _ST_WindBranchTwitch.x;
            t29 = (-_ST_WindVector.w) + 1.0;
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            t30 = t30 * t4.x;
            t28 = t28 * t29 + t30;
            t3.xyz = vec3(t28) * t3.xyz;
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t28 = dot(t2.xyz, t2.xyz);
    t28 = sqrt(t28);
    t29 = float(1.0) / _ST_WindGlobal.z;
    t29 = (-t29) * 0.25 + t2.y;
    t29 = max(t29, 0.0);
    t29 = t29 * _ST_WindGlobal.z;
    tb3 = t29!=0.0;
    t12 = log2(t29);
    t12 = t12 * _ST_WindGlobal.w;
    t12 = exp2(t12);
    t29 = (tb3) ? t12 : t29;
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    t3.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t3.xy = t3.xy + vec2(0.5, 0.5);
    t3.xy = fract(t3.xy);
    t3.xy = t3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t21.xy = abs(t3.xy) * abs(t3.xy);
    t3.xy = -abs(t3.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t3.xy = t21.xy * t3.xy + vec2(-0.5, -0.5);
    t3.xy = t3.xy + t3.xy;
    t3.x = t3.y * t3.y + t3.x;
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t3.x = _ST_WindGlobal.y * t3.x + t12;
    t29 = t29 * t3.x;
    t3.xz = t10.xy * vec2(t29) + t2.xz;
    t3.y = t2.y;
    t10.x = dot(t3.xyz, t3.xyz);
    t10.x = inversesqrt(t10.x);
    t3.xyz = t10.xxx * t3.xyz;
    t10.xyz = vec3(t28) * t3.xyz;
    t1.xyz = (bool(tb1)) ? t10.xyz : t2.xyz;
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    t3.xz = t2.xz * vec2(0.5, 0.5);
    t28 = t2.y * _ProjectionParams.x;
    t3.w = t28 * 0.5;
    t3.xy = t3.zz + t3.xw;
    t3.xy = t3.xy * _ScreenParams.xy;
    t2.xy = t3.xy * vec2(0.25, 0.25);
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    t4.x = _World2Object[0].x;
    t4.y = _World2Object[1].x;
    t4.z = _World2Object[2].x;
    t5.x = _World2Object[0].y;
    t5.y = _World2Object[1].y;
    t5.z = _World2Object[2].y;
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    t5.x = _World2Object[0].z;
    t5.y = _World2Object[1].z;
    t5.z = _World2Object[2].z;
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    t28 = dot(t4.xyz, t4.xyz);
    t28 = inversesqrt(t28);
    t4.xyz = vec3(t28) * t4.xyz;
    t16_0 = t4.yzzx * t4.xyzz;
    t16_6.x = dot(unity_SHBr, t16_0);
    t16_6.y = dot(unity_SHBg, t16_0);
    t16_6.z = dot(unity_SHBb, t16_0);
    t16_33 = t4.y * t4.y;
    t16_33 = t4.x * t4.x + (-t16_33);
    t16_6.xyz = unity_SHC.xyz * vec3(t16_33) + t16_6.xyz;
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    t7 = (-t3.zzzz) + unity_4LightPosZ0;
    t8 = t5 * t5;
    t8 = t0 * t0 + t8;
    t8 = t7 * t7 + t8;
    t5 = t4.yyyy * t5;
    t0 = t0 * t4.xxxx + t5;
    t0 = t7 * t4.zzzz + t0;
    t5 = inversesqrt(t8);
    t0 = t0 * t5;
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    t0 = t0 * t5;
    t5.xyz = t0.yyy * unity_LightColor[1].xyz;
    t5.xyz = unity_LightColor[0].xyz * t0.xxx + t5.xyz;
    t5.xyz = unity_LightColor[2].xyz * t0.zzz + t5.xyz;
    t5.xyz = unity_LightColor[3].xyz * t0.www + t5.xyz;
    t5.xyz = t5.xyz + t16_6.xyz;
    t0 = t1.yyyy * _Object2World[1];
    t0 = _Object2World[0] * t1.xxxx + t0;
    t0 = _Object2World[2] * t1.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    vs_TEXCOORD0.xyz = t4.xyz;
    vs_TEXCOORD1.xyz = t3.xyz;
    vs_TEXCOORD2.w = _Color.w;
    vs_TEXCOORD6 = t0;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.z = 0.0;
    vs_TEXCOORD4.xyz = t2.xyz;
    vs_TEXCOORD5.xyz = t5.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_4.x = dot(unity_SHAr, t16_0);
    t16_4.y = dot(unity_SHAg, t16_0);
    t16_4.z = dot(unity_SHAb, t16_0);
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    vec3 txVec77 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec77, 0.0);
    t16_22 = (-_LightShadowData.x) + 1.0;
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 rotatedBranchAnchor_12;
  highp vec3 rotatedWindVector_13;
  highp vec3 finalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  finalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    rotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    rotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    rotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    rotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    finalPosition_14 = vPos_19;
  };
  highp vec3 tmpvar_23;
  tmpvar_23.x = _Object2World[3].x;
  tmpvar_23.y = _Object2World[3].y;
  tmpvar_23.z = _Object2World[3].z;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = finalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = finalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (finalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((rotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_23.x + tmpvar_23.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    finalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = finalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (finalPosition_14, finalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((finalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_23.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_23.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (finalPosition_14.xz + (rotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    finalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = finalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_11.x)
   + 
    (v_64.xyz * tmpvar_11.y)
  ) + (v_65.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_66;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_4;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    t0.x = _Object2World[3].y + _Object2World[3].x;
    t8.x = t0.x + _Object2World[3].z;
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    t8.y = t16.x + in_NORMAL0.x;
    t8.xy = fract(t8.xy);
    t8.x = t8.y * 0.5 + t8.x;
    t8.x = t8.x + -0.300000012;
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    t16_2.x = _WindEnabled * _WindQuality;
    tb8 = 0.0<t16_2.x;
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    t16.x = dot(t3.xyz, t3.xyz);
    t16.x = inversesqrt(t16.x);
    t16.xy = t16.xx * t3.xz;
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, vec2(bvec2(tb8)));
    tb25 = t16_2.x==5.0;
    tb3 = in_TEXCOORD0.x<0.5;
    t3.x = tb3 ? 0.75 : float(0.0);
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    t3.x = t3.x + 0.5;
    t3.x = fract(t3.x);
    t3.x = t3.x * 2.0 + -1.0;
    t11 = abs(t3.x) * abs(t3.x);
    t3.x = -abs(t3.x) * 2.0 + 3.0;
    t3.x = t11 * t3.x + -0.5;
    t3.x = t3.x * in_TEXCOORD2.y;
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    tb27 = t16_2.x>=3.0;
    if(tb27){
        if(tb25){
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            t25 = dot(t4.xyz, t4.xyz);
            t25 = inversesqrt(t25);
            t4.xyz = vec3(t25) * t4.xyz;
            t5.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            t25 = t0.x + _ST_WindBranch.x;
            t2.x = t25 + in_TEXCOORD0.w;
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t27 = t2.x * _ST_WindBranchTwitch.y;
            t2.z = t27 * 0.5;
            t2.w = t2.x + (-in_TEXCOORD0.z);
            t2 = t2 + vec4(0.5, 0.5, 0.5, 1.5);
            t2 = fract(t2);
            t2 = t2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
            t6 = abs(t2) * abs(t2);
            t2 = -abs(t2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
            t2 = t6 * t2 + vec4(-0.5, -0.5, -0.5, -0.5);
            t2 = t2 + t2;
            t6.w = t2.z * t2.y;
            tb27 = t6.w<0.0;
            t6.y = (-t6.w);
            t6.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            t27 = (-t2.y) * t2.z + t6.x;
            t27 = t6.y * t27 + t6.w;
            t28 = (-t27) + t6.x;
            t27 = t6.y * t28 + t27;
            t27 = t27 * _ST_WindBranchTwitch.x;
            t28 = (-_ST_WindVector.w) + 1.0;
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            t29 = t2.x * t29;
            t27 = t27 * t28 + t29;
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            t27 = t27 * t28;
            t5.xyz = vec3(t27) * t5.xyz;
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            t6.x = t25 * 0.100000001 + in_TEXCOORD0.w;
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            t6.y = t25 * 0.100000001 + in_TEXCOORD0.w;
            t6.xy = t6.xy + vec2(0.5, 0.5);
            t6.xy = fract(t6.xy);
            t6.xy = t6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            t22.xy = abs(t6.xy) * abs(t6.xy);
            t6.xy = -abs(t6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
            t6.xy = t22.xy * t6.xy + vec2(-0.5, -0.5);
            t6.xy = t6.xy + t6.xy;
            t6.xy = t6.xy * t6.xy;
            t25 = t6.x * t6.y;
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            t27 = t2.w * _ST_WindVector.w;
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            t4.xyz = vec3(t25) * t4.xyz;
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
        } else {
            t4.xyz = in_TEXCOORD0.www * vec3(0.0625, 1.0, 16.0);
            t4.xyz = fract(t4.xyz);
            t4.xyz = t4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            t0.x = t0.x + _ST_WindBranch.x;
            t5.x = t0.x + in_TEXCOORD0.w;
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            t5.z = t0.x * 0.5;
            t5.xyz = t5.xyz + vec3(0.5, 0.5, 0.5);
            t5.xyz = fract(t5.xyz);
            t5.xyz = t5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            t5.xyz = -abs(t5.xyz) * vec3(2.0, 2.0, 2.0) + vec3(3.0, 3.0, 3.0);
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.5, -0.5, -0.5);
            t5.xyz = t5.xyz + t5.xyz;
            t2.w = t5.z * t5.y;
            tb0 = t2.w<0.0;
            t2.y = (-t2.w);
            t2.xz = vec2(-1.0, 1.0);
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            t0.x = (-t5.y) * t5.z + t6.x;
            t0.x = t6.y * t0.x + t2.w;
            t25 = (-t0.x) + t6.x;
            t0.x = t6.y * t25 + t0.x;
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            t25 = (-_ST_WindVector.w) + 1.0;
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            t27 = t27 * t5.x;
            t0.x = t0.x * t25 + t27;
            t4.xyz = t0.xxx * t4.xyz;
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    t0.x = dot(t3.xyz, t3.xyz);
    t0.x = sqrt(t0.x);
    t25 = float(1.0) / _ST_WindGlobal.z;
    t25 = (-t25) * 0.25 + t3.y;
    t25 = max(t25, 0.0);
    t25 = t25 * _ST_WindGlobal.z;
    tb27 = t25!=0.0;
    t4.x = log2(t25);
    t4.x = t4.x * _ST_WindGlobal.w;
    t4.x = exp2(t4.x);
    t25 = (tb27) ? t4.x : t25;
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    t4.y = _ST_WindGlobal.x * 0.800000012 + _Object2World[3].y;
    t4.xy = t4.xy + vec2(0.5, 0.5);
    t4.xy = fract(t4.xy);
    t4.xy = t4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    t20.xy = abs(t4.xy) * abs(t4.xy);
    t4.xy = -abs(t4.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    t4.xy = t20.xy * t4.xy + vec2(-0.5, -0.5);
    t4.xy = t4.xy + t4.xy;
    t27 = t4.y * t4.y + t4.x;
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    t25 = t25 * t27;
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    t4.y = t3.y;
    t16.x = dot(t4.xyz, t4.xyz);
    t16.x = inversesqrt(t16.x);
    t4.xyz = t16.xxx * t4.xyz;
    t0.xzw = t0.xxx * t4.xyz;
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    t4.xz = t3.xz * vec2(0.5, 0.5);
    t24 = t3.y * _ProjectionParams.x;
    t4.w = t24 * 0.5;
    t4.xy = t4.zz + t4.xw;
    t4.xy = t4.xy * _ScreenParams.xy;
    t3.xy = t4.xy * vec2(0.25, 0.25);
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    t0.x = _World2Object[0].x;
    t0.y = _World2Object[1].x;
    t0.z = _World2Object[2].x;
    t4.x = _World2Object[0].y;
    t4.y = _World2Object[1].y;
    t4.z = _World2Object[2].y;
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    t4.x = _World2Object[0].z;
    t4.y = _World2Object[1].z;
    t4.z = _World2Object[2].z;
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    t24 = dot(t0.xyz, t0.xyz);
    t24 = inversesqrt(t24);
    t0.xyz = vec3(t24) * t0.xyz;
    t16_2 = t0.yzzx * t0.xyzz;
    t16_7.x = dot(unity_SHBr, t16_2);
    t16_7.y = dot(unity_SHBg, t16_2);
    t16_7.z = dot(unity_SHBb, t16_2);
    t16_31 = t0.y * t0.y;
    t16_31 = t0.x * t0.x + (-t16_31);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    vs_TEXCOORD0.xyz = t0.xyz;
    vs_TEXCOORD2.w = _Color.w;
    t1.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.xyz = t1.xyz;
    vs_TEXCOORD4.xyz = t3.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    t16_6 = fract(t16_0.y);
    t1.x = t16_0.x;
    t1.y = t16_6 * 0.0625 + unity_LODFade.y;
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    t16_1 = t10_1 + -0.5;
    tb1 = t16_1<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    tb1 = t10_2<0.0;
    if((int(tb1) * int(0xffffffffu))!=0){discard;}
    t16_3.x = max(t10_0.z, t10_0.y);
    t16_3.x = max(t10_0.x, t16_3.x);
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    t16_4.x = max(t16_9.z, t16_9.y);
    t16_4.x = max(t16_9.x, t16_4.x);
    t16_3.x = t16_3.x / t16_4.x;
    t16_1 = t16_3.x * 0.5 + 0.5;
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    t16_0.xyz = vs_TEXCOORD0.xyz;
    t16_0.w = 1.0;
    t16_5.x = dot(unity_SHAr, t16_0);
    t16_5.y = dot(unity_SHAg, t16_0);
    t16_5.z = dot(unity_SHAb, t16_0);
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    t16_21 = max(t16_21, 0.0);
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    SV_Target0.xyz = t16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((_Object2World[3].x + _Object2World[3].y) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariat